<?php
/**
 * VserversserverNamemediacacheApi
 * PHP version 5
 *
 * @category Class
 * @package  WowzaApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Topix\Hackademy\WowzaApi\Client;

use Topix\Hackademy\WowzaApi\Configuration;
use Topix\Hackademy\WowzaApi\ApiClient;
use Topix\Hackademy\WowzaApi\ApiException;
use Topix\Hackademy\WowzaApi\Model\MediaCacheConfig;
use Topix\Hackademy\WowzaApi\Model\MediaCacheConfig3;
use Topix\Hackademy\WowzaApi\Model\MediaCacheConfigAdv;
use Topix\Hackademy\WowzaApi\Model\MediaCacheSourceConfig;
use Topix\Hackademy\WowzaApi\Model\MediaCacheSourceConfig3;
use Topix\Hackademy\WowzaApi\Model\MediaCacheSourceConfigAdv;
use Topix\Hackademy\WowzaApi\Model\MediaCacheSourceConfigAdv3;
use Topix\Hackademy\WowzaApi\Model\MediaCacheSourcesConfig;
use Topix\Hackademy\WowzaApi\Model\MediaCacheSourcesConfig3;
use Topix\Hackademy\WowzaApi\Model\MediaCacheStoreConfig;
use Topix\Hackademy\WowzaApi\Model\MediaCacheStoreConfig3;
use Topix\Hackademy\WowzaApi\Model\MediaCacheStoreConfigAdv;
use Topix\Hackademy\WowzaApi\Model\MediaCacheStoresConfig;
use Topix\Hackademy\WowzaApi\Model\MediaCacheStoresConfig3;
use Topix\Hackademy\WowzaApi\ObjectSerializer;

/**
 * VserversserverNamemediacacheApi Class Doc Comment
 *
 * @category Class
 * @package  WowzaApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VserversserverNamemediacacheApi extends SwaggerApi
{

    /**
     * Operation deleteMediaCacheSourceConfig
     *
     * Deletes the specified MediaCache Source configuration.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function deleteMediaCacheSourceConfig($serverName)
    {
        list($response) = $this->deleteMediaCacheSourceConfigWithHttpInfo($serverName);
        return $response;
    }


    /**
     * Operation deleteMediaCacheSourceConfigWithHttpInfo
     *
     * Deletes the specified MediaCache Source configuration.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function deleteMediaCacheSourceConfigWithHttpInfo($serverName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling deleteMediaCacheSourceConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/mediacache/sources/{sourceName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation deleteMediaCacheSourceConfig3
     *
     * Deletes the specified MediaCache Source configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $sourceName  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function deleteMediaCacheSourceConfig3($serverName, $sourceName)
    {
        list($response) = $this->deleteMediaCacheSourceConfig3WithHttpInfo($serverName, $sourceName);
        return $response;
    }


    /**
     * Operation deleteMediaCacheSourceConfig3WithHttpInfo
     *
     * Deletes the specified MediaCache Source configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $sourceName  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function deleteMediaCacheSourceConfig3WithHttpInfo($serverName, $sourceName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling deleteMediaCacheSourceConfig3');
        }

        // verify the required parameter 'sourceName' is set
        if ($sourceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sourceName when calling deleteMediaCacheSourceConfig3');
        }

        // parse inputs
        $resourcePath = "/v3/servers/{serverName}/mediacache/sources/{sourceName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($sourceName !== null) {
            $resourcePath = str_replace(
                "{" . "sourceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($sourceName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation deleteMediaCacheStoreConfig
     *
     * Deletes the specified MediaCache Store configuration.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function deleteMediaCacheStoreConfig($serverName)
    {
        list($response) = $this->deleteMediaCacheStoreConfigWithHttpInfo($serverName);
        return $response;
    }


    /**
     * Operation deleteMediaCacheStoreConfigWithHttpInfo
     *
     * Deletes the specified MediaCache Store configuration.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function deleteMediaCacheStoreConfigWithHttpInfo($serverName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling deleteMediaCacheStoreConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/mediacache/stores/{storeName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation deleteMediaCacheStoreConfig3
     *
     * Deletes the specified MediaCache Store configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $storeName  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function deleteMediaCacheStoreConfig3($serverName, $storeName)
    {
        list($response) = $this->deleteMediaCacheStoreConfig3WithHttpInfo($serverName, $storeName);
        return $response;
    }


    /**
     * Operation deleteMediaCacheStoreConfig3WithHttpInfo
     *
     * Deletes the specified MediaCache Store configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $storeName  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function deleteMediaCacheStoreConfig3WithHttpInfo($serverName, $storeName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling deleteMediaCacheStoreConfig3');
        }

        // verify the required parameter 'storeName' is set
        if ($storeName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $storeName when calling deleteMediaCacheStoreConfig3');
        }

        // parse inputs
        $resourcePath = "/v3/servers/{serverName}/mediacache/stores/{storeName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($storeName !== null) {
            $resourcePath = str_replace(
                "{" . "storeName" . "}",
                $this->apiClient->getSerializer()->toPathValue($storeName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation getMediaCacheConfig
     *
     * Retrieves the server MediaCache configuration.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return  MediaCacheConfig
     * @throws ApiException on non-2xx response
     */
    public function getMediaCacheConfig($serverName)
    {
        list($response) = $this->getMediaCacheConfigWithHttpInfo($serverName);
        return $response;
    }


    /**
     * Operation getMediaCacheConfigWithHttpInfo
     *
     * Retrieves the server MediaCache configuration.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return Array of \Model\MediaCacheConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getMediaCacheConfigWithHttpInfo($serverName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getMediaCacheConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/mediacache";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                MediaCacheConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, MediaCacheConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), MediaCacheConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getMediaCacheConfig3
     *
     * Retrieves the server MediaCache configuration.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return  MediaCacheConfig3
     * @throws ApiException on non-2xx response
     */
    public function getMediaCacheConfig3($serverName)
    {
        list($response) = $this->getMediaCacheConfig3WithHttpInfo($serverName);
        return $response;
    }


    /**
     * Operation getMediaCacheConfig3WithHttpInfo
     *
     * Retrieves the server MediaCache configuration.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return Array of \Model\MediaCacheConfig3, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getMediaCacheConfig3WithHttpInfo($serverName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getMediaCacheConfig3');
        }

        // parse inputs
        $resourcePath = "/v3/servers/{serverName}/mediacache";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                MediaCacheConfig3::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, MediaCacheConfig3::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), MediaCacheConfig3::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getMediaCacheConfigAdv
     *
     * Retrieves the advanced MediaCache configuration.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return  MediaCacheConfigAdv
     * @throws ApiException on non-2xx response
     */
    public function getMediaCacheConfigAdv($serverName)
    {
        list($response) = $this->getMediaCacheConfigAdvWithHttpInfo($serverName);
        return $response;
    }


    /**
     * Operation getMediaCacheConfigAdvWithHttpInfo
     *
     * Retrieves the advanced MediaCache configuration.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return Array of \Model\MediaCacheConfigAdv, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getMediaCacheConfigAdvWithHttpInfo($serverName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getMediaCacheConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/mediacache/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                MediaCacheConfigAdv::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, MediaCacheConfigAdv::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), MediaCacheConfigAdv::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getMediaCacheSourceConfig
     *
     * Retrieves the specified MediaCache Source configuration.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return  MediaCacheSourceConfig
     * @throws ApiException on non-2xx response
     */
    public function getMediaCacheSourceConfig($serverName)
    {
        list($response) = $this->getMediaCacheSourceConfigWithHttpInfo($serverName);
        return $response;
    }


    /**
     * Operation getMediaCacheSourceConfigWithHttpInfo
     *
     * Retrieves the specified MediaCache Source configuration.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return Array of \Model\MediaCacheSourceConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getMediaCacheSourceConfigWithHttpInfo($serverName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getMediaCacheSourceConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/mediacache/sources/{sourceName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                MediaCacheSourceConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, MediaCacheSourceConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), MediaCacheSourceConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getMediaCacheSourceConfig3
     *
     * Retrieves the specified MediaCache Source configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $sourceName  (required)
     *
     * @return  MediaCacheSourceConfig3
     * @throws ApiException on non-2xx response
     */
    public function getMediaCacheSourceConfig3($serverName, $sourceName)
    {
        list($response) = $this->getMediaCacheSourceConfig3WithHttpInfo($serverName, $sourceName);
        return $response;
    }


    /**
     * Operation getMediaCacheSourceConfig3WithHttpInfo
     *
     * Retrieves the specified MediaCache Source configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $sourceName  (required)
     *
     * @return Array of \Model\MediaCacheSourceConfig3, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getMediaCacheSourceConfig3WithHttpInfo($serverName, $sourceName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getMediaCacheSourceConfig3');
        }

        // verify the required parameter 'sourceName' is set
        if ($sourceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sourceName when calling getMediaCacheSourceConfig3');
        }

        // parse inputs
        $resourcePath = "/v3/servers/{serverName}/mediacache/sources/{sourceName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($sourceName !== null) {
            $resourcePath = str_replace(
                "{" . "sourceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($sourceName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                MediaCacheSourceConfig3::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, MediaCacheSourceConfig3::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), MediaCacheSourceConfig3::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getMediaCacheSourceConfigAdv
     *
     * Retrieves the specified advanced MediaCache Source configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $sourceName  (required)
     *
     * @return  MediaCacheSourceConfigAdv
     * @throws ApiException on non-2xx response
     */
    public function getMediaCacheSourceConfigAdv($serverName, $sourceName)
    {
        list($response) = $this->getMediaCacheSourceConfigAdvWithHttpInfo($serverName, $sourceName);
        return $response;
    }


    /**
     * Operation getMediaCacheSourceConfigAdvWithHttpInfo
     *
     * Retrieves the specified advanced MediaCache Source configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $sourceName  (required)
     *
     * @return Array of \Model\MediaCacheSourceConfigAdv, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getMediaCacheSourceConfigAdvWithHttpInfo($serverName, $sourceName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getMediaCacheSourceConfigAdv');
        }

        // verify the required parameter 'sourceName' is set
        if ($sourceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sourceName when calling getMediaCacheSourceConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/mediacache/sources/{sourceName}/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($sourceName !== null) {
            $resourcePath = str_replace(
                "{" . "sourceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($sourceName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                MediaCacheSourceConfigAdv::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, MediaCacheSourceConfigAdv::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), MediaCacheSourceConfigAdv::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getMediaCacheSourceConfigAdv3
     *
     * Retrieves the specified advanced MediaCache Source configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $sourceName  (required)
     *
     * @return  MediaCacheSourceConfigAdv3
     * @throws ApiException on non-2xx response
     */
    public function getMediaCacheSourceConfigAdv3($serverName, $sourceName)
    {
        list($response) = $this->getMediaCacheSourceConfigAdv3WithHttpInfo($serverName, $sourceName);
        return $response;
    }


    /**
     * Operation getMediaCacheSourceConfigAdv3WithHttpInfo
     *
     * Retrieves the specified advanced MediaCache Source configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $sourceName  (required)
     *
     * @return Array of \Model\MediaCacheSourceConfigAdv3, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getMediaCacheSourceConfigAdv3WithHttpInfo($serverName, $sourceName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getMediaCacheSourceConfigAdv3');
        }

        // verify the required parameter 'sourceName' is set
        if ($sourceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sourceName when calling getMediaCacheSourceConfigAdv3');
        }

        // parse inputs
        $resourcePath = "/v3/servers/{serverName}/mediacache/sources/{sourceName}/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($sourceName !== null) {
            $resourcePath = str_replace(
                "{" . "sourceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($sourceName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                MediaCacheSourceConfigAdv3::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, MediaCacheSourceConfigAdv3::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), MediaCacheSourceConfigAdv3::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getMediaCacheSourcesConfig
     *
     * Retrieves the list of MediaCache Sources.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return  MediaCacheSourcesConfig
     * @throws ApiException on non-2xx response
     */
    public function getMediaCacheSourcesConfig($serverName)
    {
        list($response) = $this->getMediaCacheSourcesConfigWithHttpInfo($serverName);
        return $response;
    }


    /**
     * Operation getMediaCacheSourcesConfigWithHttpInfo
     *
     * Retrieves the list of MediaCache Sources.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return Array of \Model\MediaCacheSourcesConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getMediaCacheSourcesConfigWithHttpInfo($serverName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getMediaCacheSourcesConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/mediacache/sources";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                MediaCacheSourcesConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, MediaCacheSourcesConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), MediaCacheSourcesConfig, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getMediaCacheSourcesConfig3
     *
     * Retrieves the list of MediaCache Sources.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return  MediaCacheSourcesConfig3
     * @throws ApiException on non-2xx response
     */
    public function getMediaCacheSourcesConfig3($serverName)
    {
        list($response) = $this->getMediaCacheSourcesConfig3WithHttpInfo($serverName);
        return $response;
    }


    /**
     * Operation getMediaCacheSourcesConfig3WithHttpInfo
     *
     * Retrieves the list of MediaCache Sources.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return Array of \Model\MediaCacheSourcesConfig3, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getMediaCacheSourcesConfig3WithHttpInfo($serverName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getMediaCacheSourcesConfig3');
        }

        // parse inputs
        $resourcePath = "/v3/servers/{serverName}/mediacache/sources";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                MediaCacheSourcesConfig3::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, MediaCacheSourcesConfig3::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), MediaCacheSourcesConfig3::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getMediaCacheStoreConfig
     *
     * Retrieves the specified MediaCache Store configuration.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return  MediaCacheStoreConfig
     * @throws ApiException on non-2xx response
     */
    public function getMediaCacheStoreConfig($serverName)
    {
        list($response) = $this->getMediaCacheStoreConfigWithHttpInfo($serverName);
        return $response;
    }


    /**
     * Operation getMediaCacheStoreConfigWithHttpInfo
     *
     * Retrieves the specified MediaCache Store configuration.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return Array of \Model\MediaCacheStoreConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getMediaCacheStoreConfigWithHttpInfo($serverName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getMediaCacheStoreConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/mediacache/stores/{storeName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                MediaCacheStoreConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, MediaCacheStoreConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), MediaCacheStoreConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getMediaCacheStoreConfig3
     *
     * Retrieves the specified MediaCache Store configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $storeName  (required)
     *
     * @return  MediaCacheStoreConfig3
     * @throws ApiException on non-2xx response
     */
    public function getMediaCacheStoreConfig3($serverName, $storeName)
    {
        list($response) = $this->getMediaCacheStoreConfig3WithHttpInfo($serverName, $storeName);
        return $response;
    }


    /**
     * Operation getMediaCacheStoreConfig3WithHttpInfo
     *
     * Retrieves the specified MediaCache Store configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $storeName  (required)
     *
     * @return Array of \Model\MediaCacheStoreConfig3, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getMediaCacheStoreConfig3WithHttpInfo($serverName, $storeName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getMediaCacheStoreConfig3');
        }

        // verify the required parameter 'storeName' is set
        if ($storeName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $storeName when calling getMediaCacheStoreConfig3');
        }

        // parse inputs
        $resourcePath = "/v3/servers/{serverName}/mediacache/stores/{storeName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($storeName !== null) {
            $resourcePath = str_replace(
                "{" . "storeName" . "}",
                $this->apiClient->getSerializer()->toPathValue($storeName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                MediaCacheStoreConfig3::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, MediaCacheStoreConfig3::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), MediaCacheStoreConfig3::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getMediaCacheStoreConfigAdv
     *
     * Retrieves the specified advanced MediaCache Store configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $storeName  (required)
     *
     * @return  MediaCacheStoreConfigAdv
     * @throws ApiException on non-2xx response
     */
    public function getMediaCacheStoreConfigAdv($serverName, $storeName)
    {
        list($response) = $this->getMediaCacheStoreConfigAdvWithHttpInfo($serverName, $storeName);
        return $response;
    }


    /**
     * Operation getMediaCacheStoreConfigAdvWithHttpInfo
     *
     * Retrieves the specified advanced MediaCache Store configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $storeName  (required)
     *
     * @return Array of \Model\MediaCacheStoreConfigAdv, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getMediaCacheStoreConfigAdvWithHttpInfo($serverName, $storeName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getMediaCacheStoreConfigAdv');
        }

        // verify the required parameter 'storeName' is set
        if ($storeName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $storeName when calling getMediaCacheStoreConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/mediacache/stores/{storeName}/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($storeName !== null) {
            $resourcePath = str_replace(
                "{" . "storeName" . "}",
                $this->apiClient->getSerializer()->toPathValue($storeName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                MediaCacheStoreConfigAdv::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, MediaCacheStoreConfigAdv::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), MediaCacheStoreConfigAdv::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getMediaCacheStoresConfig
     *
     * Retrieves the list of MediaCache Stores.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return  MediaCacheStoresConfig
     * @throws ApiException on non-2xx response
     */
    public function getMediaCacheStoresConfig($serverName)
    {
        list($response) = $this->getMediaCacheStoresConfigWithHttpInfo($serverName);
        return $response;
    }


    /**
     * Operation getMediaCacheStoresConfigWithHttpInfo
     *
     * Retrieves the list of MediaCache Stores.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return Array of \Model\MediaCacheStoresConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getMediaCacheStoresConfigWithHttpInfo($serverName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getMediaCacheStoresConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/mediacache/stores";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                MediaCacheStoresConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, MediaCacheStoresConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), MediaCacheStoresConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getMediaCacheStoresConfig3
     *
     * Retrieves the list of MediaCache Stores.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return  MediaCacheStoresConfig3
     * @throws ApiException on non-2xx response
     */
    public function getMediaCacheStoresConfig3($serverName)
    {
        list($response) = $this->getMediaCacheStoresConfig3WithHttpInfo($serverName);
        return $response;
    }


    /**
     * Operation getMediaCacheStoresConfig3WithHttpInfo
     *
     * Retrieves the list of MediaCache Stores.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return Array of \Model\MediaCacheStoresConfig3, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getMediaCacheStoresConfig3WithHttpInfo($serverName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getMediaCacheStoresConfig3');
        }

        // parse inputs
        $resourcePath = "/v3/servers/{serverName}/mediacache/stores";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                MediaCacheStoresConfig3::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, MediaCacheStoresConfig3::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), MediaCacheStoresConfig3::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation postMediaCacheConfigAdv
     *
     * Adds an advanced MediaCache configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param MediaCacheConfigAdv $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postMediaCacheConfigAdv($serverName, $body)
    {
        list($response) = $this->postMediaCacheConfigAdvWithHttpInfo($serverName, $body);
        return $response;
    }


    /**
     * Operation postMediaCacheConfigAdvWithHttpInfo
     *
     * Adds an advanced MediaCache configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param MediaCacheConfigAdv $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postMediaCacheConfigAdvWithHttpInfo($serverName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postMediaCacheConfigAdv');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postMediaCacheConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/mediacache/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postMediaCacheSourceConfig
     *
     * Adds the specified MediaCache Source configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param MediaCacheSourceConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postMediaCacheSourceConfig($serverName, $body)
    {
        list($response) = $this->postMediaCacheSourceConfigWithHttpInfo($serverName, $body);
        return $response;
    }


    /**
     * Operation postMediaCacheSourceConfigWithHttpInfo
     *
     * Adds the specified MediaCache Source configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param MediaCacheSourceConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postMediaCacheSourceConfigWithHttpInfo($serverName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postMediaCacheSourceConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postMediaCacheSourceConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/mediacache/sources/{sourceName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postMediaCacheSourceConfig3
     *
     * Adds the specified MediaCache Source configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $sourceName  (required)
     * @param MediaCacheSourceConfig3 $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postMediaCacheSourceConfig3($serverName, $sourceName, $body)
    {
        list($response) = $this->postMediaCacheSourceConfig3WithHttpInfo($serverName, $sourceName, $body);
        return $response;
    }


    /**
     * Operation postMediaCacheSourceConfig3WithHttpInfo
     *
     * Adds the specified MediaCache Source configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $sourceName  (required)
     * @param MediaCacheSourceConfig3 $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postMediaCacheSourceConfig3WithHttpInfo($serverName, $sourceName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postMediaCacheSourceConfig3');
        }

        // verify the required parameter 'sourceName' is set
        if ($sourceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sourceName when calling postMediaCacheSourceConfig3');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postMediaCacheSourceConfig3');
        }

        // parse inputs
        $resourcePath = "/v3/servers/{serverName}/mediacache/sources/{sourceName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($sourceName !== null) {
            $resourcePath = str_replace(
                "{" . "sourceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($sourceName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postMediaCacheSourceConfigAdv
     *
     * Adds the specified advanced MediaCache Source configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $sourceName  (required)
     * @param MediaCacheSourceConfigAdv $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postMediaCacheSourceConfigAdv($serverName, $sourceName, $body)
    {
        list($response) = $this->postMediaCacheSourceConfigAdvWithHttpInfo($serverName, $sourceName, $body);
        return $response;
    }


    /**
     * Operation postMediaCacheSourceConfigAdvWithHttpInfo
     *
     * Adds the specified advanced MediaCache Source configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $sourceName  (required)
     * @param MediaCacheSourceConfigAdv $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postMediaCacheSourceConfigAdvWithHttpInfo($serverName, $sourceName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postMediaCacheSourceConfigAdv');
        }

        // verify the required parameter 'sourceName' is set
        if ($sourceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sourceName when calling postMediaCacheSourceConfigAdv');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postMediaCacheSourceConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/mediacache/sources/{sourceName}/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($sourceName !== null) {
            $resourcePath = str_replace(
                "{" . "sourceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($sourceName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postMediaCacheSourceConfigAdv3
     *
     * Adds the specified advanced MediaCache Source configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $sourceName  (required)
     * @param MediaCacheSourceConfigAdv3 $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postMediaCacheSourceConfigAdv3($serverName, $sourceName, $body)
    {
        list($response) = $this->postMediaCacheSourceConfigAdv3WithHttpInfo($serverName, $sourceName, $body);
        return $response;
    }


    /**
     * Operation postMediaCacheSourceConfigAdv3WithHttpInfo
     *
     * Adds the specified advanced MediaCache Source configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $sourceName  (required)
     * @param MediaCacheSourceConfigAdv3 $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postMediaCacheSourceConfigAdv3WithHttpInfo($serverName, $sourceName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postMediaCacheSourceConfigAdv3');
        }

        // verify the required parameter 'sourceName' is set
        if ($sourceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sourceName when calling postMediaCacheSourceConfigAdv3');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postMediaCacheSourceConfigAdv3');
        }

        // parse inputs
        $resourcePath = "/v3/servers/{serverName}/mediacache/sources/{sourceName}/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($sourceName !== null) {
            $resourcePath = str_replace(
                "{" . "sourceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($sourceName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postMediaCacheSourcesConfig
     *
     * Adds the specified MediaCache Source to the list.
     *
     * @param string $serverName Reserved for future use (required)
     * @param MediaCacheSourceConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postMediaCacheSourcesConfig($serverName, $body)
    {
        list($response) = $this->postMediaCacheSourcesConfigWithHttpInfo($serverName, $body);
        return $response;
    }


    /**
     * Operation postMediaCacheSourcesConfigWithHttpInfo
     *
     * Adds the specified MediaCache Source to the list.
     *
     * @param string $serverName Reserved for future use (required)
     * @param MediaCacheSourceConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postMediaCacheSourcesConfigWithHttpInfo($serverName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postMediaCacheSourcesConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postMediaCacheSourcesConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/mediacache/sources";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postMediaCacheSourcesConfig3
     *
     * Adds the specified MediaCache Source to the list.
     *
     * @param string $serverName Reserved for future use (required)
     * @param MediaCacheSourceConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postMediaCacheSourcesConfig3($serverName, $body)
    {
        list($response) = $this->postMediaCacheSourcesConfig3WithHttpInfo($serverName, $body);
        return $response;
    }


    /**
     * Operation postMediaCacheSourcesConfig3WithHttpInfo
     *
     * Adds the specified MediaCache Source to the list.
     *
     * @param string $serverName Reserved for future use (required)
     * @param MediaCacheSourceConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postMediaCacheSourcesConfig3WithHttpInfo($serverName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postMediaCacheSourcesConfig3');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postMediaCacheSourcesConfig3');
        }

        // parse inputs
        $resourcePath = "/v3/servers/{serverName}/mediacache/sources";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postMediaCacheStoreConfig
     *
     * Adds the specified MediaCache Store configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param MediaCacheStoreConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postMediaCacheStoreConfig($serverName, $body)
    {
        list($response) = $this->postMediaCacheStoreConfigWithHttpInfo($serverName, $body);
        return $response;
    }


    /**
     * Operation postMediaCacheStoreConfigWithHttpInfo
     *
     * Adds the specified MediaCache Store configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param MediaCacheStoreConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postMediaCacheStoreConfigWithHttpInfo($serverName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postMediaCacheStoreConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postMediaCacheStoreConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/mediacache/stores/{storeName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postMediaCacheStoreConfig3
     *
     * Adds the specified MediaCache Store configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $storeName  (required)
     * @param MediaCacheStoreConfig3 $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postMediaCacheStoreConfig3($serverName, $storeName, $body)
    {
        list($response) = $this->postMediaCacheStoreConfig3WithHttpInfo($serverName, $storeName, $body);
        return $response;
    }


    /**
     * Operation postMediaCacheStoreConfig3WithHttpInfo
     *
     * Adds the specified MediaCache Store configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $storeName  (required)
     * @param MediaCacheStoreConfig3 $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postMediaCacheStoreConfig3WithHttpInfo($serverName, $storeName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postMediaCacheStoreConfig3');
        }

        // verify the required parameter 'storeName' is set
        if ($storeName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $storeName when calling postMediaCacheStoreConfig3');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postMediaCacheStoreConfig3');
        }

        // parse inputs
        $resourcePath = "/v3/servers/{serverName}/mediacache/stores/{storeName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($storeName !== null) {
            $resourcePath = str_replace(
                "{" . "storeName" . "}",
                $this->apiClient->getSerializer()->toPathValue($storeName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postMediaCacheStoreConfigAdv
     *
     * Adds the specified advanced MediaCache Store configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $storeName  (required)
     * @param MediaCacheStoreConfigAdv $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postMediaCacheStoreConfigAdv($serverName, $storeName, $body)
    {
        list($response) = $this->postMediaCacheStoreConfigAdvWithHttpInfo($serverName, $storeName, $body);
        return $response;
    }


    /**
     * Operation postMediaCacheStoreConfigAdvWithHttpInfo
     *
     * Adds the specified advanced MediaCache Store configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $storeName  (required)
     * @param MediaCacheStoreConfigAdv $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postMediaCacheStoreConfigAdvWithHttpInfo($serverName, $storeName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postMediaCacheStoreConfigAdv');
        }

        // verify the required parameter 'storeName' is set
        if ($storeName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $storeName when calling postMediaCacheStoreConfigAdv');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postMediaCacheStoreConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/mediacache/stores/{storeName}/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($storeName !== null) {
            $resourcePath = str_replace(
                "{" . "storeName" . "}",
                $this->apiClient->getSerializer()->toPathValue($storeName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postMediaCacheStoresConfig
     *
     * Adds the specified MediaCache Store to the list.
     *
     * @param string $serverName Reserved for future use (required)
     * @param MediaCacheStoreConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postMediaCacheStoresConfig($serverName, $body)
    {
        list($response) = $this->postMediaCacheStoresConfigWithHttpInfo($serverName, $body);
        return $response;
    }


    /**
     * Operation postMediaCacheStoresConfigWithHttpInfo
     *
     * Adds the specified MediaCache Store to the list.
     *
     * @param string $serverName Reserved for future use (required)
     * @param MediaCacheStoreConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postMediaCacheStoresConfigWithHttpInfo($serverName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postMediaCacheStoresConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postMediaCacheStoresConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/mediacache/stores";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postMediaCacheStoresConfig3
     *
     * Adds the specified MediaCache Store to the list.
     *
     * @param string $serverName Reserved for future use (required)
     * @param MediaCacheStoreConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postMediaCacheStoresConfig3($serverName, $body)
    {
        list($response) = $this->postMediaCacheStoresConfig3WithHttpInfo($serverName, $body);
        return $response;
    }


    /**
     * Operation postMediaCacheStoresConfig3WithHttpInfo
     *
     * Adds the specified MediaCache Store to the list.
     *
     * @param string $serverName Reserved for future use (required)
     * @param MediaCacheStoreConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postMediaCacheStoresConfig3WithHttpInfo($serverName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postMediaCacheStoresConfig3');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postMediaCacheStoresConfig3');
        }

        // parse inputs
        $resourcePath = "/v3/servers/{serverName}/mediacache/stores";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putMediaCacheConfig
     *
     * Updates the server MediaCache configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param MediaCacheConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putMediaCacheConfig($serverName, $body)
    {
        list($response) = $this->putMediaCacheConfigWithHttpInfo($serverName, $body);
        return $response;
    }


    /**
     * Operation putMediaCacheConfigWithHttpInfo
     *
     * Updates the server MediaCache configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param MediaCacheConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putMediaCacheConfigWithHttpInfo($serverName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putMediaCacheConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putMediaCacheConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/mediacache";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putMediaCacheConfig3
     *
     * Updates the server MediaCache configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param MediaCacheConfig3 $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putMediaCacheConfig3($serverName, $body)
    {
        list($response) = $this->putMediaCacheConfig3WithHttpInfo($serverName, $body);
        return $response;
    }


    /**
     * Operation putMediaCacheConfig3WithHttpInfo
     *
     * Updates the server MediaCache configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param MediaCacheConfig3 $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putMediaCacheConfig3WithHttpInfo($serverName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putMediaCacheConfig3');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putMediaCacheConfig3');
        }

        // parse inputs
        $resourcePath = "/v3/servers/{serverName}/mediacache";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putMediaCacheConfigAdv
     *
     * Updates the advanced MediaCache configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param MediaCacheConfigAdv $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putMediaCacheConfigAdv($serverName, $body)
    {
        list($response) = $this->putMediaCacheConfigAdvWithHttpInfo($serverName, $body);
        return $response;
    }


    /**
     * Operation putMediaCacheConfigAdvWithHttpInfo
     *
     * Updates the advanced MediaCache configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param MediaCacheConfigAdv $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putMediaCacheConfigAdvWithHttpInfo($serverName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putMediaCacheConfigAdv');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putMediaCacheConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/mediacache/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putMediaCacheSourceConfig
     *
     * Updates the specified MediaCache Source configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param MediaCacheSourceConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putMediaCacheSourceConfig($serverName, $body)
    {
        list($response) = $this->putMediaCacheSourceConfigWithHttpInfo($serverName, $body);
        return $response;
    }


    /**
     * Operation putMediaCacheSourceConfigWithHttpInfo
     *
     * Updates the specified MediaCache Source configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param MediaCacheSourceConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putMediaCacheSourceConfigWithHttpInfo($serverName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putMediaCacheSourceConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putMediaCacheSourceConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/mediacache/sources/{sourceName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putMediaCacheSourceConfig3
     *
     * Updates the specified MediaCache Source configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $sourceName  (required)
     * @param MediaCacheSourceConfig3 $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putMediaCacheSourceConfig3($serverName, $sourceName, $body)
    {
        list($response) = $this->putMediaCacheSourceConfig3WithHttpInfo($serverName, $sourceName, $body);
        return $response;
    }


    /**
     * Operation putMediaCacheSourceConfig3WithHttpInfo
     *
     * Updates the specified MediaCache Source configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $sourceName  (required)
     * @param MediaCacheSourceConfig3 $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putMediaCacheSourceConfig3WithHttpInfo($serverName, $sourceName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putMediaCacheSourceConfig3');
        }

        // verify the required parameter 'sourceName' is set
        if ($sourceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sourceName when calling putMediaCacheSourceConfig3');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putMediaCacheSourceConfig3');
        }

        // parse inputs
        $resourcePath = "/v3/servers/{serverName}/mediacache/sources/{sourceName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($sourceName !== null) {
            $resourcePath = str_replace(
                "{" . "sourceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($sourceName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putMediaCacheSourceConfigAdv
     *
     * Updates the specified advanced MediaCache Source configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $sourceName  (required)
     * @param MediaCacheSourceConfigAdv $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putMediaCacheSourceConfigAdv($serverName, $sourceName, $body)
    {
        list($response) = $this->putMediaCacheSourceConfigAdvWithHttpInfo($serverName, $sourceName, $body);
        return $response;
    }


    /**
     * Operation putMediaCacheSourceConfigAdvWithHttpInfo
     *
     * Updates the specified advanced MediaCache Source configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $sourceName  (required)
     * @param MediaCacheSourceConfigAdv $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putMediaCacheSourceConfigAdvWithHttpInfo($serverName, $sourceName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putMediaCacheSourceConfigAdv');
        }

        // verify the required parameter 'sourceName' is set
        if ($sourceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sourceName when calling putMediaCacheSourceConfigAdv');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putMediaCacheSourceConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/mediacache/sources/{sourceName}/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($sourceName !== null) {
            $resourcePath = str_replace(
                "{" . "sourceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($sourceName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putMediaCacheSourceConfigAdv3
     *
     * Updates the specified advanced MediaCache Source configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $sourceName  (required)
     * @param MediaCacheSourceConfigAdv3 $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putMediaCacheSourceConfigAdv3($serverName, $sourceName, $body)
    {
        list($response) = $this->putMediaCacheSourceConfigAdv3WithHttpInfo($serverName, $sourceName, $body);
        return $response;
    }


    /**
     * Operation putMediaCacheSourceConfigAdv3WithHttpInfo
     *
     * Updates the specified advanced MediaCache Source configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $sourceName  (required)
     * @param MediaCacheSourceConfigAdv3 $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putMediaCacheSourceConfigAdv3WithHttpInfo($serverName, $sourceName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putMediaCacheSourceConfigAdv3');
        }

        // verify the required parameter 'sourceName' is set
        if ($sourceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sourceName when calling putMediaCacheSourceConfigAdv3');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putMediaCacheSourceConfigAdv3');
        }

        // parse inputs
        $resourcePath = "/v3/servers/{serverName}/mediacache/sources/{sourceName}/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($sourceName !== null) {
            $resourcePath = str_replace(
                "{" . "sourceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($sourceName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putMediaCacheStoreConfig
     *
     * Updates the specified MediaCache Store configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param MediaCacheStoreConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putMediaCacheStoreConfig($serverName, $body)
    {
        list($response) = $this->putMediaCacheStoreConfigWithHttpInfo($serverName, $body);
        return $response;
    }


    /**
     * Operation putMediaCacheStoreConfigWithHttpInfo
     *
     * Updates the specified MediaCache Store configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param MediaCacheStoreConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putMediaCacheStoreConfigWithHttpInfo($serverName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putMediaCacheStoreConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putMediaCacheStoreConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/mediacache/stores/{storeName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putMediaCacheStoreConfig3
     *
     * Updates the specified MediaCache Store configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $storeName  (required)
     * @param MediaCacheStoreConfig3 $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putMediaCacheStoreConfig3($serverName, $storeName, $body)
    {
        list($response) = $this->putMediaCacheStoreConfig3WithHttpInfo($serverName, $storeName, $body);
        return $response;
    }


    /**
     * Operation putMediaCacheStoreConfig3WithHttpInfo
     *
     * Updates the specified MediaCache Store configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $storeName  (required)
     * @param MediaCacheStoreConfig3 $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putMediaCacheStoreConfig3WithHttpInfo($serverName, $storeName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putMediaCacheStoreConfig3');
        }

        // verify the required parameter 'storeName' is set
        if ($storeName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $storeName when calling putMediaCacheStoreConfig3');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putMediaCacheStoreConfig3');
        }

        // parse inputs
        $resourcePath = "/v3/servers/{serverName}/mediacache/stores/{storeName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($storeName !== null) {
            $resourcePath = str_replace(
                "{" . "storeName" . "}",
                $this->apiClient->getSerializer()->toPathValue($storeName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putMediaCacheStoreConfigAdv
     *
     * Updates the specified advanced MediaCache Store configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $storeName  (required)
     * @param MediaCacheStoreConfigAdv $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putMediaCacheStoreConfigAdv($serverName, $storeName, $body)
    {
        list($response) = $this->putMediaCacheStoreConfigAdvWithHttpInfo($serverName, $storeName, $body);
        return $response;
    }


    /**
     * Operation putMediaCacheStoreConfigAdvWithHttpInfo
     *
     * Updates the specified advanced MediaCache Store configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $storeName  (required)
     * @param MediaCacheStoreConfigAdv $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putMediaCacheStoreConfigAdvWithHttpInfo($serverName, $storeName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putMediaCacheStoreConfigAdv');
        }

        // verify the required parameter 'storeName' is set
        if ($storeName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $storeName when calling putMediaCacheStoreConfigAdv');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putMediaCacheStoreConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/mediacache/stores/{storeName}/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($storeName !== null) {
            $resourcePath = str_replace(
                "{" . "storeName" . "}",
                $this->apiClient->getSerializer()->toPathValue($storeName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
}
