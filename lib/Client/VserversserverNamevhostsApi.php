<?php
/**
 * VserversserverNamevhostsApi
 * PHP version 5
 *
 * @category Class
 * @package  WowzaApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Topix\Hackademy\WowzaApi\Client;

use Topix\Hackademy\WowzaApi\Configuration;
use Topix\Hackademy\WowzaApi\ApiClient;
use Topix\Hackademy\WowzaApi\ApiException;
use Topix\Hackademy\WowzaApi\Model\CurrentVHostStatistics;
use Topix\Hackademy\WowzaApi\Model\HistoricVHostStatistics;
use Topix\Hackademy\WowzaApi\Model\HostPortConfig;
use Topix\Hackademy\WowzaApi\Model\HostPortConfigAdv;
use Topix\Hackademy\WowzaApi\Model\HostPortsConfig;
use Topix\Hackademy\WowzaApi\Model\HostportsTuneConfig;
use Topix\Hackademy\WowzaApi\Model\MediaCacheStoreList;
use Topix\Hackademy\WowzaApi\Model\PublishersVhostConfig;
use Topix\Hackademy\WowzaApi\Model\PublisherVhostConfig;
use Topix\Hackademy\WowzaApi\Model\SDPFilesConfig;
use Topix\Hackademy\WowzaApi\Model\SMILFileConfig;
use Topix\Hackademy\WowzaApi\Model\SMILFilesConfig;
use Topix\Hackademy\WowzaApi\Model\SSLConfig;
use Topix\Hackademy\WowzaApi\Model\StartupStreamConfig;
use Topix\Hackademy\WowzaApi\Model\StartupStreamsConfig;
use Topix\Hackademy\WowzaApi\Model\StreamFileConfig;
use Topix\Hackademy\WowzaApi\Model\StreamFileConfigAdv;
use Topix\Hackademy\WowzaApi\Model\StreamFilesConfig;
use Topix\Hackademy\WowzaApi\Model\TranscoderConfig;
use Topix\Hackademy\WowzaApi\Model\TranscoderEncodeConfig;
use Topix\Hackademy\WowzaApi\Model\TranscoderEncodeConfigAdv;
use Topix\Hackademy\WowzaApi\Model\TranscoderEncodesConfig;
use Topix\Hackademy\WowzaApi\Model\TranscoderOverlayDecodeConfig;
use Topix\Hackademy\WowzaApi\Model\TranscoderOverlayEncodeConfig;
use Topix\Hackademy\WowzaApi\Model\TranscoderStreamNameGroupConfig;
use Topix\Hackademy\WowzaApi\Model\TranscoderStreamNameGroupsConfig;
use Topix\Hackademy\WowzaApi\Model\TranscoderTemplateConfig;
use Topix\Hackademy\WowzaApi\Model\TranscoderTemplateConfigAdv;
use Topix\Hackademy\WowzaApi\Model\TranscoderTemplatesConfig;
use Topix\Hackademy\WowzaApi\Model\VHostConfig;
use Topix\Hackademy\WowzaApi\Model\VHostConfigAdv;
use Topix\Hackademy\WowzaApi\Model\VHostsConfig;
use Topix\Hackademy\WowzaApi\Model\VHostTuneConfig;
use Topix\Hackademy\WowzaApi\ObjectSerializer;

/**
 * VserversserverNamevhostsApi Class Doc Comment
 *
 * @category Class
 * @package  WowzaApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VserversserverNamevhostsApi extends SwaggerApi
{

    /**
     * Operation deletePublisherVhostConfig
     *
     * Deletes the specified Publisher configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     * @param string $publisherName The publisher name (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function deletePublisherVhostConfig($serverName, $vhostName, $publisherName)
    {
        list($response) = $this->deletePublisherVhostConfigWithHttpInfo($serverName, $vhostName, $publisherName);
        return $response;
    }


    /**
     * Operation deletePublisherVhostConfigWithHttpInfo
     *
     * Deletes the specified Publisher configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     * @param string $publisherName The publisher name (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function deletePublisherVhostConfigWithHttpInfo($serverName, $vhostName, $publisherName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling deletePublisherVhostConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling deletePublisherVhostConfig');
        }

        // verify the required parameter 'publisherName' is set
        if ($publisherName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $publisherName when calling deletePublisherVhostConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/publishers/{publisherName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($publisherName !== null) {
            $resourcePath = str_replace(
                "{" . "publisherName" . "}",
                $this->apiClient->getSerializer()->toPathValue($publisherName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation deleteSDPFileConfig
     *
     * Deletes the specified SDP file.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $sdpfileName The SDP file name without the extension (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function deleteSDPFileConfig($serverName, $vhostName, $sdpfileName)
    {
        list($response) = $this->deleteSDPFileConfigWithHttpInfo($serverName, $vhostName, $sdpfileName);
        return $response;
    }


    /**
     * Operation deleteSDPFileConfigWithHttpInfo
     *
     * Deletes the specified SDP file.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $sdpfileName The SDP file name without the extension (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function deleteSDPFileConfigWithHttpInfo($serverName, $vhostName, $sdpfileName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling deleteSDPFileConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling deleteSDPFileConfig');
        }

        // verify the required parameter 'sdpfileName' is set
        if ($sdpfileName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sdpfileName when calling deleteSDPFileConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/sdpfiles/{sdpfileName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($sdpfileName !== null) {
            $resourcePath = str_replace(
                "{" . "sdpfileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($sdpfileName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation deleteSMILFileConfig
     *
     * Deletes the specified SMIL File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $smilfileName The SMIL file name without the extension (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function deleteSMILFileConfig($serverName, $vhostName, $smilfileName)
    {
        list($response) = $this->deleteSMILFileConfigWithHttpInfo($serverName, $vhostName, $smilfileName);
        return $response;
    }


    /**
     * Operation deleteSMILFileConfigWithHttpInfo
     *
     * Deletes the specified SMIL File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $smilfileName The SMIL file name without the extension (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function deleteSMILFileConfigWithHttpInfo($serverName, $vhostName, $smilfileName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling deleteSMILFileConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling deleteSMILFileConfig');
        }

        // verify the required parameter 'smilfileName' is set
        if ($smilfileName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $smilfileName when calling deleteSMILFileConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/smilfiles/{smilfileName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($smilfileName !== null) {
            $resourcePath = str_replace(
                "{" . "smilfileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($smilfileName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation deleteStartupStreamConfig
     *
     * Deletes the specified Startup Stream configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $streamName  (required)
     * @param string $appName  (required)
     * @param string $instanceName  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function deleteStartupStreamConfig($serverName, $vhostName, $streamName, $appName, $instanceName)
    {
        list($response) = $this->deleteStartupStreamConfigWithHttpInfo($serverName, $vhostName, $streamName, $appName, $instanceName);
        return $response;
    }


    /**
     * Operation deleteStartupStreamConfigWithHttpInfo
     *
     * Deletes the specified Startup Stream configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $streamName  (required)
     * @param string $appName  (required)
     * @param string $instanceName  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function deleteStartupStreamConfigWithHttpInfo($serverName, $vhostName, $streamName, $appName, $instanceName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling deleteStartupStreamConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling deleteStartupStreamConfig');
        }

        // verify the required parameter 'streamName' is set
        if ($streamName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $streamName when calling deleteStartupStreamConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling deleteStartupStreamConfig');
        }

        // verify the required parameter 'instanceName' is set
        if ($instanceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instanceName when calling deleteStartupStreamConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/startupstreams/applications/{appName}/instances/{instanceName}/streams/{streamName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($streamName !== null) {
            $resourcePath = str_replace(
                "{" . "streamName" . "}",
                $this->apiClient->getSerializer()->toPathValue($streamName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($instanceName !== null) {
            $resourcePath = str_replace(
                "{" . "instanceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($instanceName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation deleteStreamFileConfig
     *
     * Deletes the specified Stream File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $streamfileName The stream file name without the extension (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function deleteStreamFileConfig($serverName, $vhostName, $streamfileName)
    {
        list($response) = $this->deleteStreamFileConfigWithHttpInfo($serverName, $vhostName, $streamfileName);
        return $response;
    }


    /**
     * Operation deleteStreamFileConfigWithHttpInfo
     *
     * Deletes the specified Stream File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $streamfileName The stream file name without the extension (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function deleteStreamFileConfigWithHttpInfo($serverName, $vhostName, $streamfileName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling deleteStreamFileConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling deleteStreamFileConfig');
        }

        // verify the required parameter 'streamfileName' is set
        if ($streamfileName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $streamfileName when calling deleteStreamFileConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/streamfiles/{streamfileName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($streamfileName !== null) {
            $resourcePath = str_replace(
                "{" . "streamfileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($streamfileName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation deleteTranscoderEncodeConfig
     *
     * Deletes the specified Trancoder Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $encodeName  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function deleteTranscoderEncodeConfig($serverName, $vhostName, $templateName, $encodeName)
    {
        list($response) = $this->deleteTranscoderEncodeConfigWithHttpInfo($serverName, $vhostName, $templateName, $encodeName);
        return $response;
    }


    /**
     * Operation deleteTranscoderEncodeConfigWithHttpInfo
     *
     * Deletes the specified Trancoder Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $encodeName  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function deleteTranscoderEncodeConfigWithHttpInfo($serverName, $vhostName, $templateName, $encodeName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling deleteTranscoderEncodeConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling deleteTranscoderEncodeConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling deleteTranscoderEncodeConfig');
        }

        // verify the required parameter 'encodeName' is set
        if ($encodeName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $encodeName when calling deleteTranscoderEncodeConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/transcoder/templates/{templateName}/encodes/{encodeName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($encodeName !== null) {
            $resourcePath = str_replace(
                "{" . "encodeName" . "}",
                $this->apiClient->getSerializer()->toPathValue($encodeName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation deleteTranscoderOverlayDecodeConfig
     *
     * Deletes the specified Trancoder Overlay Decode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $overlayName  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function deleteTranscoderOverlayDecodeConfig($serverName, $vhostName, $templateName, $overlayName)
    {
        list($response) = $this->deleteTranscoderOverlayDecodeConfigWithHttpInfo($serverName, $vhostName, $templateName, $overlayName);
        return $response;
    }


    /**
     * Operation deleteTranscoderOverlayDecodeConfigWithHttpInfo
     *
     * Deletes the specified Trancoder Overlay Decode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $overlayName  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function deleteTranscoderOverlayDecodeConfigWithHttpInfo($serverName, $vhostName, $templateName, $overlayName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling deleteTranscoderOverlayDecodeConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling deleteTranscoderOverlayDecodeConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling deleteTranscoderOverlayDecodeConfig');
        }

        // verify the required parameter 'overlayName' is set
        if ($overlayName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $overlayName when calling deleteTranscoderOverlayDecodeConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/transcoder/templates/{templateName}/decode/overlays/{overlayName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($overlayName !== null) {
            $resourcePath = str_replace(
                "{" . "overlayName" . "}",
                $this->apiClient->getSerializer()->toPathValue($overlayName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation deleteTranscoderOverlayEncodeConfig
     *
     * Deletes the specified Trancoder Overlay Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $overlayName  (required)
     * @param string $encodeName  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function deleteTranscoderOverlayEncodeConfig($serverName, $vhostName, $templateName, $overlayName, $encodeName)
    {
        list($response) = $this->deleteTranscoderOverlayEncodeConfigWithHttpInfo($serverName, $vhostName, $templateName, $overlayName, $encodeName);
        return $response;
    }


    /**
     * Operation deleteTranscoderOverlayEncodeConfigWithHttpInfo
     *
     * Deletes the specified Trancoder Overlay Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $overlayName  (required)
     * @param string $encodeName  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function deleteTranscoderOverlayEncodeConfigWithHttpInfo($serverName, $vhostName, $templateName, $overlayName, $encodeName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling deleteTranscoderOverlayEncodeConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling deleteTranscoderOverlayEncodeConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling deleteTranscoderOverlayEncodeConfig');
        }

        // verify the required parameter 'overlayName' is set
        if ($overlayName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $overlayName when calling deleteTranscoderOverlayEncodeConfig');
        }

        // verify the required parameter 'encodeName' is set
        if ($encodeName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $encodeName when calling deleteTranscoderOverlayEncodeConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/transcoder/templates/{templateName}/encodes/{encodeName}/overlays/{overlayName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($overlayName !== null) {
            $resourcePath = str_replace(
                "{" . "overlayName" . "}",
                $this->apiClient->getSerializer()->toPathValue($overlayName),
                $resourcePath
            );
        }// path params
        if ($encodeName !== null) {
            $resourcePath = str_replace(
                "{" . "encodeName" . "}",
                $this->apiClient->getSerializer()->toPathValue($encodeName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation deleteTranscoderStreamNameGroupConfig
     *
     * Deletes the specified Trancoder StreamNameGroup configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $groupName  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function deleteTranscoderStreamNameGroupConfig($serverName, $vhostName, $templateName, $groupName)
    {
        list($response) = $this->deleteTranscoderStreamNameGroupConfigWithHttpInfo($serverName, $vhostName, $templateName, $groupName);
        return $response;
    }


    /**
     * Operation deleteTranscoderStreamNameGroupConfigWithHttpInfo
     *
     * Deletes the specified Trancoder StreamNameGroup configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $groupName  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function deleteTranscoderStreamNameGroupConfigWithHttpInfo($serverName, $vhostName, $templateName, $groupName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling deleteTranscoderStreamNameGroupConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling deleteTranscoderStreamNameGroupConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling deleteTranscoderStreamNameGroupConfig');
        }

        // verify the required parameter 'groupName' is set
        if ($groupName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $groupName when calling deleteTranscoderStreamNameGroupConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/transcoder/templates/{templateName}/streamnamegroups/{groupName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($groupName !== null) {
            $resourcePath = str_replace(
                "{" . "groupName" . "}",
                $this->apiClient->getSerializer()->toPathValue($groupName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation deleteTranscoderTemplateConfig
     *
     * Deletes the specified Trancoder Template configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function deleteTranscoderTemplateConfig($serverName, $vhostName, $templateName)
    {
        list($response) = $this->deleteTranscoderTemplateConfigWithHttpInfo($serverName, $vhostName, $templateName);
        return $response;
    }


    /**
     * Operation deleteTranscoderTemplateConfigWithHttpInfo
     *
     * Deletes the specified Trancoder Template configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function deleteTranscoderTemplateConfigWithHttpInfo($serverName, $vhostName, $templateName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling deleteTranscoderTemplateConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling deleteTranscoderTemplateConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling deleteTranscoderTemplateConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/transcoder/templates/{templateName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation getCurrentVHostStatistics
     *
     * Retrieves the current VHost statistics.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     *
     * @return  CurrentVHostStatistics
     * @throws ApiException on non-2xx response
     */
    public function getCurrentVHostStatistics($serverName, $vhostName)
    {
        list($response) = $this->getCurrentVHostStatisticsWithHttpInfo($serverName, $vhostName);
        return $response;
    }


    /**
     * Operation getCurrentVHostStatisticsWithHttpInfo
     *
     * Retrieves the current VHost statistics.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     *
     * @return Array of \Model\CurrentVHostStatistics, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getCurrentVHostStatisticsWithHttpInfo($serverName, $vhostName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getCurrentVHostStatistics');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getCurrentVHostStatistics');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/monitoring/current";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                CurrentVHostStatistics::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, CurrentVHostStatistics::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), CurrentVHostStatistics::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getHistoricVHostStatistics
     *
     * Retrieves the historic VHost statistics.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     *
     * @return  HistoricVHostStatistics
     * @throws ApiException on non-2xx response
     */
    public function getHistoricVHostStatistics($serverName, $vhostName)
    {
        list($response) = $this->getHistoricVHostStatisticsWithHttpInfo($serverName, $vhostName);
        return $response;
    }


    /**
     * Operation getHistoricVHostStatisticsWithHttpInfo
     *
     * Retrieves the historic VHost statistics.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     *
     * @return Array of \Model\HistoricVHostStatistics, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getHistoricVHostStatisticsWithHttpInfo($serverName, $vhostName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getHistoricVHostStatistics');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getHistoricVHostStatistics');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/monitoring/historic";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                HistoricVHostStatistics::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, HistoricVHostStatistics::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), HistoricVHostStatistics::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getHostPortConfig
     *
     * Retrieves the HostPort for the specifed vhost and port.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $portname The port name (required)
     *
     * @return  HostPortConfig
     * @throws ApiException on non-2xx response
     */
    public function getHostPortConfig($serverName, $vhostName, $portname)
    {
        list($response) = $this->getHostPortConfigWithHttpInfo($serverName, $vhostName, $portname);
        return $response;
    }


    /**
     * Operation getHostPortConfigWithHttpInfo
     *
     * Retrieves the HostPort for the specifed vhost and port.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $portname The port name (required)
     *
     * @return Array of \Model\HostPortConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getHostPortConfigWithHttpInfo($serverName, $vhostName, $portname)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getHostPortConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getHostPortConfig');
        }

        // verify the required parameter 'portname' is set
        if ($portname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $portname when calling getHostPortConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/hostports/{portname}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($portname !== null) {
            $resourcePath = str_replace(
                "{" . "portname" . "}",
                $this->apiClient->getSerializer()->toPathValue($portname),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                HostPortConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, HostPortConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), HostPortConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getHostPortConfigAdv
     *
     * Retrieves the advanced HostPort configuration for the specified vhost and port.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $portname The port name (required)
     *
     * @return  HostPortConfigAdv
     * @throws ApiException on non-2xx response
     */
    public function getHostPortConfigAdv($serverName, $vhostName, $portname)
    {
        list($response) = $this->getHostPortConfigAdvWithHttpInfo($serverName, $vhostName, $portname);
        return $response;
    }


    /**
     * Operation getHostPortConfigAdvWithHttpInfo
     *
     * Retrieves the advanced HostPort configuration for the specified vhost and port.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $portname The port name (required)
     *
     * @return Array of \Model\HostPortConfigAdv, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getHostPortConfigAdvWithHttpInfo($serverName, $vhostName, $portname)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getHostPortConfigAdv');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getHostPortConfigAdv');
        }

        // verify the required parameter 'portname' is set
        if ($portname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $portname when calling getHostPortConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/hostports/{portname}/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($portname !== null) {
            $resourcePath = str_replace(
                "{" . "portname" . "}",
                $this->apiClient->getSerializer()->toPathValue($portname),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                HostPortConfigAdv::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, HostPortConfigAdv::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), HostPortConfigAdv::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getHostPortsConfig
     *
     * Retrieves the list of server HostPorts for the specified vhost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     *
     * @return  HostPortsConfig
     * @throws ApiException on non-2xx response
     */
    public function getHostPortsConfig($serverName, $vhostName)
    {
        list($response) = $this->getHostPortsConfigWithHttpInfo($serverName, $vhostName);
        return $response;
    }


    /**
     * Operation getHostPortsConfigWithHttpInfo
     *
     * Retrieves the list of server HostPorts for the specified vhost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     *
     * @return Array of \Model\HostPortsConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getHostPortsConfigWithHttpInfo($serverName, $vhostName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getHostPortsConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getHostPortsConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/hostports";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                HostPortsConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, HostPortsConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), HostPortsConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getHostportsTuneConfig
     *
     * Retrieves the host port configuration used for server tuning for the specified vhost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     *
     * @return  HostportsTuneConfig
     * @throws ApiException on non-2xx response
     */
    public function getHostportsTuneConfig($serverName, $vhostName)
    {
        list($response) = $this->getHostportsTuneConfigWithHttpInfo($serverName, $vhostName);
        return $response;
    }


    /**
     * Operation getHostportsTuneConfigWithHttpInfo
     *
     * Retrieves the host port configuration used for server tuning for the specified vhost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     *
     * @return Array of \Model\HostportsTuneConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getHostportsTuneConfigWithHttpInfo($serverName, $vhostName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getHostportsTuneConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getHostportsTuneConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/tunehostports";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                HostportsTuneConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, HostportsTuneConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), HostportsTuneConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getMediaCacheStoreList
     *
     * Retrieves all entries in the MediaCache system.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     *
     * @return  MediaCacheStoreList
     * @throws ApiException on non-2xx response
     */
    public function getMediaCacheStoreList($serverName, $vhostName)
    {
        list($response) = $this->getMediaCacheStoreListWithHttpInfo($serverName, $vhostName);
        return $response;
    }


    /**
     * Operation getMediaCacheStoreListWithHttpInfo
     *
     * Retrieves all entries in the MediaCache system.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     *
     * @return Array of \Model\MediaCacheStoreList, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getMediaCacheStoreListWithHttpInfo($serverName, $vhostName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getMediaCacheStoreList');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getMediaCacheStoreList');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/mediacache/stores";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                MediaCacheStoreList::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, MediaCacheStoreList::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), MediaCacheStoreList::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getPublisherVhostConfig
     *
     * Retrieves the specified Publisher configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     * @param string $publisherName The publisher name (required)
     *
     * @return  PublisherVhostConfig
     * @throws ApiException on non-2xx response
     */
    public function getPublisherVhostConfig($serverName, $vhostName, $publisherName)
    {
        list($response) = $this->getPublisherVhostConfigWithHttpInfo($serverName, $vhostName, $publisherName);
        return $response;
    }


    /**
     * Operation getPublisherVhostConfigWithHttpInfo
     *
     * Retrieves the specified Publisher configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     * @param string $publisherName The publisher name (required)
     *
     * @return Array of \Model\PublisherVhostConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getPublisherVhostConfigWithHttpInfo($serverName, $vhostName, $publisherName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getPublisherVhostConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getPublisherVhostConfig');
        }

        // verify the required parameter 'publisherName' is set
        if ($publisherName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $publisherName when calling getPublisherVhostConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/publishers/{publisherName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($publisherName !== null) {
            $resourcePath = str_replace(
                "{" . "publisherName" . "}",
                $this->apiClient->getSerializer()->toPathValue($publisherName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                PublisherVhostConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, PublisherVhostConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), PublisherVhostConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getPublishersVhostConfig
     *
     * Retrieves the list of Publishers for the specified VHost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     *
     * @return  PublishersVhostConfig
     * @throws ApiException on non-2xx response
     */
    public function getPublishersVhostConfig($serverName, $vhostName)
    {
        list($response) = $this->getPublishersVhostConfigWithHttpInfo($serverName, $vhostName);
        return $response;
    }


    /**
     * Operation getPublishersVhostConfigWithHttpInfo
     *
     * Retrieves the list of Publishers for the specified VHost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     *
     * @return Array of \Model\PublishersVhostConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getPublishersVhostConfigWithHttpInfo($serverName, $vhostName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getPublishersVhostConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getPublishersVhostConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/publishers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                PublishersVhostConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, PublishersVhostConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), PublishersVhostConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getSDPFilesConfig
     *
     * Retrieves the list of SDP Files for the specified VHost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     *
     * @return  SDPFilesConfig
     * @throws ApiException on non-2xx response
     */
    public function getSDPFilesConfig($serverName, $vhostName)
    {
        list($response) = $this->getSDPFilesConfigWithHttpInfo($serverName, $vhostName);
        return $response;
    }


    /**
     * Operation getSDPFilesConfigWithHttpInfo
     *
     * Retrieves the list of SDP Files for the specified VHost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     *
     * @return Array of \Model\SDPFilesConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getSDPFilesConfigWithHttpInfo($serverName, $vhostName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getSDPFilesConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getSDPFilesConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/sdpfiles";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                SDPFilesConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, SDPFilesConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), SDPFilesConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getSMILFileConfig
     *
     * Retrieves the specified SMIL File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $smilfileName The SMIL file name without the extension (required)
     *
     * @return  SMILFileConfig
     * @throws ApiException on non-2xx response
     */
    public function getSMILFileConfig($serverName, $vhostName, $smilfileName)
    {
        list($response) = $this->getSMILFileConfigWithHttpInfo($serverName, $vhostName, $smilfileName);
        return $response;
    }


    /**
     * Operation getSMILFileConfigWithHttpInfo
     *
     * Retrieves the specified SMIL File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $smilfileName The SMIL file name without the extension (required)
     *
     * @return Array of \Model\SMILFileConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getSMILFileConfigWithHttpInfo($serverName, $vhostName, $smilfileName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getSMILFileConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getSMILFileConfig');
        }

        // verify the required parameter 'smilfileName' is set
        if ($smilfileName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $smilfileName when calling getSMILFileConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/smilfiles/{smilfileName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($smilfileName !== null) {
            $resourcePath = str_replace(
                "{" . "smilfileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($smilfileName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                SMILFileConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, SMILFileConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), SMILFileConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getSMILFilesConfig
     *
     * Retrieves the list of SMIL Files for the specified VHost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     *
     * @return  SMILFilesConfig
     * @throws ApiException on non-2xx response
     */
    public function getSMILFilesConfig($serverName, $vhostName)
    {
        list($response) = $this->getSMILFilesConfigWithHttpInfo($serverName, $vhostName);
        return $response;
    }


    /**
     * Operation getSMILFilesConfigWithHttpInfo
     *
     * Retrieves the list of SMIL Files for the specified VHost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     *
     * @return Array of \Model\SMILFilesConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getSMILFilesConfigWithHttpInfo($serverName, $vhostName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getSMILFilesConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getSMILFilesConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/smilfiles";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                SMILFilesConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, SMILFilesConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), SMILFilesConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getSSLConfig
     *
     * Retrieves the SSL configuration for the specified vhost and port.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $portname The port name (required)
     *
     * @return  SSLConfig
     * @throws ApiException on non-2xx response
     */
    public function getSSLConfig($serverName, $vhostName, $portname)
    {
        list($response) = $this->getSSLConfigWithHttpInfo($serverName, $vhostName, $portname);
        return $response;
    }


    /**
     * Operation getSSLConfigWithHttpInfo
     *
     * Retrieves the SSL configuration for the specified vhost and port.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $portname The port name (required)
     *
     * @return Array of \Model\SSLConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getSSLConfigWithHttpInfo($serverName, $vhostName, $portname)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getSSLConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getSSLConfig');
        }

        // verify the required parameter 'portname' is set
        if ($portname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $portname when calling getSSLConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/hostports/{portname}/ssl";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($portname !== null) {
            $resourcePath = str_replace(
                "{" . "portname" . "}",
                $this->apiClient->getSerializer()->toPathValue($portname),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                SSLConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, SSLConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), SSLConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getStartupStreamConfig
     *
     * Retrieves the specified Startup Stream configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $streamName  (required)
     * @param string $appName  (required)
     * @param string $instanceName  (required)
     *
     * @return  StartupStreamConfig
     * @throws ApiException on non-2xx response
     */
    public function getStartupStreamConfig($serverName, $vhostName, $streamName, $appName, $instanceName)
    {
        list($response) = $this->getStartupStreamConfigWithHttpInfo($serverName, $vhostName, $streamName, $appName, $instanceName);
        return $response;
    }


    /**
     * Operation getStartupStreamConfigWithHttpInfo
     *
     * Retrieves the specified Startup Stream configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $streamName  (required)
     * @param string $appName  (required)
     * @param string $instanceName  (required)
     *
     * @return Array of \Model\StartupStreamConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getStartupStreamConfigWithHttpInfo($serverName, $vhostName, $streamName, $appName, $instanceName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getStartupStreamConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getStartupStreamConfig');
        }

        // verify the required parameter 'streamName' is set
        if ($streamName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $streamName when calling getStartupStreamConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getStartupStreamConfig');
        }

        // verify the required parameter 'instanceName' is set
        if ($instanceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instanceName when calling getStartupStreamConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/startupstreams/applications/{appName}/instances/{instanceName}/streams/{streamName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($streamName !== null) {
            $resourcePath = str_replace(
                "{" . "streamName" . "}",
                $this->apiClient->getSerializer()->toPathValue($streamName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($instanceName !== null) {
            $resourcePath = str_replace(
                "{" . "instanceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($instanceName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                StartupStreamConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, StartupStreamConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), StartupStreamConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getStartupStreamsConfig
     *
     * Retrieves the list of Startup Streams for the specified VHost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     *
     * @return  StartupStreamsConfig
     * @throws ApiException on non-2xx response
     */
    public function getStartupStreamsConfig($serverName, $vhostName)
    {
        list($response) = $this->getStartupStreamsConfigWithHttpInfo($serverName, $vhostName);
        return $response;
    }


    /**
     * Operation getStartupStreamsConfigWithHttpInfo
     *
     * Retrieves the list of Startup Streams for the specified VHost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     *
     * @return Array of \Model\StartupStreamsConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getStartupStreamsConfigWithHttpInfo($serverName, $vhostName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getStartupStreamsConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getStartupStreamsConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/startupstreams";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                StartupStreamsConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, StartupStreamsConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), StartupStreamsConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getStreamFileConfig
     *
     * Retrieves the specified Stream File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $streamfileName The stream file name without the extension (required)
     *
     * @return  StreamFileConfig
     * @throws ApiException on non-2xx response
     */
    public function getStreamFileConfig($serverName, $vhostName, $streamfileName)
    {
        list($response) = $this->getStreamFileConfigWithHttpInfo($serverName, $vhostName, $streamfileName);
        return $response;
    }


    /**
     * Operation getStreamFileConfigWithHttpInfo
     *
     * Retrieves the specified Stream File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $streamfileName The stream file name without the extension (required)
     *
     * @return Array of \Model\StreamFileConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getStreamFileConfigWithHttpInfo($serverName, $vhostName, $streamfileName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getStreamFileConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getStreamFileConfig');
        }

        // verify the required parameter 'streamfileName' is set
        if ($streamfileName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $streamfileName when calling getStreamFileConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/streamfiles/{streamfileName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($streamfileName !== null) {
            $resourcePath = str_replace(
                "{" . "streamfileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($streamfileName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                StreamFileConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, StreamFileConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), StreamFileConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getStreamFileConfigAdv
     *
     * Retrieves the Advanced Stream File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $streamfileName The stream file name without the .stream extension (required)
     *
     * @return  StreamFileConfigAdv
     * @throws ApiException on non-2xx response
     */
    public function getStreamFileConfigAdv($serverName, $vhostName, $streamfileName)
    {
        list($response) = $this->getStreamFileConfigAdvWithHttpInfo($serverName, $vhostName, $streamfileName);
        return $response;
    }


    /**
     * Operation getStreamFileConfigAdvWithHttpInfo
     *
     * Retrieves the Advanced Stream File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $streamfileName The stream file name without the .stream extension (required)
     *
     * @return Array of \Model\StreamFileConfigAdv, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getStreamFileConfigAdvWithHttpInfo($serverName, $vhostName, $streamfileName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getStreamFileConfigAdv');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getStreamFileConfigAdv');
        }

        // verify the required parameter 'streamfileName' is set
        if ($streamfileName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $streamfileName when calling getStreamFileConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/streamfiles/{streamfileName}/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($streamfileName !== null) {
            $resourcePath = str_replace(
                "{" . "streamfileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($streamfileName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                StreamFileConfigAdv::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, StreamFileConfigAdv::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), StreamFileConfigAdv::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getStreamFilesConfig
     *
     * Retrieves the list of Stream Files for the specified VHost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     *
     * @return  StreamFilesConfig
     * @throws ApiException on non-2xx response
     */
    public function getStreamFilesConfig($serverName, $vhostName)
    {
        list($response) = $this->getStreamFilesConfigWithHttpInfo($serverName, $vhostName);
        return $response;
    }


    /**
     * Operation getStreamFilesConfigWithHttpInfo
     *
     * Retrieves the list of Stream Files for the specified VHost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     *
     * @return Array of \Model\StreamFilesConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getStreamFilesConfigWithHttpInfo($serverName, $vhostName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getStreamFilesConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getStreamFilesConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/streamfiles";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                StreamFilesConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, StreamFilesConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), StreamFilesConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getTranscoderConfig
     *
     * Retrieves the Transcoder configuration for the specified VHost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     *
     * @return  TranscoderConfig
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderConfig($serverName, $vhostName)
    {
        list($response) = $this->getTranscoderConfigWithHttpInfo($serverName, $vhostName);
        return $response;
    }


    /**
     * Operation getTranscoderConfigWithHttpInfo
     *
     * Retrieves the Transcoder configuration for the specified VHost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     *
     * @return Array of \Model\TranscoderConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderConfigWithHttpInfo($serverName, $vhostName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getTranscoderConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getTranscoderConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/transcoder";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                TranscoderConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, TranscoderConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), TranscoderConfig, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getTranscoderEncodeConfig
     *
     * Retrieves the specified Trancoder Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $encodeName  (required)
     *
     * @return  TranscoderEncodeConfig
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderEncodeConfig($serverName, $vhostName, $templateName, $encodeName)
    {
        list($response) = $this->getTranscoderEncodeConfigWithHttpInfo($serverName, $vhostName, $templateName, $encodeName);
        return $response;
    }


    /**
     * Operation getTranscoderEncodeConfigWithHttpInfo
     *
     * Retrieves the specified Trancoder Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $encodeName  (required)
     *
     * @return Array of \Model\TranscoderEncodeConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderEncodeConfigWithHttpInfo($serverName, $vhostName, $templateName, $encodeName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getTranscoderEncodeConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getTranscoderEncodeConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling getTranscoderEncodeConfig');
        }

        // verify the required parameter 'encodeName' is set
        if ($encodeName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $encodeName when calling getTranscoderEncodeConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/transcoder/templates/{templateName}/encodes/{encodeName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($encodeName !== null) {
            $resourcePath = str_replace(
                "{" . "encodeName" . "}",
                $this->apiClient->getSerializer()->toPathValue($encodeName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                TranscoderEncodeConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, TranscoderEncodeConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), TranscoderEncodeConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getTranscoderEncodeConfigAdv
     *
     * Retrieves the Advanced Transcoder Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $encodeName  (required)
     *
     * @return  TranscoderEncodeConfigAdv
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderEncodeConfigAdv($serverName, $vhostName, $templateName, $encodeName)
    {
        list($response) = $this->getTranscoderEncodeConfigAdvWithHttpInfo($serverName, $vhostName, $templateName, $encodeName);
        return $response;
    }


    /**
     * Operation getTranscoderEncodeConfigAdvWithHttpInfo
     *
     * Retrieves the Advanced Transcoder Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $encodeName  (required)
     *
     * @return Array of \Model\TranscoderEncodeConfigAdv, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderEncodeConfigAdvWithHttpInfo($serverName, $vhostName, $templateName, $encodeName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getTranscoderEncodeConfigAdv');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getTranscoderEncodeConfigAdv');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling getTranscoderEncodeConfigAdv');
        }

        // verify the required parameter 'encodeName' is set
        if ($encodeName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $encodeName when calling getTranscoderEncodeConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/transcoder/templates/{templateName}/encodes/{encodeName}/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($encodeName !== null) {
            $resourcePath = str_replace(
                "{" . "encodeName" . "}",
                $this->apiClient->getSerializer()->toPathValue($encodeName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                TranscoderEncodeConfigAdv::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, TranscoderEncodeConfigAdv::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), TranscoderEncodeConfigAdv::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getTranscoderEncodesConfig
     *
     * Retrieves the list of Transcoder Encode Configurations for the specified VHost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     *
     * @return  TranscoderEncodesConfig
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderEncodesConfig($serverName, $vhostName, $templateName)
    {
        list($response) = $this->getTranscoderEncodesConfigWithHttpInfo($serverName, $vhostName, $templateName);
        return $response;
    }


    /**
     * Operation getTranscoderEncodesConfigWithHttpInfo
     *
     * Retrieves the list of Transcoder Encode Configurations for the specified VHost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     *
     * @return Array of \Model\TranscoderEncodesConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderEncodesConfigWithHttpInfo($serverName, $vhostName, $templateName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getTranscoderEncodesConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getTranscoderEncodesConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling getTranscoderEncodesConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/transcoder/templates/{templateName}/encodes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                TranscoderEncodesConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, TranscoderEncodesConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), TranscoderEncodesConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getTranscoderOverlayDecodeConfig
     *
     * Retrieves the specified Trancoder Overlay Decode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $overlayName  (required)
     *
     * @return  TranscoderOverlayDecodeConfig
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderOverlayDecodeConfig($serverName, $vhostName, $templateName, $overlayName)
    {
        list($response) = $this->getTranscoderOverlayDecodeConfigWithHttpInfo($serverName, $vhostName, $templateName, $overlayName);
        return $response;
    }


    /**
     * Operation getTranscoderOverlayDecodeConfigWithHttpInfo
     *
     * Retrieves the specified Trancoder Overlay Decode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $overlayName  (required)
     *
     * @return Array of \Model\TranscoderOverlayDecodeConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderOverlayDecodeConfigWithHttpInfo($serverName, $vhostName, $templateName, $overlayName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getTranscoderOverlayDecodeConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getTranscoderOverlayDecodeConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling getTranscoderOverlayDecodeConfig');
        }

        // verify the required parameter 'overlayName' is set
        if ($overlayName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $overlayName when calling getTranscoderOverlayDecodeConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/transcoder/templates/{templateName}/decode/overlays/{overlayName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($overlayName !== null) {
            $resourcePath = str_replace(
                "{" . "overlayName" . "}",
                $this->apiClient->getSerializer()->toPathValue($overlayName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                TranscoderOverlayDecodeConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, TranscoderOverlayDecodeConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), TranscoderOverlayDecodeConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getTranscoderOverlayEncodeConfig
     *
     * Retrieves the specified Trancoder Overlay Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $overlayName  (required)
     * @param string $encodeName  (required)
     *
     * @return  TranscoderOverlayEncodeConfig
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderOverlayEncodeConfig($serverName, $vhostName, $templateName, $overlayName, $encodeName)
    {
        list($response) = $this->getTranscoderOverlayEncodeConfigWithHttpInfo($serverName, $vhostName, $templateName, $overlayName, $encodeName);
        return $response;
    }


    /**
     * Operation getTranscoderOverlayEncodeConfigWithHttpInfo
     *
     * Retrieves the specified Trancoder Overlay Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $overlayName  (required)
     * @param string $encodeName  (required)
     *
     * @return Array of \Model\TranscoderOverlayEncodeConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderOverlayEncodeConfigWithHttpInfo($serverName, $vhostName, $templateName, $overlayName, $encodeName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getTranscoderOverlayEncodeConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getTranscoderOverlayEncodeConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling getTranscoderOverlayEncodeConfig');
        }

        // verify the required parameter 'overlayName' is set
        if ($overlayName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $overlayName when calling getTranscoderOverlayEncodeConfig');
        }

        // verify the required parameter 'encodeName' is set
        if ($encodeName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $encodeName when calling getTranscoderOverlayEncodeConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/transcoder/templates/{templateName}/encodes/{encodeName}/overlays/{overlayName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($overlayName !== null) {
            $resourcePath = str_replace(
                "{" . "overlayName" . "}",
                $this->apiClient->getSerializer()->toPathValue($overlayName),
                $resourcePath
            );
        }// path params
        if ($encodeName !== null) {
            $resourcePath = str_replace(
                "{" . "encodeName" . "}",
                $this->apiClient->getSerializer()->toPathValue($encodeName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                TranscoderOverlayEncodeConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, TranscoderOverlayEncodeConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), TranscoderOverlayEncodeConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getTranscoderStreamNameGroupConfig
     *
     * Retrieves the specified Trancoder StreamNameGroup configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $groupName  (required)
     *
     * @return  TranscoderStreamNameGroupConfig
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderStreamNameGroupConfig($serverName, $vhostName, $templateName, $groupName)
    {
        list($response) = $this->getTranscoderStreamNameGroupConfigWithHttpInfo($serverName, $vhostName, $templateName, $groupName);
        return $response;
    }


    /**
     * Operation getTranscoderStreamNameGroupConfigWithHttpInfo
     *
     * Retrieves the specified Trancoder StreamNameGroup configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $groupName  (required)
     *
     * @return Array of \Model\TranscoderStreamNameGroupConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderStreamNameGroupConfigWithHttpInfo($serverName, $vhostName, $templateName, $groupName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getTranscoderStreamNameGroupConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getTranscoderStreamNameGroupConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling getTranscoderStreamNameGroupConfig');
        }

        // verify the required parameter 'groupName' is set
        if ($groupName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $groupName when calling getTranscoderStreamNameGroupConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/transcoder/templates/{templateName}/streamnamegroups/{groupName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($groupName !== null) {
            $resourcePath = str_replace(
                "{" . "groupName" . "}",
                $this->apiClient->getSerializer()->toPathValue($groupName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                TranscoderStreamNameGroupConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, TranscoderStreamNameGroupConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), TranscoderStreamNameGroupConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getTranscoderStreamNameGroupsConfig
     *
     * Retrieves the list of Transcoder Stream Name Groups for the specified Template.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     *
     * @return  TranscoderStreamNameGroupsConfig
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderStreamNameGroupsConfig($serverName, $vhostName, $templateName)
    {
        list($response) = $this->getTranscoderStreamNameGroupsConfigWithHttpInfo($serverName, $vhostName, $templateName);
        return $response;
    }


    /**
     * Operation getTranscoderStreamNameGroupsConfigWithHttpInfo
     *
     * Retrieves the list of Transcoder Stream Name Groups for the specified Template.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     *
     * @return Array of \Model\TranscoderStreamNameGroupsConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderStreamNameGroupsConfigWithHttpInfo($serverName, $vhostName, $templateName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getTranscoderStreamNameGroupsConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getTranscoderStreamNameGroupsConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling getTranscoderStreamNameGroupsConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/transcoder/templates/{templateName}/streamnamegroups";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                TranscoderStreamNameGroupsConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, TranscoderStreamNameGroupsConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), TranscoderStreamNameGroupsConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getTranscoderTemplateConfig
     *
     * Retrieves the specified Trancoder Template configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     *
     * @return  TranscoderTemplateConfig
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderTemplateConfig($serverName, $vhostName, $templateName)
    {
        list($response) = $this->getTranscoderTemplateConfigWithHttpInfo($serverName, $vhostName, $templateName);
        return $response;
    }


    /**
     * Operation getTranscoderTemplateConfigWithHttpInfo
     *
     * Retrieves the specified Trancoder Template configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     *
     * @return Array of \Model\TranscoderTemplateConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderTemplateConfigWithHttpInfo($serverName, $vhostName, $templateName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getTranscoderTemplateConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getTranscoderTemplateConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling getTranscoderTemplateConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/transcoder/templates/{templateName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                TranscoderTemplateConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, TranscoderTemplateConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), TranscoderTemplateConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getTranscoderTemplateConfigAdv
     *
     * Retrieves the Advanced Transcoder Template configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     *
     * @return  TranscoderTemplateConfigAdv
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderTemplateConfigAdv($serverName, $vhostName, $templateName)
    {
        list($response) = $this->getTranscoderTemplateConfigAdvWithHttpInfo($serverName, $vhostName, $templateName);
        return $response;
    }


    /**
     * Operation getTranscoderTemplateConfigAdvWithHttpInfo
     *
     * Retrieves the Advanced Transcoder Template configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     *
     * @return Array of \Model\TranscoderTemplateConfigAdv, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderTemplateConfigAdvWithHttpInfo($serverName, $vhostName, $templateName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getTranscoderTemplateConfigAdv');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getTranscoderTemplateConfigAdv');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling getTranscoderTemplateConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/transcoder/templates/{templateName}/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                TranscoderTemplateConfigAdv::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, TranscoderTemplateConfigAdv::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), TranscoderTemplateConfigAdv::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getTranscoderTemplatesConfig
     *
     * Retrieves the list of Transcoder Template Configurations for the specified VHost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     *
     * @return  TranscoderTemplatesConfig
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderTemplatesConfig($serverName, $vhostName)
    {
        list($response) = $this->getTranscoderTemplatesConfigWithHttpInfo($serverName, $vhostName);
        return $response;
    }


    /**
     * Operation getTranscoderTemplatesConfigWithHttpInfo
     *
     * Retrieves the list of Transcoder Template Configurations for the specified VHost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     *
     * @return Array of \Model\TranscoderTemplatesConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderTemplatesConfigWithHttpInfo($serverName, $vhostName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getTranscoderTemplatesConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getTranscoderTemplatesConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/transcoder/templates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                TranscoderTemplatesConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, TranscoderTemplatesConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), TranscoderTemplatesConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getVHostConfig
     *
     * Retrieves the specified VHost configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     *
     * @return  VHostConfig
     * @throws ApiException on non-2xx response
     */
    public function getVHostConfig($serverName, $vhostName)
    {
        list($response) = $this->getVHostConfigWithHttpInfo($serverName, $vhostName);
        return $response;
    }


    /**
     * Operation getVHostConfigWithHttpInfo
     *
     * Retrieves the specified VHost configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     *
     * @return Array of \Model\VHostConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getVHostConfigWithHttpInfo($serverName, $vhostName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getVHostConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getVHostConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                VHostConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, VHostConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), VHostConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getVHostConfigAdv
     *
     * Retrieves the specified advanced VHost configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     *
     * @return  VHostConfigAdv
     * @throws ApiException on non-2xx response
     */
    public function getVHostConfigAdv($serverName, $vhostName)
    {
        list($response) = $this->getVHostConfigAdvWithHttpInfo($serverName, $vhostName);
        return $response;
    }


    /**
     * Operation getVHostConfigAdvWithHttpInfo
     *
     * Retrieves the specified advanced VHost configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     *
     * @return Array of \Model\VHostConfigAdv, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getVHostConfigAdvWithHttpInfo($serverName, $vhostName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getVHostConfigAdv');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getVHostConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                VHostConfigAdv::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, VHostConfigAdv::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), VHostConfigAdv::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getVHostTuneConfig
     *
     * Retrieves the Tuning configuration for the specifed vhost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     *
     * @return  VHostTuneConfig
     * @throws ApiException on non-2xx response
     */
    public function getVHostTuneConfig($serverName, $vhostName)
    {
        list($response) = $this->getVHostTuneConfigWithHttpInfo($serverName, $vhostName);
        return $response;
    }


    /**
     * Operation getVHostTuneConfigWithHttpInfo
     *
     * Retrieves the Tuning configuration for the specifed vhost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     *
     * @return Array of \Model\VHostTuneConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getVHostTuneConfigWithHttpInfo($serverName, $vhostName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getVHostTuneConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getVHostTuneConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/tune";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                VHostTuneConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, VHostTuneConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), VHostTuneConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getVHostsConfig
     *
     * Retrieves the list of VHosts.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return  VHostsConfig
     * @throws ApiException on non-2xx response
     */
    public function getVHostsConfig($serverName)
    {
        list($response) = $this->getVHostsConfigWithHttpInfo($serverName);
        return $response;
    }


    /**
     * Operation getVHostsConfigWithHttpInfo
     *
     * Retrieves the list of VHosts.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return Array of \Model\VHostsConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getVHostsConfigWithHttpInfo($serverName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getVHostsConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                VHostsConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, VHostsConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), VHostsConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation postPublisherVhostConfig
     *
     * Adds the specified Publisher configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     * @param string $publisherName The publisher name (required)
     * @param PublisherVhostConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postPublisherVhostConfig($serverName, $vhostName, $publisherName, $body)
    {
        list($response) = $this->postPublisherVhostConfigWithHttpInfo($serverName, $vhostName, $publisherName, $body);
        return $response;
    }


    /**
     * Operation postPublisherVhostConfigWithHttpInfo
     *
     * Adds the specified Publisher configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     * @param string $publisherName The publisher name (required)
     * @param PublisherVhostConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postPublisherVhostConfigWithHttpInfo($serverName, $vhostName, $publisherName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postPublisherVhostConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling postPublisherVhostConfig');
        }

        // verify the required parameter 'publisherName' is set
        if ($publisherName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $publisherName when calling postPublisherVhostConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postPublisherVhostConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/publishers/{publisherName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($publisherName !== null) {
            $resourcePath = str_replace(
                "{" . "publisherName" . "}",
                $this->apiClient->getSerializer()->toPathValue($publisherName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postPublishersVhostConfig
     *
     * Add a Publisher to list of Publishers for the specified VHost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     * @param PublisherVhostConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postPublishersVhostConfig($serverName, $vhostName, $body)
    {
        list($response) = $this->postPublishersVhostConfigWithHttpInfo($serverName, $vhostName, $body);
        return $response;
    }


    /**
     * Operation postPublishersVhostConfigWithHttpInfo
     *
     * Add a Publisher to list of Publishers for the specified VHost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     * @param PublisherVhostConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postPublishersVhostConfigWithHttpInfo($serverName, $vhostName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postPublishersVhostConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling postPublishersVhostConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postPublishersVhostConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/publishers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postSMILFileConfig
     *
     * Adds the specified SMIL File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $smilfileName The SMIL file name without the extension (required)
     * @param SMILFileConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postSMILFileConfig($serverName, $vhostName, $smilfileName, $body)
    {
        list($response) = $this->postSMILFileConfigWithHttpInfo($serverName, $vhostName, $smilfileName, $body);
        return $response;
    }


    /**
     * Operation postSMILFileConfigWithHttpInfo
     *
     * Adds the specified SMIL File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $smilfileName The SMIL file name without the extension (required)
     * @param SMILFileConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postSMILFileConfigWithHttpInfo($serverName, $vhostName, $smilfileName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postSMILFileConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling postSMILFileConfig');
        }

        // verify the required parameter 'smilfileName' is set
        if ($smilfileName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $smilfileName when calling postSMILFileConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postSMILFileConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/smilfiles/{smilfileName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($smilfileName !== null) {
            $resourcePath = str_replace(
                "{" . "smilfileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($smilfileName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postSMILFilesConfig
     *
     * Adds a SMIL File to the list of SMIL Files for the specified VHost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param SMILFileConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postSMILFilesConfig($serverName, $vhostName, $body)
    {
        list($response) = $this->postSMILFilesConfigWithHttpInfo($serverName, $vhostName, $body);
        return $response;
    }


    /**
     * Operation postSMILFilesConfigWithHttpInfo
     *
     * Adds a SMIL File to the list of SMIL Files for the specified VHost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param SMILFileConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postSMILFilesConfigWithHttpInfo($serverName, $vhostName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postSMILFilesConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling postSMILFilesConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postSMILFilesConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/smilfiles";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postStartupStreamConfig
     *
     * Adds the specified Startup Stream configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $streamName  (required)
     * @param string $appName  (required)
     * @param string $instanceName  (required)
     * @param StartupStreamConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postStartupStreamConfig($serverName, $vhostName, $streamName, $appName, $instanceName, $body)
    {
        list($response) = $this->postStartupStreamConfigWithHttpInfo($serverName, $vhostName, $streamName, $appName, $instanceName, $body);
        return $response;
    }


    /**
     * Operation postStartupStreamConfigWithHttpInfo
     *
     * Adds the specified Startup Stream configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $streamName  (required)
     * @param string $appName  (required)
     * @param string $instanceName  (required)
     * @param StartupStreamConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postStartupStreamConfigWithHttpInfo($serverName, $vhostName, $streamName, $appName, $instanceName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postStartupStreamConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling postStartupStreamConfig');
        }

        // verify the required parameter 'streamName' is set
        if ($streamName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $streamName when calling postStartupStreamConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling postStartupStreamConfig');
        }

        // verify the required parameter 'instanceName' is set
        if ($instanceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instanceName when calling postStartupStreamConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postStartupStreamConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/startupstreams/applications/{appName}/instances/{instanceName}/streams/{streamName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($streamName !== null) {
            $resourcePath = str_replace(
                "{" . "streamName" . "}",
                $this->apiClient->getSerializer()->toPathValue($streamName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($instanceName !== null) {
            $resourcePath = str_replace(
                "{" . "instanceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($instanceName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postStartupStreamsConfig
     *
     * Adds a Startup Stream to the list of Startup Streams for the specified VHost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param StartupStreamConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postStartupStreamsConfig($serverName, $vhostName, $body)
    {
        list($response) = $this->postStartupStreamsConfigWithHttpInfo($serverName, $vhostName, $body);
        return $response;
    }


    /**
     * Operation postStartupStreamsConfigWithHttpInfo
     *
     * Adds a Startup Stream to the list of Startup Streams for the specified VHost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param StartupStreamConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postStartupStreamsConfigWithHttpInfo($serverName, $vhostName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postStartupStreamsConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling postStartupStreamsConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postStartupStreamsConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/startupstreams";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postStreamFileConfig
     *
     * Adds the specified Stream File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $streamfileName The stream file name without the extension (required)
     * @param StreamFileConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postStreamFileConfig($serverName, $vhostName, $streamfileName, $body)
    {
        list($response) = $this->postStreamFileConfigWithHttpInfo($serverName, $vhostName, $streamfileName, $body);
        return $response;
    }


    /**
     * Operation postStreamFileConfigWithHttpInfo
     *
     * Adds the specified Stream File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $streamfileName The stream file name without the extension (required)
     * @param StreamFileConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postStreamFileConfigWithHttpInfo($serverName, $vhostName, $streamfileName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postStreamFileConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling postStreamFileConfig');
        }

        // verify the required parameter 'streamfileName' is set
        if ($streamfileName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $streamfileName when calling postStreamFileConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postStreamFileConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/streamfiles/{streamfileName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($streamfileName !== null) {
            $resourcePath = str_replace(
                "{" . "streamfileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($streamfileName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postStreamFilesConfig
     *
     * Adds a Stream File to the list of Stream Files for the specified VHost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param StreamFileConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postStreamFilesConfig($serverName, $vhostName, $body)
    {
        list($response) = $this->postStreamFilesConfigWithHttpInfo($serverName, $vhostName, $body);
        return $response;
    }


    /**
     * Operation postStreamFilesConfigWithHttpInfo
     *
     * Adds a Stream File to the list of Stream Files for the specified VHost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param StreamFileConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postStreamFilesConfigWithHttpInfo($serverName, $vhostName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postStreamFilesConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling postStreamFilesConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postStreamFilesConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/streamfiles";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postTranscoderEncodeConfig
     *
     * Adds the specified Trancoder Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $encodeName  (required)
     * @param TranscoderEncodeConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postTranscoderEncodeConfig($serverName, $vhostName, $templateName, $encodeName, $body)
    {
        list($response) = $this->postTranscoderEncodeConfigWithHttpInfo($serverName, $vhostName, $templateName, $encodeName, $body);
        return $response;
    }


    /**
     * Operation postTranscoderEncodeConfigWithHttpInfo
     *
     * Adds the specified Trancoder Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $encodeName  (required)
     * @param TranscoderEncodeConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postTranscoderEncodeConfigWithHttpInfo($serverName, $vhostName, $templateName, $encodeName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postTranscoderEncodeConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling postTranscoderEncodeConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling postTranscoderEncodeConfig');
        }

        // verify the required parameter 'encodeName' is set
        if ($encodeName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $encodeName when calling postTranscoderEncodeConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postTranscoderEncodeConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/transcoder/templates/{templateName}/encodes/{encodeName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($encodeName !== null) {
            $resourcePath = str_replace(
                "{" . "encodeName" . "}",
                $this->apiClient->getSerializer()->toPathValue($encodeName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postTranscoderEncodesConfig
     *
     * Adds a Transcoder Encode Configuration to the specified VHost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param TranscoderEncodeConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postTranscoderEncodesConfig($serverName, $vhostName, $templateName, $body)
    {
        list($response) = $this->postTranscoderEncodesConfigWithHttpInfo($serverName, $vhostName, $templateName, $body);
        return $response;
    }


    /**
     * Operation postTranscoderEncodesConfigWithHttpInfo
     *
     * Adds a Transcoder Encode Configuration to the specified VHost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param TranscoderEncodeConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postTranscoderEncodesConfigWithHttpInfo($serverName, $vhostName, $templateName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postTranscoderEncodesConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling postTranscoderEncodesConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling postTranscoderEncodesConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postTranscoderEncodesConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/transcoder/templates/{templateName}/encodes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postTranscoderStreamNameGroupConfig
     *
     * Adds the specified Trancoder StreamNameGroup configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $groupName  (required)
     * @param TranscoderStreamNameGroupConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postTranscoderStreamNameGroupConfig($serverName, $vhostName, $templateName, $groupName, $body)
    {
        list($response) = $this->postTranscoderStreamNameGroupConfigWithHttpInfo($serverName, $vhostName, $templateName, $groupName, $body);
        return $response;
    }


    /**
     * Operation postTranscoderStreamNameGroupConfigWithHttpInfo
     *
     * Adds the specified Trancoder StreamNameGroup configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $groupName  (required)
     * @param TranscoderStreamNameGroupConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postTranscoderStreamNameGroupConfigWithHttpInfo($serverName, $vhostName, $templateName, $groupName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postTranscoderStreamNameGroupConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling postTranscoderStreamNameGroupConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling postTranscoderStreamNameGroupConfig');
        }

        // verify the required parameter 'groupName' is set
        if ($groupName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $groupName when calling postTranscoderStreamNameGroupConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postTranscoderStreamNameGroupConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/transcoder/templates/{templateName}/streamnamegroups/{groupName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($groupName !== null) {
            $resourcePath = str_replace(
                "{" . "groupName" . "}",
                $this->apiClient->getSerializer()->toPathValue($groupName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postTranscoderStreamNameGroupsConfig
     *
     * Adds a Transcoder Stream Name Groups Configuration to the specified Template.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param TranscoderStreamNameGroupConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postTranscoderStreamNameGroupsConfig($serverName, $vhostName, $templateName, $body)
    {
        list($response) = $this->postTranscoderStreamNameGroupsConfigWithHttpInfo($serverName, $vhostName, $templateName, $body);
        return $response;
    }


    /**
     * Operation postTranscoderStreamNameGroupsConfigWithHttpInfo
     *
     * Adds a Transcoder Stream Name Groups Configuration to the specified Template.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param TranscoderStreamNameGroupConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postTranscoderStreamNameGroupsConfigWithHttpInfo($serverName, $vhostName, $templateName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postTranscoderStreamNameGroupsConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling postTranscoderStreamNameGroupsConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling postTranscoderStreamNameGroupsConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postTranscoderStreamNameGroupsConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/transcoder/templates/{templateName}/streamnamegroups";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postTranscoderTemplateConfig
     *
     * Adds the specified Trancoder Template configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param TranscoderTemplateConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postTranscoderTemplateConfig($serverName, $vhostName, $templateName, $body)
    {
        list($response) = $this->postTranscoderTemplateConfigWithHttpInfo($serverName, $vhostName, $templateName, $body);
        return $response;
    }


    /**
     * Operation postTranscoderTemplateConfigWithHttpInfo
     *
     * Adds the specified Trancoder Template configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param TranscoderTemplateConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postTranscoderTemplateConfigWithHttpInfo($serverName, $vhostName, $templateName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postTranscoderTemplateConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling postTranscoderTemplateConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling postTranscoderTemplateConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postTranscoderTemplateConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/transcoder/templates/{templateName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postTranscoderTemplatesConfig
     *
     * Adds a Transcoder Templates Configuration to the specified VHost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param TranscoderTemplateConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postTranscoderTemplatesConfig($serverName, $vhostName, $body)
    {
        list($response) = $this->postTranscoderTemplatesConfigWithHttpInfo($serverName, $vhostName, $body);
        return $response;
    }


    /**
     * Operation postTranscoderTemplatesConfigWithHttpInfo
     *
     * Adds a Transcoder Templates Configuration to the specified VHost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param TranscoderTemplateConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postTranscoderTemplatesConfigWithHttpInfo($serverName, $vhostName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postTranscoderTemplatesConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling postTranscoderTemplatesConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postTranscoderTemplatesConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/transcoder/templates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putHostPortConfigAdv
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $portname The port name (required)
     * @param HostPortConfigAdv $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putHostPortConfigAdv($serverName, $vhostName, $portname, $body)
    {
        list($response) = $this->putHostPortConfigAdvWithHttpInfo($serverName, $vhostName, $portname, $body);
        return $response;
    }


    /**
     * Operation putHostPortConfigAdvWithHttpInfo
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $portname The port name (required)
     * @param HostPortConfigAdv $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putHostPortConfigAdvWithHttpInfo($serverName, $vhostName, $portname, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putHostPortConfigAdv');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putHostPortConfigAdv');
        }

        // verify the required parameter 'portname' is set
        if ($portname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $portname when calling putHostPortConfigAdv');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putHostPortConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/hostports/{portname}/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($portname !== null) {
            $resourcePath = str_replace(
                "{" . "portname" . "}",
                $this->apiClient->getSerializer()->toPathValue($portname),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putHostportsTuneConfig
     *
     * Updates the host port configuration used for server tuning for the specified vhost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     * @param HostportsTuneConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putHostportsTuneConfig($serverName, $vhostName, $body)
    {
        list($response) = $this->putHostportsTuneConfigWithHttpInfo($serverName, $vhostName, $body);
        return $response;
    }


    /**
     * Operation putHostportsTuneConfigWithHttpInfo
     *
     * Updates the host port configuration used for server tuning for the specified vhost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     * @param HostportsTuneConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putHostportsTuneConfigWithHttpInfo($serverName, $vhostName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putHostportsTuneConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putHostportsTuneConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putHostportsTuneConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/tunehostports";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putMediaCacheStoreAction
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $filename The file or stream name item to be used in all rest action requests (optional)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putMediaCacheStoreAction($serverName, $action, $vhostName, $filename = null)
    {
        list($response) = $this->putMediaCacheStoreActionWithHttpInfo($serverName, $action, $vhostName, $filename);
        return $response;
    }


    /**
     * Operation putMediaCacheStoreActionWithHttpInfo
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $filename The file or stream name item to be used in all rest action requests (optional)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putMediaCacheStoreActionWithHttpInfo($serverName, $action, $vhostName, $filename = null)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putMediaCacheStoreAction');
        }

        // verify the required parameter 'action' is set
        if ($action === null) {
            throw new \InvalidArgumentException('Missing the required parameter $action when calling putMediaCacheStoreAction');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putMediaCacheStoreAction');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/mediacache/stores/actions/{action}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        // query params
        if ($filename !== null) {
            $queryParams['filename'] = $this->apiClient->getSerializer()->toQueryValue($filename);
        }
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($action !== null) {
            $resourcePath = str_replace(
                "{" . "action" . "}",
                $this->apiClient->getSerializer()->toPathValue($action),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putPublisherVhostConfig
     *
     * Updates the specified Publisher configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     * @param string $publisherName The publisher name (required)
     * @param PublisherVhostConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putPublisherVhostConfig($serverName, $vhostName, $publisherName, $body)
    {
        list($response) = $this->putPublisherVhostConfigWithHttpInfo($serverName, $vhostName, $publisherName, $body);
        return $response;
    }


    /**
     * Operation putPublisherVhostConfigWithHttpInfo
     *
     * Updates the specified Publisher configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     * @param string $publisherName The publisher name (required)
     * @param PublisherVhostConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putPublisherVhostConfigWithHttpInfo($serverName, $vhostName, $publisherName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putPublisherVhostConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putPublisherVhostConfig');
        }

        // verify the required parameter 'publisherName' is set
        if ($publisherName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $publisherName when calling putPublisherVhostConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putPublisherVhostConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/publishers/{publisherName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($publisherName !== null) {
            $resourcePath = str_replace(
                "{" . "publisherName" . "}",
                $this->apiClient->getSerializer()->toPathValue($publisherName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putSDPFileAction
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $mediaCasterType The MediaCasterType to use for the connection (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $sdpfileName The SDP file name needed for this REST call (required)
     * @param string $connectAppName The name of the application to connect to (optional)
     * @param string $appInstance The name of the application instance to connect to (optional)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putSDPFileAction($serverName, $action, $mediaCasterType, $vhostName, $sdpfileName, $connectAppName = null, $appInstance = null)
    {
        list($response) = $this->putSDPFileActionWithHttpInfo($serverName, $action, $mediaCasterType, $vhostName, $sdpfileName, $connectAppName, $appInstance);
        return $response;
    }


    /**
     * Operation putSDPFileActionWithHttpInfo
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $mediaCasterType The MediaCasterType to use for the connection (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $sdpfileName The SDP file name needed for this REST call (required)
     * @param string $connectAppName The name of the application to connect to (optional)
     * @param string $appInstance The name of the application instance to connect to (optional)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putSDPFileActionWithHttpInfo($serverName, $action, $mediaCasterType, $vhostName, $sdpfileName, $connectAppName = null, $appInstance = null)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putSDPFileAction');
        }

        // verify the required parameter 'action' is set
        if ($action === null) {
            throw new \InvalidArgumentException('Missing the required parameter $action when calling putSDPFileAction');
        }

        // verify the required parameter 'mediaCasterType' is set
        if ($mediaCasterType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $mediaCasterType when calling putSDPFileAction');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putSDPFileAction');
        }

        // verify the required parameter 'sdpfileName' is set
        if ($sdpfileName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sdpfileName when calling putSDPFileAction');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/sdpfiles/{sdpfileName}/actions/{action}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        // query params
        if ($connectAppName !== null) {
            $queryParams['connectAppName'] = $this->apiClient->getSerializer()->toQueryValue($connectAppName);
        }// query params
        if ($appInstance !== null) {
            $queryParams['appInstance'] = $this->apiClient->getSerializer()->toQueryValue($appInstance);
        }// query params
        if ($mediaCasterType !== null) {
            $queryParams['mediaCasterType'] = $this->apiClient->getSerializer()->toQueryValue($mediaCasterType);
        }
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($action !== null) {
            $resourcePath = str_replace(
                "{" . "action" . "}",
                $this->apiClient->getSerializer()->toPathValue($action),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($sdpfileName !== null) {
            $resourcePath = str_replace(
                "{" . "sdpfileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($sdpfileName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putSMILFileAction
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $mediaCasterType The MediaCasterType to use for the connection (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $smilfileName The SMIL file, file name needed for this REST call (required)
     * @param string $connectAppName The name of the application to connect to (optional)
     * @param string $appInstance The name of the application instance to connect to (optional)
     * @param string $dstEntryName The destination SMIL file name when copying (optional)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putSMILFileAction($serverName, $action, $mediaCasterType, $vhostName, $smilfileName, $connectAppName = null, $appInstance = null, $dstEntryName = null)
    {
        list($response) = $this->putSMILFileActionWithHttpInfo($serverName, $action, $mediaCasterType, $vhostName, $smilfileName, $connectAppName, $appInstance, $dstEntryName);
        return $response;
    }


    /**
     * Operation putSMILFileActionWithHttpInfo
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $mediaCasterType The MediaCasterType to use for the connection (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $smilfileName The SMIL file, file name needed for this REST call (required)
     * @param string $connectAppName The name of the application to connect to (optional)
     * @param string $appInstance The name of the application instance to connect to (optional)
     * @param string $dstEntryName The destination SMIL file name when copying (optional)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putSMILFileActionWithHttpInfo($serverName, $action, $mediaCasterType, $vhostName, $smilfileName, $connectAppName = null, $appInstance = null, $dstEntryName = null)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putSMILFileAction');
        }

        // verify the required parameter 'action' is set
        if ($action === null) {
            throw new \InvalidArgumentException('Missing the required parameter $action when calling putSMILFileAction');
        }

        // verify the required parameter 'mediaCasterType' is set
        if ($mediaCasterType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $mediaCasterType when calling putSMILFileAction');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putSMILFileAction');
        }

        // verify the required parameter 'smilfileName' is set
        if ($smilfileName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $smilfileName when calling putSMILFileAction');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/smilfiles/{smilfileName}/actions/{action}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        // query params
        if ($connectAppName !== null) {
            $queryParams['connectAppName'] = $this->apiClient->getSerializer()->toQueryValue($connectAppName);
        }// query params
        if ($appInstance !== null) {
            $queryParams['appInstance'] = $this->apiClient->getSerializer()->toQueryValue($appInstance);
        }// query params
        if ($mediaCasterType !== null) {
            $queryParams['mediaCasterType'] = $this->apiClient->getSerializer()->toQueryValue($mediaCasterType);
        }// query params
        if ($dstEntryName !== null) {
            $queryParams['dstEntryName'] = $this->apiClient->getSerializer()->toQueryValue($dstEntryName);
        }
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($action !== null) {
            $resourcePath = str_replace(
                "{" . "action" . "}",
                $this->apiClient->getSerializer()->toPathValue($action),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($smilfileName !== null) {
            $resourcePath = str_replace(
                "{" . "smilfileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($smilfileName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putSMILFileConfig
     *
     * Updates the specified SMIL File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $smilfileName The SMIL file name without the extension (required)
     * @param SMILFileConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putSMILFileConfig($serverName, $vhostName, $smilfileName, $body)
    {
        list($response) = $this->putSMILFileConfigWithHttpInfo($serverName, $vhostName, $smilfileName, $body);
        return $response;
    }


    /**
     * Operation putSMILFileConfigWithHttpInfo
     *
     * Updates the specified SMIL File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $smilfileName The SMIL file name without the extension (required)
     * @param SMILFileConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putSMILFileConfigWithHttpInfo($serverName, $vhostName, $smilfileName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putSMILFileConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putSMILFileConfig');
        }

        // verify the required parameter 'smilfileName' is set
        if ($smilfileName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $smilfileName when calling putSMILFileConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putSMILFileConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/smilfiles/{smilfileName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($smilfileName !== null) {
            $resourcePath = str_replace(
                "{" . "smilfileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($smilfileName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putSSLConfig
     *
     * Updates the SSL configuration for the specified vhost and port.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $portname The port name (required)
     * @param SSLConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putSSLConfig($serverName, $vhostName, $portname, $body)
    {
        list($response) = $this->putSSLConfigWithHttpInfo($serverName, $vhostName, $portname, $body);
        return $response;
    }


    /**
     * Operation putSSLConfigWithHttpInfo
     *
     * Updates the SSL configuration for the specified vhost and port.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $portname The port name (required)
     * @param SSLConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putSSLConfigWithHttpInfo($serverName, $vhostName, $portname, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putSSLConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putSSLConfig');
        }

        // verify the required parameter 'portname' is set
        if ($portname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $portname when calling putSSLConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putSSLConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/hostports/{portname}/ssl";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($portname !== null) {
            $resourcePath = str_replace(
                "{" . "portname" . "}",
                $this->apiClient->getSerializer()->toPathValue($portname),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putStartupStreamConfig
     *
     * Updates the specified Startup Stream configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $streamName  (required)
     * @param string $appName  (required)
     * @param string $instanceName  (required)
     * @param StartupStreamConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putStartupStreamConfig($serverName, $vhostName, $streamName, $appName, $instanceName, $body)
    {
        list($response) = $this->putStartupStreamConfigWithHttpInfo($serverName, $vhostName, $streamName, $appName, $instanceName, $body);
        return $response;
    }


    /**
     * Operation putStartupStreamConfigWithHttpInfo
     *
     * Updates the specified Startup Stream configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $streamName  (required)
     * @param string $appName  (required)
     * @param string $instanceName  (required)
     * @param StartupStreamConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putStartupStreamConfigWithHttpInfo($serverName, $vhostName, $streamName, $appName, $instanceName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putStartupStreamConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putStartupStreamConfig');
        }

        // verify the required parameter 'streamName' is set
        if ($streamName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $streamName when calling putStartupStreamConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putStartupStreamConfig');
        }

        // verify the required parameter 'instanceName' is set
        if ($instanceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instanceName when calling putStartupStreamConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putStartupStreamConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/startupstreams/applications/{appName}/instances/{instanceName}/streams/{streamName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($streamName !== null) {
            $resourcePath = str_replace(
                "{" . "streamName" . "}",
                $this->apiClient->getSerializer()->toPathValue($streamName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($instanceName !== null) {
            $resourcePath = str_replace(
                "{" . "instanceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($instanceName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putStreamFileAction
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $mediaCasterType The MediaCasterType to use for the connection (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $streamfileName The stream file, file name needed for this REST call (required)
     * @param string $connectAppName The name of the application to connect to (optional)
     * @param string $appInstance The name of the application instance to connect to (optional)
     * @param string $dstEntryName The destination stream file name when copying (optional)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putStreamFileAction($serverName, $action, $mediaCasterType, $vhostName, $streamfileName, $connectAppName = null, $appInstance = null, $dstEntryName = null)
    {
        list($response) = $this->putStreamFileActionWithHttpInfo($serverName, $action, $mediaCasterType, $vhostName, $streamfileName, $connectAppName, $appInstance, $dstEntryName);
        return $response;
    }


    /**
     * Operation putStreamFileActionWithHttpInfo
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $mediaCasterType The MediaCasterType to use for the connection (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $streamfileName The stream file, file name needed for this REST call (required)
     * @param string $connectAppName The name of the application to connect to (optional)
     * @param string $appInstance The name of the application instance to connect to (optional)
     * @param string $dstEntryName The destination stream file name when copying (optional)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putStreamFileActionWithHttpInfo($serverName, $action, $mediaCasterType, $vhostName, $streamfileName, $connectAppName = null, $appInstance = null, $dstEntryName = null)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putStreamFileAction');
        }

        // verify the required parameter 'action' is set
        if ($action === null) {
            throw new \InvalidArgumentException('Missing the required parameter $action when calling putStreamFileAction');
        }

        // verify the required parameter 'mediaCasterType' is set
        if ($mediaCasterType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $mediaCasterType when calling putStreamFileAction');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putStreamFileAction');
        }

        // verify the required parameter 'streamfileName' is set
        if ($streamfileName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $streamfileName when calling putStreamFileAction');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/streamfiles/{streamfileName}/actions/{action}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        // query params
        if ($connectAppName !== null) {
            $queryParams['connectAppName'] = $this->apiClient->getSerializer()->toQueryValue($connectAppName);
        }// query params
        if ($appInstance !== null) {
            $queryParams['appInstance'] = $this->apiClient->getSerializer()->toQueryValue($appInstance);
        }// query params
        if ($mediaCasterType !== null) {
            $queryParams['mediaCasterType'] = $this->apiClient->getSerializer()->toQueryValue($mediaCasterType);
        }// query params
        if ($dstEntryName !== null) {
            $queryParams['dstEntryName'] = $this->apiClient->getSerializer()->toQueryValue($dstEntryName);
        }
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($action !== null) {
            $resourcePath = str_replace(
                "{" . "action" . "}",
                $this->apiClient->getSerializer()->toPathValue($action),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($streamfileName !== null) {
            $resourcePath = str_replace(
                "{" . "streamfileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($streamfileName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putStreamFileConfig
     *
     * Updates the specified Stream File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $streamfileName The stream file name without the extension (required)
     * @param StreamFileConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putStreamFileConfig($serverName, $vhostName, $streamfileName, $body)
    {
        list($response) = $this->putStreamFileConfigWithHttpInfo($serverName, $vhostName, $streamfileName, $body);
        return $response;
    }


    /**
     * Operation putStreamFileConfigWithHttpInfo
     *
     * Updates the specified Stream File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $streamfileName The stream file name without the extension (required)
     * @param StreamFileConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putStreamFileConfigWithHttpInfo($serverName, $vhostName, $streamfileName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putStreamFileConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putStreamFileConfig');
        }

        // verify the required parameter 'streamfileName' is set
        if ($streamfileName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $streamfileName when calling putStreamFileConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putStreamFileConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/streamfiles/{streamfileName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($streamfileName !== null) {
            $resourcePath = str_replace(
                "{" . "streamfileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($streamfileName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putStreamFileConfigAdv
     *
     * Updates the Advanced Stream File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $streamfileName The stream file name without the .stream extension (required)
     * @param StreamFileConfigAdv $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putStreamFileConfigAdv($serverName, $vhostName, $streamfileName, $body)
    {
        list($response) = $this->putStreamFileConfigAdvWithHttpInfo($serverName, $vhostName, $streamfileName, $body);
        return $response;
    }


    /**
     * Operation putStreamFileConfigAdvWithHttpInfo
     *
     * Updates the Advanced Stream File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $streamfileName The stream file name without the .stream extension (required)
     * @param StreamFileConfigAdv $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putStreamFileConfigAdvWithHttpInfo($serverName, $vhostName, $streamfileName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putStreamFileConfigAdv');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putStreamFileConfigAdv');
        }

        // verify the required parameter 'streamfileName' is set
        if ($streamfileName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $streamfileName when calling putStreamFileConfigAdv');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putStreamFileConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/streamfiles/{streamfileName}/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($streamfileName !== null) {
            $resourcePath = str_replace(
                "{" . "streamfileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($streamfileName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putTranscoderConfig
     *
     * Updates the Transcoder configuration for the specified VHost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param TranscoderConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderConfig($serverName, $vhostName, $body)
    {
        list($response) = $this->putTranscoderConfigWithHttpInfo($serverName, $vhostName, $body);
        return $response;
    }


    /**
     * Operation putTranscoderConfigWithHttpInfo
     *
     * Updates the Transcoder configuration for the specified VHost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param TranscoderConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderConfigWithHttpInfo($serverName, $vhostName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putTranscoderConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putTranscoderConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putTranscoderConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/transcoder";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putTranscoderEncodeConfig
     *
     * Updates the specified Trancoder Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $encodeName  (required)
     * @param TranscoderEncodeConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderEncodeConfig($serverName, $vhostName, $templateName, $encodeName, $body)
    {
        list($response) = $this->putTranscoderEncodeConfigWithHttpInfo($serverName, $vhostName, $templateName, $encodeName, $body);
        return $response;
    }


    /**
     * Operation putTranscoderEncodeConfigWithHttpInfo
     *
     * Updates the specified Trancoder Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $encodeName  (required)
     * @param TranscoderEncodeConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderEncodeConfigWithHttpInfo($serverName, $vhostName, $templateName, $encodeName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putTranscoderEncodeConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putTranscoderEncodeConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling putTranscoderEncodeConfig');
        }

        // verify the required parameter 'encodeName' is set
        if ($encodeName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $encodeName when calling putTranscoderEncodeConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putTranscoderEncodeConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/transcoder/templates/{templateName}/encodes/{encodeName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($encodeName !== null) {
            $resourcePath = str_replace(
                "{" . "encodeName" . "}",
                $this->apiClient->getSerializer()->toPathValue($encodeName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putTranscoderEncodeConfigAdv
     *
     * Updates the Advanced Transcoder Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $encodeName  (required)
     * @param TranscoderEncodeConfigAdv $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderEncodeConfigAdv($serverName, $vhostName, $templateName, $encodeName, $body)
    {
        list($response) = $this->putTranscoderEncodeConfigAdvWithHttpInfo($serverName, $vhostName, $templateName, $encodeName, $body);
        return $response;
    }


    /**
     * Operation putTranscoderEncodeConfigAdvWithHttpInfo
     *
     * Updates the Advanced Transcoder Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $encodeName  (required)
     * @param TranscoderEncodeConfigAdv $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderEncodeConfigAdvWithHttpInfo($serverName, $vhostName, $templateName, $encodeName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putTranscoderEncodeConfigAdv');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putTranscoderEncodeConfigAdv');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling putTranscoderEncodeConfigAdv');
        }

        // verify the required parameter 'encodeName' is set
        if ($encodeName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $encodeName when calling putTranscoderEncodeConfigAdv');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putTranscoderEncodeConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/transcoder/templates/{templateName}/encodes/{encodeName}/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($encodeName !== null) {
            $resourcePath = str_replace(
                "{" . "encodeName" . "}",
                $this->apiClient->getSerializer()->toPathValue($encodeName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putTranscoderOverlayDecodeConfig
     *
     * Updates the specified Trancoder Overlay Decode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $overlayName  (required)
     * @param TranscoderOverlayDecodeConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderOverlayDecodeConfig($serverName, $vhostName, $templateName, $overlayName, $body)
    {
        list($response) = $this->putTranscoderOverlayDecodeConfigWithHttpInfo($serverName, $vhostName, $templateName, $overlayName, $body);
        return $response;
    }


    /**
     * Operation putTranscoderOverlayDecodeConfigWithHttpInfo
     *
     * Updates the specified Trancoder Overlay Decode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $overlayName  (required)
     * @param TranscoderOverlayDecodeConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderOverlayDecodeConfigWithHttpInfo($serverName, $vhostName, $templateName, $overlayName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putTranscoderOverlayDecodeConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putTranscoderOverlayDecodeConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling putTranscoderOverlayDecodeConfig');
        }

        // verify the required parameter 'overlayName' is set
        if ($overlayName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $overlayName when calling putTranscoderOverlayDecodeConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putTranscoderOverlayDecodeConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/transcoder/templates/{templateName}/decode/overlays/{overlayName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($overlayName !== null) {
            $resourcePath = str_replace(
                "{" . "overlayName" . "}",
                $this->apiClient->getSerializer()->toPathValue($overlayName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putTranscoderOverlayEncodeConfig
     *
     * Updates the specified Trancoder Overlay Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $overlayName  (required)
     * @param string $encodeName  (required)
     * @param TranscoderOverlayEncodeConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderOverlayEncodeConfig($serverName, $vhostName, $templateName, $overlayName, $encodeName, $body)
    {
        list($response) = $this->putTranscoderOverlayEncodeConfigWithHttpInfo($serverName, $vhostName, $templateName, $overlayName, $encodeName, $body);
        return $response;
    }


    /**
     * Operation putTranscoderOverlayEncodeConfigWithHttpInfo
     *
     * Updates the specified Trancoder Overlay Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $overlayName  (required)
     * @param string $encodeName  (required)
     * @param TranscoderOverlayEncodeConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderOverlayEncodeConfigWithHttpInfo($serverName, $vhostName, $templateName, $overlayName, $encodeName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putTranscoderOverlayEncodeConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putTranscoderOverlayEncodeConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling putTranscoderOverlayEncodeConfig');
        }

        // verify the required parameter 'overlayName' is set
        if ($overlayName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $overlayName when calling putTranscoderOverlayEncodeConfig');
        }

        // verify the required parameter 'encodeName' is set
        if ($encodeName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $encodeName when calling putTranscoderOverlayEncodeConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putTranscoderOverlayEncodeConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/transcoder/templates/{templateName}/encodes/{encodeName}/overlays/{overlayName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($overlayName !== null) {
            $resourcePath = str_replace(
                "{" . "overlayName" . "}",
                $this->apiClient->getSerializer()->toPathValue($overlayName),
                $resourcePath
            );
        }// path params
        if ($encodeName !== null) {
            $resourcePath = str_replace(
                "{" . "encodeName" . "}",
                $this->apiClient->getSerializer()->toPathValue($encodeName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putTranscoderStreamNameGroupConfig
     *
     * Updates the specified Trancoder StreamNameGroup configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $groupName  (required)
     * @param TranscoderStreamNameGroupConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderStreamNameGroupConfig($serverName, $vhostName, $templateName, $groupName, $body)
    {
        list($response) = $this->putTranscoderStreamNameGroupConfigWithHttpInfo($serverName, $vhostName, $templateName, $groupName, $body);
        return $response;
    }


    /**
     * Operation putTranscoderStreamNameGroupConfigWithHttpInfo
     *
     * Updates the specified Trancoder StreamNameGroup configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $groupName  (required)
     * @param TranscoderStreamNameGroupConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderStreamNameGroupConfigWithHttpInfo($serverName, $vhostName, $templateName, $groupName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putTranscoderStreamNameGroupConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putTranscoderStreamNameGroupConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling putTranscoderStreamNameGroupConfig');
        }

        // verify the required parameter 'groupName' is set
        if ($groupName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $groupName when calling putTranscoderStreamNameGroupConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putTranscoderStreamNameGroupConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/transcoder/templates/{templateName}/streamnamegroups/{groupName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($groupName !== null) {
            $resourcePath = str_replace(
                "{" . "groupName" . "}",
                $this->apiClient->getSerializer()->toPathValue($groupName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putTranscoderTemplateAction
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $templateName The template name needed for this REST call (required)
     * @param string $dstEntryName The destination transcoder template name when copying (optional)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderTemplateAction($serverName, $action, $vhostName, $templateName, $dstEntryName = null)
    {
        list($response) = $this->putTranscoderTemplateActionWithHttpInfo($serverName, $action, $vhostName, $templateName, $dstEntryName);
        return $response;
    }


    /**
     * Operation putTranscoderTemplateActionWithHttpInfo
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $templateName The template name needed for this REST call (required)
     * @param string $dstEntryName The destination transcoder template name when copying (optional)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderTemplateActionWithHttpInfo($serverName, $action, $vhostName, $templateName, $dstEntryName = null)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putTranscoderTemplateAction');
        }

        // verify the required parameter 'action' is set
        if ($action === null) {
            throw new \InvalidArgumentException('Missing the required parameter $action when calling putTranscoderTemplateAction');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putTranscoderTemplateAction');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling putTranscoderTemplateAction');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/transcoder/templates/{templateName}/actions/{action}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        // query params
        if ($dstEntryName !== null) {
            $queryParams['dstEntryName'] = $this->apiClient->getSerializer()->toQueryValue($dstEntryName);
        }
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($action !== null) {
            $resourcePath = str_replace(
                "{" . "action" . "}",
                $this->apiClient->getSerializer()->toPathValue($action),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putTranscoderTemplateConfig
     *
     * Updates the specified Trancoder Template configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param TranscoderTemplateConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderTemplateConfig($serverName, $vhostName, $templateName, $body)
    {
        list($response) = $this->putTranscoderTemplateConfigWithHttpInfo($serverName, $vhostName, $templateName, $body);
        return $response;
    }


    /**
     * Operation putTranscoderTemplateConfigWithHttpInfo
     *
     * Updates the specified Trancoder Template configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param TranscoderTemplateConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderTemplateConfigWithHttpInfo($serverName, $vhostName, $templateName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putTranscoderTemplateConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putTranscoderTemplateConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling putTranscoderTemplateConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putTranscoderTemplateConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/transcoder/templates/{templateName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putTranscoderTemplateConfigAdv
     *
     * Updates the Advanced Transcoder Template configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param TranscoderTemplateConfigAdv $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderTemplateConfigAdv($serverName, $vhostName, $templateName, $body)
    {
        list($response) = $this->putTranscoderTemplateConfigAdvWithHttpInfo($serverName, $vhostName, $templateName, $body);
        return $response;
    }


    /**
     * Operation putTranscoderTemplateConfigAdvWithHttpInfo
     *
     * Updates the Advanced Transcoder Template configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param TranscoderTemplateConfigAdv $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderTemplateConfigAdvWithHttpInfo($serverName, $vhostName, $templateName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putTranscoderTemplateConfigAdv');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putTranscoderTemplateConfigAdv');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling putTranscoderTemplateConfigAdv');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putTranscoderTemplateConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/transcoder/templates/{templateName}/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putVHostAction
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putVHostAction($serverName, $action, $vhostName)
    {
        list($response) = $this->putVHostActionWithHttpInfo($serverName, $action, $vhostName);
        return $response;
    }


    /**
     * Operation putVHostActionWithHttpInfo
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putVHostActionWithHttpInfo($serverName, $action, $vhostName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putVHostAction');
        }

        // verify the required parameter 'action' is set
        if ($action === null) {
            throw new \InvalidArgumentException('Missing the required parameter $action when calling putVHostAction');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putVHostAction');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/actions/{action}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($action !== null) {
            $resourcePath = str_replace(
                "{" . "action" . "}",
                $this->apiClient->getSerializer()->toPathValue($action),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putVHostConfig
     *
     * Updates the specified VHost configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     * @param VHostConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putVHostConfig($serverName, $vhostName, $body)
    {
        list($response) = $this->putVHostConfigWithHttpInfo($serverName, $vhostName, $body);
        return $response;
    }


    /**
     * Operation putVHostConfigWithHttpInfo
     *
     * Updates the specified VHost configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     * @param VHostConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putVHostConfigWithHttpInfo($serverName, $vhostName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putVHostConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putVHostConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putVHostConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putVHostConfigAdv
     *
     * Updates the specified advanced VHost configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param VHostConfigAdv $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putVHostConfigAdv($serverName, $vhostName, $body)
    {
        list($response) = $this->putVHostConfigAdvWithHttpInfo($serverName, $vhostName, $body);
        return $response;
    }


    /**
     * Operation putVHostConfigAdvWithHttpInfo
     *
     * Updates the specified advanced VHost configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param VHostConfigAdv $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putVHostConfigAdvWithHttpInfo($serverName, $vhostName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putVHostConfigAdv');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putVHostConfigAdv');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putVHostConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putVHostTuneConfig
     *
     * Updates the Tuning configuration for the specifed vhost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     * @param VHostTuneConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putVHostTuneConfig($serverName, $vhostName, $body)
    {
        list($response) = $this->putVHostTuneConfigWithHttpInfo($serverName, $vhostName, $body);
        return $response;
    }


    /**
     * Operation putVHostTuneConfigWithHttpInfo
     *
     * Updates the Tuning configuration for the specifed vhost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     * @param VHostTuneConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putVHostTuneConfigWithHttpInfo($serverName, $vhostName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putVHostTuneConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putVHostTuneConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putVHostTuneConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/tune";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
}
