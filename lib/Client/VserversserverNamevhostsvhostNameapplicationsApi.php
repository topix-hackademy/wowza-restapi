<?php
/**
 * VserversserverNamevhostsvhostNameapplicationsApi
 * PHP version 5
 *
 * @category Class
 * @package  WowzaApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Topix\Hackademy\WowzaApi\Client;

use Topix\Hackademy\WowzaApi\Configuration;
use Topix\Hackademy\WowzaApi\ApiClient;
use Topix\Hackademy\WowzaApi\ApiException;
use Topix\Hackademy\WowzaApi\Model\ApplicationConfig;
use Topix\Hackademy\WowzaApi\Model\ApplicationConfigAdv;
use Topix\Hackademy\WowzaApi\Model\ApplicationsConfig;
use Topix\Hackademy\WowzaApi\Model\BuyDRMStreamMapsConfig;
use Topix\Hackademy\WowzaApi\Model\CurrentApplicationStatistics;
use Topix\Hackademy\WowzaApi\Model\CurrentIncomingStreamStatistics;
use Topix\Hackademy\WowzaApi\Model\DefaultStreamRecorderConfig;
use Topix\Hackademy\WowzaApi\Model\DRMConfig;
use Topix\Hackademy\WowzaApi\Model\DRMConfigAdv;
use Topix\Hackademy\WowzaApi\Model\DVRConfig;
use Topix\Hackademy\WowzaApi\Model\DVRConfigAdv;
use Topix\Hackademy\WowzaApi\Model\DvrRESTConverterStore;
use Topix\Hackademy\WowzaApi\Model\DvrRESTConverterStores;
use Topix\Hackademy\WowzaApi\Model\HistoricApplicationStatistics;
use Topix\Hackademy\WowzaApi\Model\IncomingStreamConfig;
use Topix\Hackademy\WowzaApi\Model\InstanceConfig;
use Topix\Hackademy\WowzaApi\Model\InstancesConfig;
use Topix\Hackademy\WowzaApi\Model\LiveEncoderConfig;
use Topix\Hackademy\WowzaApi\Model\ModulesConfig;
use Topix\Hackademy\WowzaApi\Model\PublisherAppConfig;
use Topix\Hackademy\WowzaApi\Model\PublishersAppConfig;
use Topix\Hackademy\WowzaApi\Model\PushPublishStreamAppConfig;
use Topix\Hackademy\WowzaApi\Model\PushPublishStreamsAppConfig;
use Topix\Hackademy\WowzaApi\Model\SDPFilesAppConfig;
use Topix\Hackademy\WowzaApi\Model\SecurityConfig;
use Topix\Hackademy\WowzaApi\Model\ShortUrlEncoderConfig;
use Topix\Hackademy\WowzaApi\Model\SMILFileAppConfig;
use Topix\Hackademy\WowzaApi\Model\SMILFilesAppConfig;
use Topix\Hackademy\WowzaApi\Model\SourceControlConfig;
use Topix\Hackademy\WowzaApi\Model\StreamConfigurationConfig;
use Topix\Hackademy\WowzaApi\Model\StreamFileAppConfig;
use Topix\Hackademy\WowzaApi\Model\StreamFileAppConfigAdv;
use Topix\Hackademy\WowzaApi\Model\StreamFilesAppConfig;
use Topix\Hackademy\WowzaApi\Model\StreamGroupConfig;
use Topix\Hackademy\WowzaApi\Model\StreamGroupsConfig;
use Topix\Hackademy\WowzaApi\Model\StreamRecorderConfig;
use Topix\Hackademy\WowzaApi\Model\StreamRecordersConfig;
use Topix\Hackademy\WowzaApi\Model\TranscoderAppConfig;
use Topix\Hackademy\WowzaApi\Model\TranscoderAppConfigAdv;
use Topix\Hackademy\WowzaApi\Model\TranscoderEncodeAppConfig;
use Topix\Hackademy\WowzaApi\Model\TranscoderEncodeAppConfigAdv;
use Topix\Hackademy\WowzaApi\Model\TranscoderEncodesAppConfig;
use Topix\Hackademy\WowzaApi\Model\TranscoderOverlayDecodeAppConfig;
use Topix\Hackademy\WowzaApi\Model\TranscoderOverlayEncodeAppConfig;
use Topix\Hackademy\WowzaApi\Model\TranscoderStreamNameGroupAppConfig;
use Topix\Hackademy\WowzaApi\Model\TranscoderStreamNameGroupsAppConfig;
use Topix\Hackademy\WowzaApi\Model\TranscoderTemplateAppConfig;
use Topix\Hackademy\WowzaApi\Model\TranscoderTemplateAppConfigAdv;
use Topix\Hackademy\WowzaApi\Model\VerimatrixStreamMapsConfig;
use Topix\Hackademy\WowzaApi\ObjectSerializer;

/**
 * VserversserverNamevhostsvhostNameapplicationsApi Class Doc Comment
 *
 * @category Class
 * @package  WowzaApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VserversserverNamevhostsvhostNameapplicationsApi extends SwaggerApi
{

    /**
     * Operation deleteApplicationConfig
     *
     * Deletes the specified Application configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function deleteApplicationConfig($serverName, $vhostName, $appName)
    {
        list($response) = $this->deleteApplicationConfigWithHttpInfo($serverName, $vhostName, $appName);
        return $response;
    }


    /**
     * Operation deleteApplicationConfigWithHttpInfo
     *
     * Deletes the specified Application configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function deleteApplicationConfigWithHttpInfo($serverName, $vhostName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling deleteApplicationConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling deleteApplicationConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling deleteApplicationConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation deletePublisherAppConfig
     *
     * Deletes the specified Publisher configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     * @param string $publisherName The publisher name (required)
     * @param string $appName  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function deletePublisherAppConfig($serverName, $vhostName, $publisherName, $appName)
    {
        list($response) = $this->deletePublisherAppConfigWithHttpInfo($serverName, $vhostName, $publisherName, $appName);
        return $response;
    }


    /**
     * Operation deletePublisherAppConfigWithHttpInfo
     *
     * Deletes the specified Publisher configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     * @param string $publisherName The publisher name (required)
     * @param string $appName  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function deletePublisherAppConfigWithHttpInfo($serverName, $vhostName, $publisherName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling deletePublisherAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling deletePublisherAppConfig');
        }

        // verify the required parameter 'publisherName' is set
        if ($publisherName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $publisherName when calling deletePublisherAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling deletePublisherAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/publishers/{publisherName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($publisherName !== null) {
            $resourcePath = str_replace(
                "{" . "publisherName" . "}",
                $this->apiClient->getSerializer()->toPathValue($publisherName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation deletePushPublishStreamAppConfig
     *
     * Deletes the specified PushPublish map entry configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $entryName The entry name needed for this REST call (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function deletePushPublishStreamAppConfig($serverName, $vhostName, $appName, $entryName)
    {
        list($response) = $this->deletePushPublishStreamAppConfigWithHttpInfo($serverName, $vhostName, $appName, $entryName);
        return $response;
    }


    /**
     * Operation deletePushPublishStreamAppConfigWithHttpInfo
     *
     * Deletes the specified PushPublish map entry configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $entryName The entry name needed for this REST call (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function deletePushPublishStreamAppConfigWithHttpInfo($serverName, $vhostName, $appName, $entryName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling deletePushPublishStreamAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling deletePushPublishStreamAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling deletePushPublishStreamAppConfig');
        }

        // verify the required parameter 'entryName' is set
        if ($entryName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entryName when calling deletePushPublishStreamAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/pushpublish/mapentries/{entryName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($entryName !== null) {
            $resourcePath = str_replace(
                "{" . "entryName" . "}",
                $this->apiClient->getSerializer()->toPathValue($entryName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation deleteSDPFileAppConfig
     *
     * Deletes the specified SDP file.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $sdpfileName The SDP file name without the extension (required)
     * @param string $appName  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function deleteSDPFileAppConfig($serverName, $vhostName, $sdpfileName, $appName)
    {
        list($response) = $this->deleteSDPFileAppConfigWithHttpInfo($serverName, $vhostName, $sdpfileName, $appName);
        return $response;
    }


    /**
     * Operation deleteSDPFileAppConfigWithHttpInfo
     *
     * Deletes the specified SDP file.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $sdpfileName The SDP file name without the extension (required)
     * @param string $appName  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function deleteSDPFileAppConfigWithHttpInfo($serverName, $vhostName, $sdpfileName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling deleteSDPFileAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling deleteSDPFileAppConfig');
        }

        // verify the required parameter 'sdpfileName' is set
        if ($sdpfileName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sdpfileName when calling deleteSDPFileAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling deleteSDPFileAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/sdpfiles/{sdpfileName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($sdpfileName !== null) {
            $resourcePath = str_replace(
                "{" . "sdpfileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($sdpfileName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation deleteSMILFileAppConfig
     *
     * Deletes the specified SMIL File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $smilfileName The SMIL file name without the extension (required)
     * @param string $appName  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function deleteSMILFileAppConfig($serverName, $vhostName, $smilfileName, $appName)
    {
        list($response) = $this->deleteSMILFileAppConfigWithHttpInfo($serverName, $vhostName, $smilfileName, $appName);
        return $response;
    }


    /**
     * Operation deleteSMILFileAppConfigWithHttpInfo
     *
     * Deletes the specified SMIL File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $smilfileName The SMIL file name without the extension (required)
     * @param string $appName  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function deleteSMILFileAppConfigWithHttpInfo($serverName, $vhostName, $smilfileName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling deleteSMILFileAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling deleteSMILFileAppConfig');
        }

        // verify the required parameter 'smilfileName' is set
        if ($smilfileName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $smilfileName when calling deleteSMILFileAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling deleteSMILFileAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/smilfiles/{smilfileName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($smilfileName !== null) {
            $resourcePath = str_replace(
                "{" . "smilfileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($smilfileName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation deleteStreamFileAppConfig
     *
     * Deletes the specified Stream File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $streamfileName The stream file name without the extension (required)
     * @param string $appName  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function deleteStreamFileAppConfig($serverName, $vhostName, $streamfileName, $appName)
    {
        list($response) = $this->deleteStreamFileAppConfigWithHttpInfo($serverName, $vhostName, $streamfileName, $appName);
        return $response;
    }


    /**
     * Operation deleteStreamFileAppConfigWithHttpInfo
     *
     * Deletes the specified Stream File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $streamfileName The stream file name without the extension (required)
     * @param string $appName  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function deleteStreamFileAppConfigWithHttpInfo($serverName, $vhostName, $streamfileName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling deleteStreamFileAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling deleteStreamFileAppConfig');
        }

        // verify the required parameter 'streamfileName' is set
        if ($streamfileName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $streamfileName when calling deleteStreamFileAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling deleteStreamFileAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/streamfiles/{streamfileName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($streamfileName !== null) {
            $resourcePath = str_replace(
                "{" . "streamfileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($streamfileName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation deleteTranscoderEncodeAppConfig
     *
     * Deletes the specified Trancoder Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $encodeName  (required)
     * @param string $appName  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function deleteTranscoderEncodeAppConfig($serverName, $vhostName, $templateName, $encodeName, $appName)
    {
        list($response) = $this->deleteTranscoderEncodeAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $encodeName, $appName);
        return $response;
    }


    /**
     * Operation deleteTranscoderEncodeAppConfigWithHttpInfo
     *
     * Deletes the specified Trancoder Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $encodeName  (required)
     * @param string $appName  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function deleteTranscoderEncodeAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $encodeName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling deleteTranscoderEncodeAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling deleteTranscoderEncodeAppConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling deleteTranscoderEncodeAppConfig');
        }

        // verify the required parameter 'encodeName' is set
        if ($encodeName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $encodeName when calling deleteTranscoderEncodeAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling deleteTranscoderEncodeAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/transcoder/templates/{templateName}/encodes/{encodeName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($encodeName !== null) {
            $resourcePath = str_replace(
                "{" . "encodeName" . "}",
                $this->apiClient->getSerializer()->toPathValue($encodeName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation deleteTranscoderOverlayDecodeAppConfig
     *
     * Deletes the specified Trancoder Overlay Decode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $overlayName  (required)
     * @param string $appName  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function deleteTranscoderOverlayDecodeAppConfig($serverName, $vhostName, $templateName, $overlayName, $appName)
    {
        list($response) = $this->deleteTranscoderOverlayDecodeAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $overlayName, $appName);
        return $response;
    }


    /**
     * Operation deleteTranscoderOverlayDecodeAppConfigWithHttpInfo
     *
     * Deletes the specified Trancoder Overlay Decode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $overlayName  (required)
     * @param string $appName  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function deleteTranscoderOverlayDecodeAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $overlayName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling deleteTranscoderOverlayDecodeAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling deleteTranscoderOverlayDecodeAppConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling deleteTranscoderOverlayDecodeAppConfig');
        }

        // verify the required parameter 'overlayName' is set
        if ($overlayName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $overlayName when calling deleteTranscoderOverlayDecodeAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling deleteTranscoderOverlayDecodeAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/transcoder/templates/{templateName}/decode/overlays/{overlayName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($overlayName !== null) {
            $resourcePath = str_replace(
                "{" . "overlayName" . "}",
                $this->apiClient->getSerializer()->toPathValue($overlayName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation deleteTranscoderOverlayEncodeAppConfig
     *
     * Deletes the specified Trancoder Overlay Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $overlayName  (required)
     * @param string $encodeName  (required)
     * @param string $appName  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function deleteTranscoderOverlayEncodeAppConfig($serverName, $vhostName, $templateName, $overlayName, $encodeName, $appName)
    {
        list($response) = $this->deleteTranscoderOverlayEncodeAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $overlayName, $encodeName, $appName);
        return $response;
    }


    /**
     * Operation deleteTranscoderOverlayEncodeAppConfigWithHttpInfo
     *
     * Deletes the specified Trancoder Overlay Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $overlayName  (required)
     * @param string $encodeName  (required)
     * @param string $appName  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function deleteTranscoderOverlayEncodeAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $overlayName, $encodeName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling deleteTranscoderOverlayEncodeAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling deleteTranscoderOverlayEncodeAppConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling deleteTranscoderOverlayEncodeAppConfig');
        }

        // verify the required parameter 'overlayName' is set
        if ($overlayName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $overlayName when calling deleteTranscoderOverlayEncodeAppConfig');
        }

        // verify the required parameter 'encodeName' is set
        if ($encodeName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $encodeName when calling deleteTranscoderOverlayEncodeAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling deleteTranscoderOverlayEncodeAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/transcoder/templates/{templateName}/encodes/{encodeName}/overlays/{overlayName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($overlayName !== null) {
            $resourcePath = str_replace(
                "{" . "overlayName" . "}",
                $this->apiClient->getSerializer()->toPathValue($overlayName),
                $resourcePath
            );
        }// path params
        if ($encodeName !== null) {
            $resourcePath = str_replace(
                "{" . "encodeName" . "}",
                $this->apiClient->getSerializer()->toPathValue($encodeName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation deleteTranscoderStreamNameGroupAppConfig
     *
     * Deletes the specified Trancoder StreamNameGroup configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $groupName  (required)
     * @param string $appName  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function deleteTranscoderStreamNameGroupAppConfig($serverName, $vhostName, $templateName, $groupName, $appName)
    {
        list($response) = $this->deleteTranscoderStreamNameGroupAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $groupName, $appName);
        return $response;
    }


    /**
     * Operation deleteTranscoderStreamNameGroupAppConfigWithHttpInfo
     *
     * Deletes the specified Trancoder StreamNameGroup configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $groupName  (required)
     * @param string $appName  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function deleteTranscoderStreamNameGroupAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $groupName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling deleteTranscoderStreamNameGroupAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling deleteTranscoderStreamNameGroupAppConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling deleteTranscoderStreamNameGroupAppConfig');
        }

        // verify the required parameter 'groupName' is set
        if ($groupName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $groupName when calling deleteTranscoderStreamNameGroupAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling deleteTranscoderStreamNameGroupAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/transcoder/templates/{templateName}/streamnamegroups/{groupName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($groupName !== null) {
            $resourcePath = str_replace(
                "{" . "groupName" . "}",
                $this->apiClient->getSerializer()->toPathValue($groupName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation deleteTranscoderTemplateAppConfig
     *
     * Deletes the specified Trancoder Template configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $appName  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function deleteTranscoderTemplateAppConfig($serverName, $vhostName, $templateName, $appName)
    {
        list($response) = $this->deleteTranscoderTemplateAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $appName);
        return $response;
    }


    /**
     * Operation deleteTranscoderTemplateAppConfigWithHttpInfo
     *
     * Deletes the specified Trancoder Template configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $appName  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function deleteTranscoderTemplateAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling deleteTranscoderTemplateAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling deleteTranscoderTemplateAppConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling deleteTranscoderTemplateAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling deleteTranscoderTemplateAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/transcoder/templates/{templateName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation getApplicationConfig
     *
     * Retrieves the specified Application configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return  ApplicationConfig
     * @throws ApiException on non-2xx response
     */
    public function getApplicationConfig($serverName, $vhostName, $appName)
    {
        list($response) = $this->getApplicationConfigWithHttpInfo($serverName, $vhostName, $appName);
        return $response;
    }


    /**
     * Operation getApplicationConfigWithHttpInfo
     *
     * Retrieves the specified Application configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\ApplicationConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getApplicationConfigWithHttpInfo($serverName, $vhostName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getApplicationConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getApplicationConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getApplicationConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                ApplicationConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, ApplicationConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), ApplicationConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getApplicationConfigAdv
     *
     * Retrieves the specified advanced Application configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return  ApplicationConfigAdv
     * @throws ApiException on non-2xx response
     */
    public function getApplicationConfigAdv($serverName, $vhostName, $appName)
    {
        list($response) = $this->getApplicationConfigAdvWithHttpInfo($serverName, $vhostName, $appName);
        return $response;
    }


    /**
     * Operation getApplicationConfigAdvWithHttpInfo
     *
     * Retrieves the specified advanced Application configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\ApplicationConfigAdv, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getApplicationConfigAdvWithHttpInfo($serverName, $vhostName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getApplicationConfigAdv');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getApplicationConfigAdv');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getApplicationConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                ApplicationConfigAdv::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, ApplicationConfigAdv::class , $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), ApplicationConfigAdv::class , $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getApplicationsConfig
     *
     * Retrieves the list of Applications for the specifed vhost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     *
     * @return  ApplicationsConfig
     * @throws ApiException on non-2xx response
     */
    public function getApplicationsConfig($serverName, $vhostName)
    {
        list($response) = $this->getApplicationsConfigWithHttpInfo($serverName, $vhostName);
        return $response;
    }


    /**
     * Operation getApplicationsConfigWithHttpInfo
     *
     * Retrieves the list of Applications for the specifed vhost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     *
     * @return Array of \Model\ApplicationsConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getApplicationsConfigWithHttpInfo($serverName, $vhostName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getApplicationsConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getApplicationsConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                ApplicationsConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, ApplicationsConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), ApplicationsConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getBuyDRMStreamMapsConfig
     *
     * Retrieves the BuyDRM stream mapfile for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return  BuyDRMStreamMapsConfig
     * @throws ApiException on non-2xx response
     */
    public function getBuyDRMStreamMapsConfig($serverName, $vhostName, $appName)
    {
        list($response) = $this->getBuyDRMStreamMapsConfigWithHttpInfo($serverName, $vhostName, $appName);
        return $response;
    }


    /**
     * Operation getBuyDRMStreamMapsConfigWithHttpInfo
     *
     * Retrieves the BuyDRM stream mapfile for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\BuyDRMStreamMapsConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getBuyDRMStreamMapsConfigWithHttpInfo($serverName, $vhostName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getBuyDRMStreamMapsConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getBuyDRMStreamMapsConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getBuyDRMStreamMapsConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/drm/buydrmmapfile";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                BuyDRMStreamMapsConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, BuyDRMStreamMapsConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), BuyDRMStreamMapsConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getCurrentApplicationStatistics
     *
     * Retrieves the current Application statistics.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return  CurrentApplicationStatistics
     * @throws ApiException on non-2xx response
     */
    public function getCurrentApplicationStatistics($serverName, $vhostName, $appName)
    {
        list($response) = $this->getCurrentApplicationStatisticsWithHttpInfo($serverName, $vhostName, $appName);
        return $response;
    }


    /**
     * Operation getCurrentApplicationStatisticsWithHttpInfo
     *
     * Retrieves the current Application statistics.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\CurrentApplicationStatistics, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getCurrentApplicationStatisticsWithHttpInfo($serverName, $vhostName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getCurrentApplicationStatistics');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getCurrentApplicationStatistics');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getCurrentApplicationStatistics');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/monitoring/current";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                CurrentApplicationStatistics::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, CurrentApplicationStatistics::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), CurrentApplicationStatistics::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getCurrentIncomingStreamStatistics
     *
     * Retrieves the Current Incoming Stream statistics for the specifed Incoming Stream.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $instanceName  (required)
     * @param string $streamName  (required)
     *
     * @return  CurrentIncomingStreamStatistics
     * @throws ApiException on non-2xx response
     */
    public function getCurrentIncomingStreamStatistics($serverName, $vhostName, $appName, $instanceName, $streamName)
    {
        list($response) = $this->getCurrentIncomingStreamStatisticsWithHttpInfo($serverName, $vhostName, $appName, $instanceName, $streamName);
        return $response;
    }


    /**
     * Operation getCurrentIncomingStreamStatisticsWithHttpInfo
     *
     * Retrieves the Current Incoming Stream statistics for the specifed Incoming Stream.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $instanceName  (required)
     * @param string $streamName  (required)
     *
     * @return Array of \Model\CurrentIncomingStreamStatistics, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getCurrentIncomingStreamStatisticsWithHttpInfo($serverName, $vhostName, $appName, $instanceName, $streamName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getCurrentIncomingStreamStatistics');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getCurrentIncomingStreamStatistics');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getCurrentIncomingStreamStatistics');
        }

        // verify the required parameter 'instanceName' is set
        if ($instanceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instanceName when calling getCurrentIncomingStreamStatistics');
        }

        // verify the required parameter 'streamName' is set
        if ($streamName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $streamName when calling getCurrentIncomingStreamStatistics');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/instances/{instanceName}/incomingstreams/{streamName}/monitoring/current";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($instanceName !== null) {
            $resourcePath = str_replace(
                "{" . "instanceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($instanceName),
                $resourcePath
            );
        }// path params
        if ($streamName !== null) {
            $resourcePath = str_replace(
                "{" . "streamName" . "}",
                $this->apiClient->getSerializer()->toPathValue($streamName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                CurrentIncomingStreamStatistics::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, CurrentIncomingStreamStatistics::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), CurrentIncomingStreamStatistics::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getDRMConfig
     *
     * Retrieves the DRM configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return  DRMConfig
     * @throws ApiException on non-2xx response
     */
    public function getDRMConfig($serverName, $vhostName, $appName)
    {
        list($response) = $this->getDRMConfigWithHttpInfo($serverName, $vhostName, $appName);
        return $response;
    }


    /**
     * Operation getDRMConfigWithHttpInfo
     *
     * Retrieves the DRM configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\DRMConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getDRMConfigWithHttpInfo($serverName, $vhostName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getDRMConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getDRMConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getDRMConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/drm";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                DRMConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, DRMConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), DRMConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getDRMConfigAdv
     *
     * Retrieves the advanced DRM configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return  DRMConfigAdv
     * @throws ApiException on non-2xx response
     */
    public function getDRMConfigAdv($serverName, $vhostName, $appName)
    {
        list($response) = $this->getDRMConfigAdvWithHttpInfo($serverName, $vhostName, $appName);
        return $response;
    }


    /**
     * Operation getDRMConfigAdvWithHttpInfo
     *
     * Retrieves the advanced DRM configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\DRMConfigAdv, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getDRMConfigAdvWithHttpInfo($serverName, $vhostName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getDRMConfigAdv');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getDRMConfigAdv');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getDRMConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/drm/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                DRMConfigAdv::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, DRMConfigAdv::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), DRMConfigAdv::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getDVRConfig
     *
     * Retrieves the DVR configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return  DVRConfig
     * @throws ApiException on non-2xx response
     */
    public function getDVRConfig($serverName, $vhostName, $appName)
    {
        list($response) = $this->getDVRConfigWithHttpInfo($serverName, $vhostName, $appName);
        return $response;
    }


    /**
     * Operation getDVRConfigWithHttpInfo
     *
     * Retrieves the DVR configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\DVRConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getDVRConfigWithHttpInfo($serverName, $vhostName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getDVRConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getDVRConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getDVRConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/dvr";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                DVRConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, DVRConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), DVRConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getDVRConfigAdv
     *
     * Retrieves the advanced DVR configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return  DVRConfigAdv
     * @throws ApiException on non-2xx response
     */
    public function getDVRConfigAdv($serverName, $vhostName, $appName)
    {
        list($response) = $this->getDVRConfigAdvWithHttpInfo($serverName, $vhostName, $appName);
        return $response;
    }


    /**
     * Operation getDVRConfigAdvWithHttpInfo
     *
     * Retrieves the advanced DVR configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\DVRConfigAdv, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getDVRConfigAdvWithHttpInfo($serverName, $vhostName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getDVRConfigAdv');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getDVRConfigAdv');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getDVRConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/dvr/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                DVRConfigAdv::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, DVRConfigAdv::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), DVRConfigAdv::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getDefaultStreamRecorderConfig
     *
     * Retrieves a Stream Recorder of the requested name, popluated with the default values.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $recorderName  (required)
     * @param string $instanceName  (required)
     *
     * @return  DefaultStreamRecorderConfig
     * @throws ApiException on non-2xx response
     */
    public function getDefaultStreamRecorderConfig($serverName, $vhostName, $appName, $recorderName, $instanceName)
    {
        list($response) = $this->getDefaultStreamRecorderConfigWithHttpInfo($serverName, $vhostName, $appName, $recorderName, $instanceName);
        return $response;
    }


    /**
     * Operation getDefaultStreamRecorderConfigWithHttpInfo
     *
     * Retrieves a Stream Recorder of the requested name, popluated with the default values.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $recorderName  (required)
     * @param string $instanceName  (required)
     *
     * @return Array of \Model\DefaultStreamRecorderConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getDefaultStreamRecorderConfigWithHttpInfo($serverName, $vhostName, $appName, $recorderName, $instanceName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getDefaultStreamRecorderConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getDefaultStreamRecorderConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getDefaultStreamRecorderConfig');
        }

        // verify the required parameter 'recorderName' is set
        if ($recorderName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $recorderName when calling getDefaultStreamRecorderConfig');
        }

        // verify the required parameter 'instanceName' is set
        if ($instanceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instanceName when calling getDefaultStreamRecorderConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/instances/{instanceName}/streamrecorders/{recorderName}/default";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($recorderName !== null) {
            $resourcePath = str_replace(
                "{" . "recorderName" . "}",
                $this->apiClient->getSerializer()->toPathValue($recorderName),
                $resourcePath
            );
        }// path params
        if ($instanceName !== null) {
            $resourcePath = str_replace(
                "{" . "instanceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($instanceName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                DefaultStreamRecorderConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, DefaultStreamRecorderConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), DefaultStreamRecorderConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getDvrRESTConverterStore
     *
     * Retrieves the information about a store/converter associated with the application instance.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $instanceName  (required)
     * @param string $dvrStoreName  (required)
     *
     * @return  DvrRESTConverterStore
     * @throws ApiException on non-2xx response
     */
    public function getDvrRESTConverterStore($serverName, $vhostName, $appName, $instanceName, $dvrStoreName)
    {
        list($response) = $this->getDvrRESTConverterStoreWithHttpInfo($serverName, $vhostName, $appName, $instanceName, $dvrStoreName);
        return $response;
    }


    /**
     * Operation getDvrRESTConverterStoreWithHttpInfo
     *
     * Retrieves the information about a store/converter associated with the application instance.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $instanceName  (required)
     * @param string $dvrStoreName  (required)
     *
     * @return Array of \Model\DvrRESTConverterStore, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getDvrRESTConverterStoreWithHttpInfo($serverName, $vhostName, $appName, $instanceName, $dvrStoreName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getDvrRESTConverterStore');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getDvrRESTConverterStore');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getDvrRESTConverterStore');
        }

        // verify the required parameter 'instanceName' is set
        if ($instanceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instanceName when calling getDvrRESTConverterStore');
        }

        // verify the required parameter 'dvrStoreName' is set
        if ($dvrStoreName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dvrStoreName when calling getDvrRESTConverterStore');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/instances/{instanceName}/dvrstores/{dvrStoreName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($instanceName !== null) {
            $resourcePath = str_replace(
                "{" . "instanceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($instanceName),
                $resourcePath
            );
        }// path params
        if ($dvrStoreName !== null) {
            $resourcePath = str_replace(
                "{" . "dvrStoreName" . "}",
                $this->apiClient->getSerializer()->toPathValue($dvrStoreName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                DvrRESTConverterStore::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, DvrRESTConverterStore::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), DvrRESTConverterStore::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getDvrRESTConverterStores
     *
     * Retrieves the list of DVR stores associated with this application instance.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $instanceName  (required)
     *
     * @return  DvrRESTConverterStores
     * @throws ApiException on non-2xx response
     */
    public function getDvrRESTConverterStores($serverName, $vhostName, $appName, $instanceName)
    {
        list($response) = $this->getDvrRESTConverterStoresWithHttpInfo($serverName, $vhostName, $appName, $instanceName);
        return $response;
    }


    /**
     * Operation getDvrRESTConverterStoresWithHttpInfo
     *
     * Retrieves the list of DVR stores associated with this application instance.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $instanceName  (required)
     *
     * @return Array of \Model\DvrRESTConverterStores, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getDvrRESTConverterStoresWithHttpInfo($serverName, $vhostName, $appName, $instanceName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getDvrRESTConverterStores');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getDvrRESTConverterStores');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getDvrRESTConverterStores');
        }

        // verify the required parameter 'instanceName' is set
        if ($instanceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instanceName when calling getDvrRESTConverterStores');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/instances/{instanceName}/dvrstores";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($instanceName !== null) {
            $resourcePath = str_replace(
                "{" . "instanceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($instanceName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                DvrRESTConverterStores::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, DvrRESTConverterStores::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), DvrRESTConverterStores::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getHistoricApplicationStatistics
     *
     * Retrieves the historic Application statistics.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return  HistoricApplicationStatistics
     * @throws ApiException on non-2xx response
     */
    public function getHistoricApplicationStatistics($serverName, $vhostName, $appName)
    {
        list($response) = $this->getHistoricApplicationStatisticsWithHttpInfo($serverName, $vhostName, $appName);
        return $response;
    }


    /**
     * Operation getHistoricApplicationStatisticsWithHttpInfo
     *
     * Retrieves the historic Application statistics.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\HistoricApplicationStatistics, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getHistoricApplicationStatisticsWithHttpInfo($serverName, $vhostName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getHistoricApplicationStatistics');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getHistoricApplicationStatistics');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getHistoricApplicationStatistics');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/monitoring/historic";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                HistoricApplicationStatistics::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, HistoricApplicationStatistics::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), HistoricApplicationStatistics::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getIncomingStreamConfig
     *
     * Retrieves the Incoming Stream information for the specifed Incoming Stream.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $instanceName  (required)
     * @param string $streamName  (required)
     *
     * @return  IncomingStreamConfig
     * @throws ApiException on non-2xx response
     */
    public function getIncomingStreamConfig($serverName, $vhostName, $appName, $instanceName, $streamName)
    {
        list($response) = $this->getIncomingStreamConfigWithHttpInfo($serverName, $vhostName, $appName, $instanceName, $streamName);
        return $response;
    }


    /**
     * Operation getIncomingStreamConfigWithHttpInfo
     *
     * Retrieves the Incoming Stream information for the specifed Incoming Stream.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $instanceName  (required)
     * @param string $streamName  (required)
     *
     * @return Array of \Model\IncomingStreamConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getIncomingStreamConfigWithHttpInfo($serverName, $vhostName, $appName, $instanceName, $streamName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getIncomingStreamConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getIncomingStreamConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getIncomingStreamConfig');
        }

        // verify the required parameter 'instanceName' is set
        if ($instanceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instanceName when calling getIncomingStreamConfig');
        }

        // verify the required parameter 'streamName' is set
        if ($streamName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $streamName when calling getIncomingStreamConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/instances/{instanceName}/incomingstreams/{streamName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($instanceName !== null) {
            $resourcePath = str_replace(
                "{" . "instanceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($instanceName),
                $resourcePath
            );
        }// path params
        if ($streamName !== null) {
            $resourcePath = str_replace(
                "{" . "streamName" . "}",
                $this->apiClient->getSerializer()->toPathValue($streamName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                IncomingStreamConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, IncomingStreamConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), IncomingStreamConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getInstanceConfig
     *
     * Retrieves the specified Application Instance information.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $instanceName  (required)
     *
     * @return  InstanceConfig
     * @throws ApiException on non-2xx response
     */
    public function getInstanceConfig($serverName, $vhostName, $appName, $instanceName)
    {
        list($response) = $this->getInstanceConfigWithHttpInfo($serverName, $vhostName, $appName, $instanceName);
        return $response;
    }


    /**
     * Operation getInstanceConfigWithHttpInfo
     *
     * Retrieves the specified Application Instance information.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $instanceName  (required)
     *
     * @return Array of \Model\InstanceConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getInstanceConfigWithHttpInfo($serverName, $vhostName, $appName, $instanceName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getInstanceConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getInstanceConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getInstanceConfig');
        }

        // verify the required parameter 'instanceName' is set
        if ($instanceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instanceName when calling getInstanceConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/instances/{instanceName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($instanceName !== null) {
            $resourcePath = str_replace(
                "{" . "instanceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($instanceName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                InstanceConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, InstanceConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), InstanceConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getInstancesConfig
     *
     * Retrieves the list of Instances for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return  InstancesConfig
     * @throws ApiException on non-2xx response
     */
    public function getInstancesConfig($serverName, $vhostName, $appName)
    {
        list($response) = $this->getInstancesConfigWithHttpInfo($serverName, $vhostName, $appName);
        return $response;
    }


    /**
     * Operation getInstancesConfigWithHttpInfo
     *
     * Retrieves the list of Instances for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\InstancesConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getInstancesConfigWithHttpInfo($serverName, $vhostName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getInstancesConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getInstancesConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getInstancesConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/instances";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                InstancesConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, InstancesConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), InstancesConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getLiveEncoderConfig
     *
     * Retrieves the LiveEncoder configuration for the specified IncomingStream.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $instanceName  (required)
     * @param string $streamName  (required)
     * @param string $publishUser The publish username to use in the encoder configuration (required)
     * @param string $publishHost The IP address then encoder will publish to (required)
     * @param string $publishPort The Port number the encoder will publish to (required)
     *
     * @return  LiveEncoderConfig
     * @throws ApiException on non-2xx response
     */
    public function getLiveEncoderConfig($serverName, $vhostName, $appName, $instanceName, $streamName, $publishUser, $publishHost, $publishPort)
    {
        list($response) = $this->getLiveEncoderConfigWithHttpInfo($serverName, $vhostName, $appName, $instanceName, $streamName, $publishUser, $publishHost, $publishPort);
        return $response;
    }


    /**
     * Operation getLiveEncoderConfigWithHttpInfo
     *
     * Retrieves the LiveEncoder configuration for the specified IncomingStream.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $instanceName  (required)
     * @param string $streamName  (required)
     * @param string $publishUser The publish username to use in the encoder configuration (required)
     * @param string $publishHost The IP address then encoder will publish to (required)
     * @param string $publishPort The Port number the encoder will publish to (required)
     *
     * @return Array of \Model\LiveEncoderConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getLiveEncoderConfigWithHttpInfo($serverName, $vhostName, $appName, $instanceName, $streamName, $publishUser, $publishHost, $publishPort)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getLiveEncoderConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getLiveEncoderConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getLiveEncoderConfig');
        }

        // verify the required parameter 'instanceName' is set
        if ($instanceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instanceName when calling getLiveEncoderConfig');
        }

        // verify the required parameter 'streamName' is set
        if ($streamName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $streamName when calling getLiveEncoderConfig');
        }

        // verify the required parameter 'publishUser' is set
        if ($publishUser === null) {
            throw new \InvalidArgumentException('Missing the required parameter $publishUser when calling getLiveEncoderConfig');
        }

        // verify the required parameter 'publishHost' is set
        if ($publishHost === null) {
            throw new \InvalidArgumentException('Missing the required parameter $publishHost when calling getLiveEncoderConfig');
        }

        // verify the required parameter 'publishPort' is set
        if ($publishPort === null) {
            throw new \InvalidArgumentException('Missing the required parameter $publishPort when calling getLiveEncoderConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/instances/{instanceName}/incomingstreams/{streamName}/encoder/live";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        // query params
        if ($publishUser !== null) {
            $queryParams['publishUser'] = $this->apiClient->getSerializer()->toQueryValue($publishUser);
        }// query params
        if ($publishHost !== null) {
            $queryParams['publishHost'] = $this->apiClient->getSerializer()->toQueryValue($publishHost);
        }// query params
        if ($publishPort !== null) {
            $queryParams['publishPort'] = $this->apiClient->getSerializer()->toQueryValue($publishPort);
        }
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($instanceName !== null) {
            $resourcePath = str_replace(
                "{" . "instanceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($instanceName),
                $resourcePath
            );
        }// path params
        if ($streamName !== null) {
            $resourcePath = str_replace(
                "{" . "streamName" . "}",
                $this->apiClient->getSerializer()->toPathValue($streamName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                LiveEncoderConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, LiveEncoderConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), LiveEncoderConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getModulesConfig
     *
     * Retrieves the list of Modules for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return  ModulesConfig
     * @throws ApiException on non-2xx response
     */
    public function getModulesConfig($serverName, $vhostName, $appName)
    {
        list($response) = $this->getModulesConfigWithHttpInfo($serverName, $vhostName, $appName);
        return $response;
    }


    /**
     * Operation getModulesConfigWithHttpInfo
     *
     * Retrieves the list of Modules for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\ModulesConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getModulesConfigWithHttpInfo($serverName, $vhostName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getModulesConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getModulesConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getModulesConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/modules";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                ModulesConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, ModulesConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), ModulesConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getPublisherAppConfig
     *
     * Retrieves the specified Publisher configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     * @param string $publisherName The publisher name (required)
     * @param string $appName  (required)
     *
     * @return  PublisherAppConfig
     * @throws ApiException on non-2xx response
     */
    public function getPublisherAppConfig($serverName, $vhostName, $publisherName, $appName)
    {
        list($response) = $this->getPublisherAppConfigWithHttpInfo($serverName, $vhostName, $publisherName, $appName);
        return $response;
    }


    /**
     * Operation getPublisherAppConfigWithHttpInfo
     *
     * Retrieves the specified Publisher configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     * @param string $publisherName The publisher name (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\PublisherAppConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getPublisherAppConfigWithHttpInfo($serverName, $vhostName, $publisherName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getPublisherAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getPublisherAppConfig');
        }

        // verify the required parameter 'publisherName' is set
        if ($publisherName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $publisherName when calling getPublisherAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getPublisherAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/publishers/{publisherName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($publisherName !== null) {
            $resourcePath = str_replace(
                "{" . "publisherName" . "}",
                $this->apiClient->getSerializer()->toPathValue($publisherName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                PublisherAppConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, PublisherAppConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), PublisherAppConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getPublishersAppConfig
     *
     * Retrieves the list of Publishers for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     * @param string $appName  (required)
     *
     * @return  PublishersAppConfig
     * @throws ApiException on non-2xx response
     */
    public function getPublishersAppConfig($serverName, $vhostName, $appName)
    {
        list($response) = $this->getPublishersAppConfigWithHttpInfo($serverName, $vhostName, $appName);
        return $response;
    }


    /**
     * Operation getPublishersAppConfigWithHttpInfo
     *
     * Retrieves the list of Publishers for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\PublishersAppConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getPublishersAppConfigWithHttpInfo($serverName, $vhostName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getPublishersAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getPublishersAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getPublishersAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/publishers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                PublishersAppConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, PublishersAppConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), PublishersAppConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getPushPublishStreamAppConfig
     *
     * Retrieves the PushPublish map entry configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $entryName The entry name needed for this REST call (required)
     *
     * @return  PushPublishStreamAppConfig
     * @throws ApiException on non-2xx response
     */
    public function getPushPublishStreamAppConfig($serverName, $vhostName, $appName, $entryName)
    {
        list($response) = $this->getPushPublishStreamAppConfigWithHttpInfo($serverName, $vhostName, $appName, $entryName);
        return $response;
    }


    /**
     * Operation getPushPublishStreamAppConfigWithHttpInfo
     *
     * Retrieves the PushPublish map entry configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $entryName The entry name needed for this REST call (required)
     *
     * @return Array of \Model\PushPublishStreamAppConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getPushPublishStreamAppConfigWithHttpInfo($serverName, $vhostName, $appName, $entryName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getPushPublishStreamAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getPushPublishStreamAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getPushPublishStreamAppConfig');
        }

        // verify the required parameter 'entryName' is set
        if ($entryName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entryName when calling getPushPublishStreamAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/pushpublish/mapentries/{entryName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($entryName !== null) {
            $resourcePath = str_replace(
                "{" . "entryName" . "}",
                $this->apiClient->getSerializer()->toPathValue($entryName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                PushPublishStreamAppConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, PushPublishStreamAppConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), PushPublishStreamAppConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getPushPublishStreamsAppConfig
     *
     * Retrieves the list of PushPublish Streams for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return  PushPublishStreamsAppConfig
     * @throws ApiException on non-2xx response
     */
    public function getPushPublishStreamsAppConfig($serverName, $vhostName, $appName)
    {
        list($response) = $this->getPushPublishStreamsAppConfigWithHttpInfo($serverName, $vhostName, $appName);
        return $response;
    }


    /**
     * Operation getPushPublishStreamsAppConfigWithHttpInfo
     *
     * Retrieves the list of PushPublish Streams for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\PushPublishStreamsAppConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getPushPublishStreamsAppConfigWithHttpInfo($serverName, $vhostName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getPushPublishStreamsAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getPushPublishStreamsAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getPushPublishStreamsAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/pushpublish/mapentries";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                PushPublishStreamsAppConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, PushPublishStreamsAppConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), PushPublishStreamsAppConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getSDPFilesAppConfig
     *
     * Retrieves the list of SDP Files for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return  SDPFilesAppConfig
     * @throws ApiException on non-2xx response
     */
    public function getSDPFilesAppConfig($serverName, $vhostName, $appName)
    {
        list($response) = $this->getSDPFilesAppConfigWithHttpInfo($serverName, $vhostName, $appName);
        return $response;
    }


    /**
     * Operation getSDPFilesAppConfigWithHttpInfo
     *
     * Retrieves the list of SDP Files for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\SDPFilesAppConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getSDPFilesAppConfigWithHttpInfo($serverName, $vhostName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getSDPFilesAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getSDPFilesAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getSDPFilesAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/sdpfiles";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                SDPFilesAppConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, SDPFilesAppConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), SDPFilesAppConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getSMILFileAppConfig
     *
     * Retrieves the specified SMIL File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $smilfileName The SMIL file name without the extension (required)
     * @param string $appName  (required)
     *
     * @return  SMILFileAppConfig
     * @throws ApiException on non-2xx response
     */
    public function getSMILFileAppConfig($serverName, $vhostName, $smilfileName, $appName)
    {
        list($response) = $this->getSMILFileAppConfigWithHttpInfo($serverName, $vhostName, $smilfileName, $appName);
        return $response;
    }


    /**
     * Operation getSMILFileAppConfigWithHttpInfo
     *
     * Retrieves the specified SMIL File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $smilfileName The SMIL file name without the extension (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\SMILFileAppConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getSMILFileAppConfigWithHttpInfo($serverName, $vhostName, $smilfileName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getSMILFileAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getSMILFileAppConfig');
        }

        // verify the required parameter 'smilfileName' is set
        if ($smilfileName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $smilfileName when calling getSMILFileAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getSMILFileAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/smilfiles/{smilfileName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($smilfileName !== null) {
            $resourcePath = str_replace(
                "{" . "smilfileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($smilfileName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                SMILFileAppConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, SMILFileAppConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), SMILFileAppConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getSMILFilesAppConfig
     *
     * Retrieves the list of SMIL Files for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName The application name needed for this REST call (required)
     *
     * @return  SMILFilesAppConfig
     * @throws ApiException on non-2xx response
     */
    public function getSMILFilesAppConfig($serverName, $vhostName, $appName)
    {
        list($response) = $this->getSMILFilesAppConfigWithHttpInfo($serverName, $vhostName, $appName);
        return $response;
    }


    /**
     * Operation getSMILFilesAppConfigWithHttpInfo
     *
     * Retrieves the list of SMIL Files for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName The application name needed for this REST call (required)
     *
     * @return Array of \Model\SMILFilesAppConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getSMILFilesAppConfigWithHttpInfo($serverName, $vhostName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getSMILFilesAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getSMILFilesAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getSMILFilesAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/smilfiles";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                SMILFilesAppConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, SMILFilesAppConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), SMILFilesAppConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getSecurityConfig
     *
     * Retrieves the Security configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return  SecurityConfig
     * @throws ApiException on non-2xx response
     */
    public function getSecurityConfig($serverName, $vhostName, $appName)
    {
        list($response) = $this->getSecurityConfigWithHttpInfo($serverName, $vhostName, $appName);
        return $response;
    }


    /**
     * Operation getSecurityConfigWithHttpInfo
     *
     * Retrieves the Security configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\SecurityConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getSecurityConfigWithHttpInfo($serverName, $vhostName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getSecurityConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getSecurityConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getSecurityConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/security";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                SecurityConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, SecurityConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), SecurityConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getShortUrlEncoderConfig
     *
     * Retrieves the Short URL for the LiveEncoder configuration for the specified IncomingStream.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $instanceName  (required)
     * @param string $streamName  (required)
     *
     * @return  ShortUrlEncoderConfig
     * @throws ApiException on non-2xx response
     */
    public function getShortUrlEncoderConfig($serverName, $vhostName, $appName, $instanceName, $streamName)
    {
        list($response) = $this->getShortUrlEncoderConfigWithHttpInfo($serverName, $vhostName, $appName, $instanceName, $streamName);
        return $response;
    }


    /**
     * Operation getShortUrlEncoderConfigWithHttpInfo
     *
     * Retrieves the Short URL for the LiveEncoder configuration for the specified IncomingStream.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $instanceName  (required)
     * @param string $streamName  (required)
     *
     * @return Array of \Model\ShortUrlEncoderConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getShortUrlEncoderConfigWithHttpInfo($serverName, $vhostName, $appName, $instanceName, $streamName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getShortUrlEncoderConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getShortUrlEncoderConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getShortUrlEncoderConfig');
        }

        // verify the required parameter 'instanceName' is set
        if ($instanceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instanceName when calling getShortUrlEncoderConfig');
        }

        // verify the required parameter 'streamName' is set
        if ($streamName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $streamName when calling getShortUrlEncoderConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/instances/{instanceName}/incomingstreams/{streamName}/encoder/shorturl";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($instanceName !== null) {
            $resourcePath = str_replace(
                "{" . "instanceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($instanceName),
                $resourcePath
            );
        }// path params
        if ($streamName !== null) {
            $resourcePath = str_replace(
                "{" . "streamName" . "}",
                $this->apiClient->getSerializer()->toPathValue($streamName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                ShortUrlEncoderConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, ShortUrlEncoderConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), ShortUrlEncoderConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getSourceControlConfig
     *
     * Gets information about the Source Control and it's supported features.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $instanceName  (required)
     * @param string $streamName  (required)
     *
     * @return  SourceControlConfig
     * @throws ApiException on non-2xx response
     */
    public function getSourceControlConfig($serverName, $vhostName, $appName, $instanceName, $streamName)
    {
        list($response) = $this->getSourceControlConfigWithHttpInfo($serverName, $vhostName, $appName, $instanceName, $streamName);
        return $response;
    }


    /**
     * Operation getSourceControlConfigWithHttpInfo
     *
     * Gets information about the Source Control and it's supported features.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $instanceName  (required)
     * @param string $streamName  (required)
     *
     * @return Array of \Model\SourceControlConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getSourceControlConfigWithHttpInfo($serverName, $vhostName, $appName, $instanceName, $streamName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getSourceControlConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getSourceControlConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getSourceControlConfig');
        }

        // verify the required parameter 'instanceName' is set
        if ($instanceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instanceName when calling getSourceControlConfig');
        }

        // verify the required parameter 'streamName' is set
        if ($streamName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $streamName when calling getSourceControlConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/instances/{instanceName}/incomingstreams/{streamName}/sourcecontrol";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($instanceName !== null) {
            $resourcePath = str_replace(
                "{" . "instanceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($instanceName),
                $resourcePath
            );
        }// path params
        if ($streamName !== null) {
            $resourcePath = str_replace(
                "{" . "streamName" . "}",
                $this->apiClient->getSerializer()->toPathValue($streamName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                SourceControlConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, SourceControlConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), SourceControlConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getStreamConfigurationConfig
     *
     * Retrieves the Stream configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return  StreamConfigurationConfig
     * @throws ApiException on non-2xx response
     */
    public function getStreamConfigurationConfig($serverName, $vhostName, $appName)
    {
        list($response) = $this->getStreamConfigurationConfigWithHttpInfo($serverName, $vhostName, $appName);
        return $response;
    }


    /**
     * Operation getStreamConfigurationConfigWithHttpInfo
     *
     * Retrieves the Stream configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\StreamConfigurationConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getStreamConfigurationConfigWithHttpInfo($serverName, $vhostName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getStreamConfigurationConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getStreamConfigurationConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getStreamConfigurationConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/streamconfiguration";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                StreamConfigurationConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, StreamConfigurationConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), StreamConfigurationConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getStreamFileAppConfig
     *
     * Retrieves the specified Stream File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $streamfileName The stream file name without the extension (required)
     * @param string $appName  (required)
     *
     * @return  StreamFileAppConfig
     * @throws ApiException on non-2xx response
     */
    public function getStreamFileAppConfig($serverName, $vhostName, $streamfileName, $appName)
    {
        list($response) = $this->getStreamFileAppConfigWithHttpInfo($serverName, $vhostName, $streamfileName, $appName);
        return $response;
    }


    /**
     * Operation getStreamFileAppConfigWithHttpInfo
     *
     * Retrieves the specified Stream File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $streamfileName The stream file name without the extension (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\StreamFileAppConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getStreamFileAppConfigWithHttpInfo($serverName, $vhostName, $streamfileName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getStreamFileAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getStreamFileAppConfig');
        }

        // verify the required parameter 'streamfileName' is set
        if ($streamfileName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $streamfileName when calling getStreamFileAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getStreamFileAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/streamfiles/{streamfileName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($streamfileName !== null) {
            $resourcePath = str_replace(
                "{" . "streamfileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($streamfileName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                StreamFileAppConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, StreamFileAppConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), StreamFileAppConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getStreamFileAppConfigAdv
     *
     * Retrieves the Advanced Stream File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $streamfileName The stream file name without the .stream extension (required)
     * @param string $appName  (required)
     *
     * @return  StreamFileAppConfigAdv
     * @throws ApiException on non-2xx response
     */
    public function getStreamFileAppConfigAdv($serverName, $vhostName, $streamfileName, $appName)
    {
        list($response) = $this->getStreamFileAppConfigAdvWithHttpInfo($serverName, $vhostName, $streamfileName, $appName);
        return $response;
    }


    /**
     * Operation getStreamFileAppConfigAdvWithHttpInfo
     *
     * Retrieves the Advanced Stream File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $streamfileName The stream file name without the .stream extension (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\StreamFileAppConfigAdv, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getStreamFileAppConfigAdvWithHttpInfo($serverName, $vhostName, $streamfileName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getStreamFileAppConfigAdv');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getStreamFileAppConfigAdv');
        }

        // verify the required parameter 'streamfileName' is set
        if ($streamfileName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $streamfileName when calling getStreamFileAppConfigAdv');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getStreamFileAppConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/streamfiles/{streamfileName}/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($streamfileName !== null) {
            $resourcePath = str_replace(
                "{" . "streamfileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($streamfileName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                StreamFileAppConfigAdv::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, StreamFileAppConfigAdv::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), StreamFileAppConfigAdv::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getStreamFilesAppConfig
     *
     * Retrieves the list of Stream Files for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return  StreamFilesAppConfig
     * @throws ApiException on non-2xx response
     */
    public function getStreamFilesAppConfig($serverName, $vhostName, $appName)
    {
        list($response) = $this->getStreamFilesAppConfigWithHttpInfo($serverName, $vhostName, $appName);
        return $response;
    }


    /**
     * Operation getStreamFilesAppConfigWithHttpInfo
     *
     * Retrieves the list of Stream Files for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\StreamFilesAppConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getStreamFilesAppConfigWithHttpInfo($serverName, $vhostName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getStreamFilesAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getStreamFilesAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getStreamFilesAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/streamfiles";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                StreamFilesAppConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, StreamFilesAppConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), StreamFilesAppConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getStreamGroupConfig
     *
     * Retrieves the specified StreamGroup configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $groupName  (required)
     * @param string $instanceName  (required)
     *
     * @return  StreamGroupConfig
     * @throws ApiException on non-2xx response
     */
    public function getStreamGroupConfig($serverName, $vhostName, $appName, $groupName, $instanceName)
    {
        list($response) = $this->getStreamGroupConfigWithHttpInfo($serverName, $vhostName, $appName, $groupName, $instanceName);
        return $response;
    }


    /**
     * Operation getStreamGroupConfigWithHttpInfo
     *
     * Retrieves the specified StreamGroup configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $groupName  (required)
     * @param string $instanceName  (required)
     *
     * @return Array of \Model\StreamGroupConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getStreamGroupConfigWithHttpInfo($serverName, $vhostName, $appName, $groupName, $instanceName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getStreamGroupConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getStreamGroupConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getStreamGroupConfig');
        }

        // verify the required parameter 'groupName' is set
        if ($groupName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $groupName when calling getStreamGroupConfig');
        }

        // verify the required parameter 'instanceName' is set
        if ($instanceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instanceName when calling getStreamGroupConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/instances/{instanceName}/streamgroups/{groupName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($groupName !== null) {
            $resourcePath = str_replace(
                "{" . "groupName" . "}",
                $this->apiClient->getSerializer()->toPathValue($groupName),
                $resourcePath
            );
        }// path params
        if ($instanceName !== null) {
            $resourcePath = str_replace(
                "{" . "instanceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($instanceName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                StreamGroupConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, StreamGroupConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), StreamGroupConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getStreamGroupsConfig
     *
     * Retrieves the list of Stream Groups for the specified Application Instance.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $instanceName  (required)
     *
     * @return  StreamGroupsConfig
     * @throws ApiException on non-2xx response
     */
    public function getStreamGroupsConfig($serverName, $vhostName, $appName, $instanceName)
    {
        list($response) = $this->getStreamGroupsConfigWithHttpInfo($serverName, $vhostName, $appName, $instanceName);
        return $response;
    }


    /**
     * Operation getStreamGroupsConfigWithHttpInfo
     *
     * Retrieves the list of Stream Groups for the specified Application Instance.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $instanceName  (required)
     *
     * @return Array of \Model\StreamGroupsConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getStreamGroupsConfigWithHttpInfo($serverName, $vhostName, $appName, $instanceName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getStreamGroupsConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getStreamGroupsConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getStreamGroupsConfig');
        }

        // verify the required parameter 'instanceName' is set
        if ($instanceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instanceName when calling getStreamGroupsConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/instances/{instanceName}/streamgroups";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($instanceName !== null) {
            $resourcePath = str_replace(
                "{" . "instanceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($instanceName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                StreamGroupsConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, StreamGroupsConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), StreamGroupsConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getStreamRecorderConfig
     *
     * Retrieves the specifed Stream Recorder.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $recorderName  (required)
     * @param string $instanceName  (required)
     *
     * @return  StreamRecorderConfig
     * @throws ApiException on non-2xx response
     */
    public function getStreamRecorderConfig($serverName, $vhostName, $appName, $recorderName, $instanceName)
    {
        list($response) = $this->getStreamRecorderConfigWithHttpInfo($serverName, $vhostName, $appName, $recorderName, $instanceName);
        return $response;
    }


    /**
     * Operation getStreamRecorderConfigWithHttpInfo
     *
     * Retrieves the specifed Stream Recorder.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $recorderName  (required)
     * @param string $instanceName  (required)
     *
     * @return Array of \Model\StreamRecorderConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getStreamRecorderConfigWithHttpInfo($serverName, $vhostName, $appName, $recorderName, $instanceName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getStreamRecorderConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getStreamRecorderConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getStreamRecorderConfig');
        }

        // verify the required parameter 'recorderName' is set
        if ($recorderName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $recorderName when calling getStreamRecorderConfig');
        }

        // verify the required parameter 'instanceName' is set
        if ($instanceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instanceName when calling getStreamRecorderConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/instances/{instanceName}/streamrecorders/{recorderName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($recorderName !== null) {
            $resourcePath = str_replace(
                "{" . "recorderName" . "}",
                $this->apiClient->getSerializer()->toPathValue($recorderName),
                $resourcePath
            );
        }// path params
        if ($instanceName !== null) {
            $resourcePath = str_replace(
                "{" . "instanceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($instanceName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                StreamRecorderConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, StreamRecorderConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), StreamRecorderConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getStreamRecordersConfig
     *
     * Retrieves the list of Stream Recorders for the specified Application Instance.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $instanceName  (required)
     *
     * @return  StreamRecordersConfig
     * @throws ApiException on non-2xx response
     */
    public function getStreamRecordersConfig($serverName, $vhostName, $appName, $instanceName)
    {
        list($response) = $this->getStreamRecordersConfigWithHttpInfo($serverName, $vhostName, $appName, $instanceName);
        return $response;
    }


    /**
     * Operation getStreamRecordersConfigWithHttpInfo
     *
     * Retrieves the list of Stream Recorders for the specified Application Instance.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $instanceName  (required)
     *
     * @return Array of \Model\StreamRecordersConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getStreamRecordersConfigWithHttpInfo($serverName, $vhostName, $appName, $instanceName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getStreamRecordersConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getStreamRecordersConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getStreamRecordersConfig');
        }

        // verify the required parameter 'instanceName' is set
        if ($instanceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instanceName when calling getStreamRecordersConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/instances/{instanceName}/streamrecorders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($instanceName !== null) {
            $resourcePath = str_replace(
                "{" . "instanceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($instanceName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                StreamRecordersConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, StreamRecordersConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), StreamRecordersConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getTranscoderAppConfig
     *
     * Retrieves the Transcoder configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return  TranscoderAppConfig
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderAppConfig($serverName, $vhostName, $appName)
    {
        list($response) = $this->getTranscoderAppConfigWithHttpInfo($serverName, $vhostName, $appName);
        return $response;
    }


    /**
     * Operation getTranscoderAppConfigWithHttpInfo
     *
     * Retrieves the Transcoder configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\TranscoderAppConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderAppConfigWithHttpInfo($serverName, $vhostName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getTranscoderAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getTranscoderAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getTranscoderAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/transcoder";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                TranscoderAppConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, StreamRecordersConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), StreamRecordersConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getTranscoderAppConfigAdv
     *
     * Retrieves the Advanced Transcoder configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return  TranscoderAppConfigAdv
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderAppConfigAdv($serverName, $vhostName, $appName)
    {
        list($response) = $this->getTranscoderAppConfigAdvWithHttpInfo($serverName, $vhostName, $appName);
        return $response;
    }


    /**
     * Operation getTranscoderAppConfigAdvWithHttpInfo
     *
     * Retrieves the Advanced Transcoder configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\TranscoderAppConfigAdv, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderAppConfigAdvWithHttpInfo($serverName, $vhostName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getTranscoderAppConfigAdv');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getTranscoderAppConfigAdv');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getTranscoderAppConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/transcoder/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                TranscoderAppConfigAdv::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, TranscoderAppConfigAdv::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), TranscoderAppConfigAdv::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getTranscoderEncodeAppConfig
     *
     * Retrieves the specified Trancoder Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $encodeName  (required)
     * @param string $appName  (required)
     *
     * @return  TranscoderEncodeAppConfig
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderEncodeAppConfig($serverName, $vhostName, $templateName, $encodeName, $appName)
    {
        list($response) = $this->getTranscoderEncodeAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $encodeName, $appName);
        return $response;
    }


    /**
     * Operation getTranscoderEncodeAppConfigWithHttpInfo
     *
     * Retrieves the specified Trancoder Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $encodeName  (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\TranscoderEncodeAppConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderEncodeAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $encodeName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getTranscoderEncodeAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getTranscoderEncodeAppConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling getTranscoderEncodeAppConfig');
        }

        // verify the required parameter 'encodeName' is set
        if ($encodeName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $encodeName when calling getTranscoderEncodeAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getTranscoderEncodeAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/transcoder/templates/{templateName}/encodes/{encodeName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($encodeName !== null) {
            $resourcePath = str_replace(
                "{" . "encodeName" . "}",
                $this->apiClient->getSerializer()->toPathValue($encodeName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                TranscoderEncodeAppConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, TranscoderEncodeAppConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), TranscoderEncodeAppConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getTranscoderEncodeAppConfigAdv
     *
     * Retrieves the Advanced Transcoder Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $encodeName  (required)
     * @param string $appName  (required)
     *
     * @return  TranscoderEncodeAppConfigAdv
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderEncodeAppConfigAdv($serverName, $vhostName, $templateName, $encodeName, $appName)
    {
        list($response) = $this->getTranscoderEncodeAppConfigAdvWithHttpInfo($serverName, $vhostName, $templateName, $encodeName, $appName);
        return $response;
    }


    /**
     * Operation getTranscoderEncodeAppConfigAdvWithHttpInfo
     *
     * Retrieves the Advanced Transcoder Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $encodeName  (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\TranscoderEncodeAppConfigAdv, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderEncodeAppConfigAdvWithHttpInfo($serverName, $vhostName, $templateName, $encodeName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getTranscoderEncodeAppConfigAdv');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getTranscoderEncodeAppConfigAdv');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling getTranscoderEncodeAppConfigAdv');
        }

        // verify the required parameter 'encodeName' is set
        if ($encodeName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $encodeName when calling getTranscoderEncodeAppConfigAdv');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getTranscoderEncodeAppConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/transcoder/templates/{templateName}/encodes/{encodeName}/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($encodeName !== null) {
            $resourcePath = str_replace(
                "{" . "encodeName" . "}",
                $this->apiClient->getSerializer()->toPathValue($encodeName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                TranscoderEncodeAppConfigAdv::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, TranscoderEncodeAppConfigAdv::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), TranscoderEncodeAppConfigAdv::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getTranscoderEncodesAppConfig
     *
     * Retrieves the list of Transcoder Encode Configurations for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $appName  (required)
     *
     * @return  TranscoderEncodesAppConfig
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderEncodesAppConfig($serverName, $vhostName, $templateName, $appName)
    {
        list($response) = $this->getTranscoderEncodesAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $appName);
        return $response;
    }


    /**
     * Operation getTranscoderEncodesAppConfigWithHttpInfo
     *
     * Retrieves the list of Transcoder Encode Configurations for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\TranscoderEncodesAppConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderEncodesAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getTranscoderEncodesAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getTranscoderEncodesAppConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling getTranscoderEncodesAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getTranscoderEncodesAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/transcoder/templates/{templateName}/encodes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                TranscoderEncodesAppConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, TranscoderEncodesAppConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), TranscoderEncodesAppConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getTranscoderOverlayDecodeAppConfig
     *
     * Retrieves the specified Trancoder Overlay Decode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $overlayName  (required)
     * @param string $appName  (required)
     *
     * @return  TranscoderOverlayDecodeAppConfig
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderOverlayDecodeAppConfig($serverName, $vhostName, $templateName, $overlayName, $appName)
    {
        list($response) = $this->getTranscoderOverlayDecodeAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $overlayName, $appName);
        return $response;
    }


    /**
     * Operation getTranscoderOverlayDecodeAppConfigWithHttpInfo
     *
     * Retrieves the specified Trancoder Overlay Decode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $overlayName  (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\TranscoderOverlayDecodeAppConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderOverlayDecodeAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $overlayName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getTranscoderOverlayDecodeAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getTranscoderOverlayDecodeAppConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling getTranscoderOverlayDecodeAppConfig');
        }

        // verify the required parameter 'overlayName' is set
        if ($overlayName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $overlayName when calling getTranscoderOverlayDecodeAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getTranscoderOverlayDecodeAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/transcoder/templates/{templateName}/decode/overlays/{overlayName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($overlayName !== null) {
            $resourcePath = str_replace(
                "{" . "overlayName" . "}",
                $this->apiClient->getSerializer()->toPathValue($overlayName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                TranscoderOverlayDecodeAppConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, TranscoderOverlayDecodeAppConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), TranscoderOverlayDecodeAppConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getTranscoderOverlayEncodeAppConfig
     *
     * Retrieves the specified Trancoder Overlay Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $overlayName  (required)
     * @param string $encodeName  (required)
     * @param string $appName  (required)
     *
     * @return  TranscoderOverlayEncodeAppConfig
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderOverlayEncodeAppConfig($serverName, $vhostName, $templateName, $overlayName, $encodeName, $appName)
    {
        list($response) = $this->getTranscoderOverlayEncodeAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $overlayName, $encodeName, $appName);
        return $response;
    }


    /**
     * Operation getTranscoderOverlayEncodeAppConfigWithHttpInfo
     *
     * Retrieves the specified Trancoder Overlay Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $overlayName  (required)
     * @param string $encodeName  (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\TranscoderOverlayEncodeAppConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderOverlayEncodeAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $overlayName, $encodeName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getTranscoderOverlayEncodeAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getTranscoderOverlayEncodeAppConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling getTranscoderOverlayEncodeAppConfig');
        }

        // verify the required parameter 'overlayName' is set
        if ($overlayName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $overlayName when calling getTranscoderOverlayEncodeAppConfig');
        }

        // verify the required parameter 'encodeName' is set
        if ($encodeName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $encodeName when calling getTranscoderOverlayEncodeAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getTranscoderOverlayEncodeAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/transcoder/templates/{templateName}/encodes/{encodeName}/overlays/{overlayName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($overlayName !== null) {
            $resourcePath = str_replace(
                "{" . "overlayName" . "}",
                $this->apiClient->getSerializer()->toPathValue($overlayName),
                $resourcePath
            );
        }// path params
        if ($encodeName !== null) {
            $resourcePath = str_replace(
                "{" . "encodeName" . "}",
                $this->apiClient->getSerializer()->toPathValue($encodeName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                TranscoderOverlayEncodeAppConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, TranscoderOverlayEncodeAppConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), TranscoderOverlayEncodeAppConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getTranscoderStreamNameGroupAppConfig
     *
     * Retrieves the specified Trancoder StreamNameGroup configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $groupName  (required)
     * @param string $appName  (required)
     *
     * @return  TranscoderStreamNameGroupAppConfig
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderStreamNameGroupAppConfig($serverName, $vhostName, $templateName, $groupName, $appName)
    {
        list($response) = $this->getTranscoderStreamNameGroupAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $groupName, $appName);
        return $response;
    }


    /**
     * Operation getTranscoderStreamNameGroupAppConfigWithHttpInfo
     *
     * Retrieves the specified Trancoder StreamNameGroup configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $groupName  (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\TranscoderStreamNameGroupAppConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderStreamNameGroupAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $groupName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getTranscoderStreamNameGroupAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getTranscoderStreamNameGroupAppConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling getTranscoderStreamNameGroupAppConfig');
        }

        // verify the required parameter 'groupName' is set
        if ($groupName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $groupName when calling getTranscoderStreamNameGroupAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getTranscoderStreamNameGroupAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/transcoder/templates/{templateName}/streamnamegroups/{groupName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($groupName !== null) {
            $resourcePath = str_replace(
                "{" . "groupName" . "}",
                $this->apiClient->getSerializer()->toPathValue($groupName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                TranscoderStreamNameGroupAppConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, TranscoderStreamNameGroupAppConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), TranscoderStreamNameGroupAppConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getTranscoderStreamNameGroupsAppConfig
     *
     * Retrieves the list of Transcoder Stream Name Groups for the specified Template.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $appName  (required)
     *
     * @return  TranscoderStreamNameGroupsAppConfig
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderStreamNameGroupsAppConfig($serverName, $vhostName, $templateName, $appName)
    {
        list($response) = $this->getTranscoderStreamNameGroupsAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $appName);
        return $response;
    }


    /**
     * Operation getTranscoderStreamNameGroupsAppConfigWithHttpInfo
     *
     * Retrieves the list of Transcoder Stream Name Groups for the specified Template.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\TranscoderStreamNameGroupsAppConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderStreamNameGroupsAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getTranscoderStreamNameGroupsAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getTranscoderStreamNameGroupsAppConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling getTranscoderStreamNameGroupsAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getTranscoderStreamNameGroupsAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/transcoder/templates/{templateName}/streamnamegroups";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                TranscoderStreamNameGroupsAppConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, TranscoderStreamNameGroupsAppConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), TranscoderStreamNameGroupsAppConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getTranscoderTemplateAppConfig
     *
     * Retrieves the specified Trancoder Template configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $appName  (required)
     *
     * @return  TranscoderTemplateAppConfig
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderTemplateAppConfig($serverName, $vhostName, $templateName, $appName)
    {
        list($response) = $this->getTranscoderTemplateAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $appName);
        return $response;
    }


    /**
     * Operation getTranscoderTemplateAppConfigWithHttpInfo
     *
     * Retrieves the specified Trancoder Template configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\TranscoderTemplateAppConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderTemplateAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getTranscoderTemplateAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getTranscoderTemplateAppConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling getTranscoderTemplateAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getTranscoderTemplateAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/transcoder/templates/{templateName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                TranscoderTemplateAppConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, TranscoderTemplateAppConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), TranscoderTemplateAppConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getTranscoderTemplateAppConfigAdv
     *
     * Retrieves the Advanced Transcoder Template configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $appName  (required)
     *
     * @return  TranscoderTemplateAppConfigAdv
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderTemplateAppConfigAdv($serverName, $vhostName, $templateName, $appName)
    {
        list($response) = $this->getTranscoderTemplateAppConfigAdvWithHttpInfo($serverName, $vhostName, $templateName, $appName);
        return $response;
    }


    /**
     * Operation getTranscoderTemplateAppConfigAdvWithHttpInfo
     *
     * Retrieves the Advanced Transcoder Template configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\TranscoderTemplateAppConfigAdv, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderTemplateAppConfigAdvWithHttpInfo($serverName, $vhostName, $templateName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getTranscoderTemplateAppConfigAdv');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getTranscoderTemplateAppConfigAdv');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling getTranscoderTemplateAppConfigAdv');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getTranscoderTemplateAppConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/transcoder/templates/{templateName}/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                TranscoderTemplateAppConfigAdv::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, TranscoderTemplateAppConfigAdv::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), TranscoderTemplateAppConfigAdv::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getTranscoderTemplatesAppConfig
     *
     * Retrieves the list of Transcoder Template Configurations for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName  (required)
     *
     * @return  TranscoderTemplatesAppConfig
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderTemplatesAppConfig($serverName, $vhostName, $appName)
    {
        list($response) = $this->getTranscoderTemplatesAppConfigWithHttpInfo($serverName, $vhostName, $appName);
        return $response;
    }


    /**
     * Operation getTranscoderTemplatesAppConfigWithHttpInfo
     *
     * Retrieves the list of Transcoder Template Configurations for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\TranscoderTemplatesAppConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getTranscoderTemplatesAppConfigWithHttpInfo($serverName, $vhostName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getTranscoderTemplatesAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getTranscoderTemplatesAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getTranscoderTemplatesAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/transcoder/templates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                TranscoderTemplatesAppConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, TranscoderTemplatesAppConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), TranscoderTemplatesAppConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getVerimatrixStreamMapsConfig
     *
     * Retrieves the Verimatrix stream mapfile for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return  VerimatrixStreamMapsConfig
     * @throws ApiException on non-2xx response
     */
    public function getVerimatrixStreamMapsConfig($serverName, $vhostName, $appName)
    {
        list($response) = $this->getVerimatrixStreamMapsConfigWithHttpInfo($serverName, $vhostName, $appName);
        return $response;
    }


    /**
     * Operation getVerimatrixStreamMapsConfigWithHttpInfo
     *
     * Retrieves the Verimatrix stream mapfile for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     *
     * @return Array of \Model\VerimatrixStreamMapsConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getVerimatrixStreamMapsConfigWithHttpInfo($serverName, $vhostName, $appName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getVerimatrixStreamMapsConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling getVerimatrixStreamMapsConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling getVerimatrixStreamMapsConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/drm/verimatrixmapfile";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                VerimatrixStreamMapsConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, VerimatrixStreamMapsConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), VerimatrixStreamMapsConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation postApplicationConfig
     *
     * Adds the specified Application configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param ApplicationConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postApplicationConfig($serverName, $vhostName, $appName, $body)
    {
        list($response) = $this->postApplicationConfigWithHttpInfo($serverName, $vhostName, $appName, $body);
        return $response;
    }


    /**
     * Operation postApplicationConfigWithHttpInfo
     *
     * Adds the specified Application configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param ApplicationConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postApplicationConfigWithHttpInfo($serverName, $vhostName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postApplicationConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling postApplicationConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling postApplicationConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postApplicationConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postApplicationConfigAdv
     *
     * Adds the specified advanced Application configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param ApplicationConfigAdv $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postApplicationConfigAdv($serverName, $vhostName, $appName, $body)
    {
        list($response) = $this->postApplicationConfigAdvWithHttpInfo($serverName, $vhostName, $appName, $body);
        return $response;
    }


    /**
     * Operation postApplicationConfigAdvWithHttpInfo
     *
     * Adds the specified advanced Application configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param ApplicationConfigAdv $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postApplicationConfigAdvWithHttpInfo($serverName, $vhostName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postApplicationConfigAdv');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling postApplicationConfigAdv');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling postApplicationConfigAdv');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postApplicationConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postApplicationsConfig
     *
     * Adds an Application to the list of Applications  for the specifed vhost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param ApplicationConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postApplicationsConfig($serverName, $vhostName, $body)
    {
        list($response) = $this->postApplicationsConfigWithHttpInfo($serverName, $vhostName, $body);
        return $response;
    }


    /**
     * Operation postApplicationsConfigWithHttpInfo
     *
     * Adds an Application to the list of Applications  for the specifed vhost.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param ApplicationConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postApplicationsConfigWithHttpInfo($serverName, $vhostName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postApplicationsConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling postApplicationsConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postApplicationsConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postPublisherAppConfig
     *
     * Adds the specified Publisher configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     * @param string $publisherName The publisher name (required)
     * @param string $appName  (required)
     * @param PublisherAppConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postPublisherAppConfig($serverName, $vhostName, $publisherName, $appName, $body)
    {
        list($response) = $this->postPublisherAppConfigWithHttpInfo($serverName, $vhostName, $publisherName, $appName, $body);
        return $response;
    }


    /**
     * Operation postPublisherAppConfigWithHttpInfo
     *
     * Adds the specified Publisher configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     * @param string $publisherName The publisher name (required)
     * @param string $appName  (required)
     * @param PublisherAppConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postPublisherAppConfigWithHttpInfo($serverName, $vhostName, $publisherName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postPublisherAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling postPublisherAppConfig');
        }

        // verify the required parameter 'publisherName' is set
        if ($publisherName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $publisherName when calling postPublisherAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling postPublisherAppConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postPublisherAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/publishers/{publisherName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($publisherName !== null) {
            $resourcePath = str_replace(
                "{" . "publisherName" . "}",
                $this->apiClient->getSerializer()->toPathValue($publisherName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postPublishersAppConfig
     *
     * Add a Publisher to list of Publishers for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     * @param string $appName  (required)
     * @param PublisherAppConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postPublishersAppConfig($serverName, $vhostName, $appName, $body)
    {
        list($response) = $this->postPublishersAppConfigWithHttpInfo($serverName, $vhostName, $appName, $body);
        return $response;
    }


    /**
     * Operation postPublishersAppConfigWithHttpInfo
     *
     * Add a Publisher to list of Publishers for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     * @param string $appName  (required)
     * @param PublisherAppConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postPublishersAppConfigWithHttpInfo($serverName, $vhostName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postPublishersAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling postPublishersAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling postPublishersAppConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postPublishersAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/publishers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postPushPublishStreamAppConfig
     *
     * Adds the specified PushPublish map entry configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $entryName The entry name needed for this REST call (required)
     * @param PushPublishStreamAppConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postPushPublishStreamAppConfig($serverName, $vhostName, $appName, $entryName, $body)
    {
        list($response) = $this->postPushPublishStreamAppConfigWithHttpInfo($serverName, $vhostName, $appName, $entryName, $body);
        return $response;
    }


    /**
     * Operation postPushPublishStreamAppConfigWithHttpInfo
     *
     * Adds the specified PushPublish map entry configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $entryName The entry name needed for this REST call (required)
     * @param PushPublishStreamAppConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postPushPublishStreamAppConfigWithHttpInfo($serverName, $vhostName, $appName, $entryName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postPushPublishStreamAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling postPushPublishStreamAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling postPushPublishStreamAppConfig');
        }

        // verify the required parameter 'entryName' is set
        if ($entryName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entryName when calling postPushPublishStreamAppConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postPushPublishStreamAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/pushpublish/mapentries/{entryName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($entryName !== null) {
            $resourcePath = str_replace(
                "{" . "entryName" . "}",
                $this->apiClient->getSerializer()->toPathValue($entryName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postPushPublishStreamsAppConfig
     *
     * Adds a PushPublish Stream to list of PushPublish Streams for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param PushPublishStreamAppConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postPushPublishStreamsAppConfig($serverName, $vhostName, $appName, $body)
    {
        list($response) = $this->postPushPublishStreamsAppConfigWithHttpInfo($serverName, $vhostName, $appName, $body);
        return $response;
    }


    /**
     * Operation postPushPublishStreamsAppConfigWithHttpInfo
     *
     * Adds a PushPublish Stream to list of PushPublish Streams for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param PushPublishStreamAppConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postPushPublishStreamsAppConfigWithHttpInfo($serverName, $vhostName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postPushPublishStreamsAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling postPushPublishStreamsAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling postPushPublishStreamsAppConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postPushPublishStreamsAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/pushpublish/mapentries";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postSMILFileAppConfig
     *
     * Adds the specified SMIL File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $smilfileName The SMIL file name without the extension (required)
     * @param string $appName  (required)
     * @param SMILFileAppConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postSMILFileAppConfig($serverName, $vhostName, $smilfileName, $appName, $body)
    {
        list($response) = $this->postSMILFileAppConfigWithHttpInfo($serverName, $vhostName, $smilfileName, $appName, $body);
        return $response;
    }


    /**
     * Operation postSMILFileAppConfigWithHttpInfo
     *
     * Adds the specified SMIL File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $smilfileName The SMIL file name without the extension (required)
     * @param string $appName  (required)
     * @param SMILFileAppConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postSMILFileAppConfigWithHttpInfo($serverName, $vhostName, $smilfileName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postSMILFileAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling postSMILFileAppConfig');
        }

        // verify the required parameter 'smilfileName' is set
        if ($smilfileName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $smilfileName when calling postSMILFileAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling postSMILFileAppConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postSMILFileAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/smilfiles/{smilfileName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($smilfileName !== null) {
            $resourcePath = str_replace(
                "{" . "smilfileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($smilfileName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postSMILFilesAppConfig
     *
     * Adds a SMIL File to the list of SMIL Files for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName The application name needed for this REST call (required)
     * @param SMILFileAppConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postSMILFilesAppConfig($serverName, $vhostName, $appName, $body)
    {
        list($response) = $this->postSMILFilesAppConfigWithHttpInfo($serverName, $vhostName, $appName, $body);
        return $response;
    }


    /**
     * Operation postSMILFilesAppConfigWithHttpInfo
     *
     * Adds a SMIL File to the list of SMIL Files for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName The application name needed for this REST call (required)
     * @param SMILFileAppConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postSMILFilesAppConfigWithHttpInfo($serverName, $vhostName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postSMILFilesAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling postSMILFilesAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling postSMILFilesAppConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postSMILFilesAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/smilfiles";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postStreamFileAppConfig
     *
     * Adds the specified Stream File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $streamfileName The stream file name without the extension (required)
     * @param string $appName  (required)
     * @param StreamFileAppConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postStreamFileAppConfig($serverName, $vhostName, $streamfileName, $appName, $body)
    {
        list($response) = $this->postStreamFileAppConfigWithHttpInfo($serverName, $vhostName, $streamfileName, $appName, $body);
        return $response;
    }


    /**
     * Operation postStreamFileAppConfigWithHttpInfo
     *
     * Adds the specified Stream File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $streamfileName The stream file name without the extension (required)
     * @param string $appName  (required)
     * @param StreamFileAppConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postStreamFileAppConfigWithHttpInfo($serverName, $vhostName, $streamfileName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postStreamFileAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling postStreamFileAppConfig');
        }

        // verify the required parameter 'streamfileName' is set
        if ($streamfileName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $streamfileName when calling postStreamFileAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling postStreamFileAppConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postStreamFileAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/streamfiles/{streamfileName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($streamfileName !== null) {
            $resourcePath = str_replace(
                "{" . "streamfileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($streamfileName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postStreamFilesAppConfig
     *
     * Adds a Stream File to the list of Stream Files for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param StreamFileAppConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postStreamFilesAppConfig($serverName, $vhostName, $appName, $body)
    {
        list($response) = $this->postStreamFilesAppConfigWithHttpInfo($serverName, $vhostName, $appName, $body);
        return $response;
    }


    /**
     * Operation postStreamFilesAppConfigWithHttpInfo
     *
     * Adds a Stream File to the list of Stream Files for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param StreamFileAppConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postStreamFilesAppConfigWithHttpInfo($serverName, $vhostName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postStreamFilesAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling postStreamFilesAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling postStreamFilesAppConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postStreamFilesAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/streamfiles";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postStreamRecorderConfig
     *
     * Creates a new Stream Recorder and starts recording.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $recorderName  (required)
     * @param string $instanceName  (required)
     * @param StreamRecorderConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postStreamRecorderConfig($serverName, $vhostName, $appName, $recorderName, $instanceName, $body)
    {
        list($response) = $this->postStreamRecorderConfigWithHttpInfo($serverName, $vhostName, $appName, $recorderName, $instanceName, $body);
        return $response;
    }


    /**
     * Operation postStreamRecorderConfigWithHttpInfo
     *
     * Creates a new Stream Recorder and starts recording.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $recorderName  (required)
     * @param string $instanceName  (required)
     * @param StreamRecorderConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postStreamRecorderConfigWithHttpInfo($serverName, $vhostName, $appName, $recorderName, $instanceName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postStreamRecorderConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling postStreamRecorderConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling postStreamRecorderConfig');
        }

        // verify the required parameter 'recorderName' is set
        if ($recorderName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $recorderName when calling postStreamRecorderConfig');
        }

        // verify the required parameter 'instanceName' is set
        if ($instanceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instanceName when calling postStreamRecorderConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postStreamRecorderConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/instances/{instanceName}/streamrecorders/{recorderName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($recorderName !== null) {
            $resourcePath = str_replace(
                "{" . "recorderName" . "}",
                $this->apiClient->getSerializer()->toPathValue($recorderName),
                $resourcePath
            );
        }// path params
        if ($instanceName !== null) {
            $resourcePath = str_replace(
                "{" . "instanceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($instanceName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postStreamRecordersConfig
     *
     * Creates a new Stream Recorder in the specified Application Instance and starts recording.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $instanceName  (required)
     * @param StreamRecorderConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postStreamRecordersConfig($serverName, $vhostName, $appName, $instanceName, $body)
    {
        list($response) = $this->postStreamRecordersConfigWithHttpInfo($serverName, $vhostName, $appName, $instanceName, $body);
        return $response;
    }


    /**
     * Operation postStreamRecordersConfigWithHttpInfo
     *
     * Creates a new Stream Recorder in the specified Application Instance and starts recording.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $instanceName  (required)
     * @param StreamRecorderConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postStreamRecordersConfigWithHttpInfo($serverName, $vhostName, $appName, $instanceName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postStreamRecordersConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling postStreamRecordersConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling postStreamRecordersConfig');
        }

        // verify the required parameter 'instanceName' is set
        if ($instanceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instanceName when calling postStreamRecordersConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postStreamRecordersConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/instances/{instanceName}/streamrecorders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($instanceName !== null) {
            $resourcePath = str_replace(
                "{" . "instanceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($instanceName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postTranscoderEncodeAppConfig
     *
     * Adds the specified Trancoder Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $encodeName  (required)
     * @param string $appName  (required)
     * @param TranscoderEncodeAppConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postTranscoderEncodeAppConfig($serverName, $vhostName, $templateName, $encodeName, $appName, $body)
    {
        list($response) = $this->postTranscoderEncodeAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $encodeName, $appName, $body);
        return $response;
    }


    /**
     * Operation postTranscoderEncodeAppConfigWithHttpInfo
     *
     * Adds the specified Trancoder Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $encodeName  (required)
     * @param string $appName  (required)
     * @param TranscoderEncodeAppConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postTranscoderEncodeAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $encodeName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postTranscoderEncodeAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling postTranscoderEncodeAppConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling postTranscoderEncodeAppConfig');
        }

        // verify the required parameter 'encodeName' is set
        if ($encodeName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $encodeName when calling postTranscoderEncodeAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling postTranscoderEncodeAppConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postTranscoderEncodeAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/transcoder/templates/{templateName}/encodes/{encodeName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($encodeName !== null) {
            $resourcePath = str_replace(
                "{" . "encodeName" . "}",
                $this->apiClient->getSerializer()->toPathValue($encodeName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postTranscoderEncodesAppConfig
     *
     * Adds a Transcoder Encode Configuration to the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $appName  (required)
     * @param TranscoderEncodeAppConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postTranscoderEncodesAppConfig($serverName, $vhostName, $templateName, $appName, $body)
    {
        list($response) = $this->postTranscoderEncodesAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $appName, $body);
        return $response;
    }


    /**
     * Operation postTranscoderEncodesAppConfigWithHttpInfo
     *
     * Adds a Transcoder Encode Configuration to the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $appName  (required)
     * @param TranscoderEncodeAppConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postTranscoderEncodesAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postTranscoderEncodesAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling postTranscoderEncodesAppConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling postTranscoderEncodesAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling postTranscoderEncodesAppConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postTranscoderEncodesAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/transcoder/templates/{templateName}/encodes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postTranscoderStreamNameGroupAppConfig
     *
     * Adds the specified Trancoder StreamNameGroup configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $groupName  (required)
     * @param string $appName  (required)
     * @param TranscoderStreamNameGroupAppConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postTranscoderStreamNameGroupAppConfig($serverName, $vhostName, $templateName, $groupName, $appName, $body)
    {
        list($response) = $this->postTranscoderStreamNameGroupAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $groupName, $appName, $body);
        return $response;
    }


    /**
     * Operation postTranscoderStreamNameGroupAppConfigWithHttpInfo
     *
     * Adds the specified Trancoder StreamNameGroup configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $groupName  (required)
     * @param string $appName  (required)
     * @param TranscoderStreamNameGroupAppConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postTranscoderStreamNameGroupAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $groupName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postTranscoderStreamNameGroupAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling postTranscoderStreamNameGroupAppConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling postTranscoderStreamNameGroupAppConfig');
        }

        // verify the required parameter 'groupName' is set
        if ($groupName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $groupName when calling postTranscoderStreamNameGroupAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling postTranscoderStreamNameGroupAppConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postTranscoderStreamNameGroupAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/transcoder/templates/{templateName}/streamnamegroups/{groupName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($groupName !== null) {
            $resourcePath = str_replace(
                "{" . "groupName" . "}",
                $this->apiClient->getSerializer()->toPathValue($groupName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postTranscoderStreamNameGroupsAppConfig
     *
     * Adds a Transcoder Stream Name Groups Configuration to the specified Template.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $appName  (required)
     * @param TranscoderStreamNameGroupAppConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postTranscoderStreamNameGroupsAppConfig($serverName, $vhostName, $templateName, $appName, $body)
    {
        list($response) = $this->postTranscoderStreamNameGroupsAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $appName, $body);
        return $response;
    }


    /**
     * Operation postTranscoderStreamNameGroupsAppConfigWithHttpInfo
     *
     * Adds a Transcoder Stream Name Groups Configuration to the specified Template.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $appName  (required)
     * @param TranscoderStreamNameGroupAppConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postTranscoderStreamNameGroupsAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postTranscoderStreamNameGroupsAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling postTranscoderStreamNameGroupsAppConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling postTranscoderStreamNameGroupsAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling postTranscoderStreamNameGroupsAppConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postTranscoderStreamNameGroupsAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/transcoder/templates/{templateName}/streamnamegroups";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postTranscoderTemplateAppConfig
     *
     * Adds the specified Trancoder Template configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $appName  (required)
     * @param TranscoderTemplateAppConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postTranscoderTemplateAppConfig($serverName, $vhostName, $templateName, $appName, $body)
    {
        list($response) = $this->postTranscoderTemplateAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $appName, $body);
        return $response;
    }


    /**
     * Operation postTranscoderTemplateAppConfigWithHttpInfo
     *
     * Adds the specified Trancoder Template configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $appName  (required)
     * @param TranscoderTemplateAppConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postTranscoderTemplateAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postTranscoderTemplateAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling postTranscoderTemplateAppConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling postTranscoderTemplateAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling postTranscoderTemplateAppConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postTranscoderTemplateAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/transcoder/templates/{templateName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postTranscoderTemplatesAppConfig
     *
     * Adds a Transcoder Templates Configuration to the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName  (required)
     * @param TranscoderTemplateAppConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postTranscoderTemplatesAppConfig($serverName, $vhostName, $appName, $body)
    {
        list($response) = $this->postTranscoderTemplatesAppConfigWithHttpInfo($serverName, $vhostName, $appName, $body);
        return $response;
    }


    /**
     * Operation postTranscoderTemplatesAppConfigWithHttpInfo
     *
     * Adds a Transcoder Templates Configuration to the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName  (required)
     * @param TranscoderTemplateAppConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postTranscoderTemplatesAppConfigWithHttpInfo($serverName, $vhostName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postTranscoderTemplatesAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling postTranscoderTemplatesAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling postTranscoderTemplatesAppConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postTranscoderTemplatesAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/transcoder/templates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putApplicationAction
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName The application name needed for this REST call (required)
     * @param string $dstEntryName The destination application name when copying (optional)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putApplicationAction($serverName, $action, $vhostName, $appName, $dstEntryName = null)
    {
        list($response) = $this->putApplicationActionWithHttpInfo($serverName, $action, $vhostName, $appName, $dstEntryName);
        return $response;
    }


    /**
     * Operation putApplicationActionWithHttpInfo
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName The application name needed for this REST call (required)
     * @param string $dstEntryName The destination application name when copying (optional)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putApplicationActionWithHttpInfo($serverName, $action, $vhostName, $appName, $dstEntryName = null)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putApplicationAction');
        }

        // verify the required parameter 'action' is set
        if ($action === null) {
            throw new \InvalidArgumentException('Missing the required parameter $action when calling putApplicationAction');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putApplicationAction');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putApplicationAction');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/actions/{action}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        // query params
        if ($dstEntryName !== null) {
            $queryParams['dstEntryName'] = $this->apiClient->getSerializer()->toQueryValue($dstEntryName);
        }
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($action !== null) {
            $resourcePath = str_replace(
                "{" . "action" . "}",
                $this->apiClient->getSerializer()->toPathValue($action),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putApplicationConfig
     *
     * Updates the specified Application configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param ApplicationConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putApplicationConfig($serverName, $vhostName, $appName, $body)
    {
        list($response) = $this->putApplicationConfigWithHttpInfo($serverName, $vhostName, $appName, $body);
        return $response;
    }


    /**
     * Operation putApplicationConfigWithHttpInfo
     *
     * Updates the specified Application configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param ApplicationConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putApplicationConfigWithHttpInfo($serverName, $vhostName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putApplicationConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putApplicationConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putApplicationConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putApplicationConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putApplicationConfigAdv
     *
     * Updates the specified advanced Application configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param ApplicationConfigAdv $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putApplicationConfigAdv($serverName, $vhostName, $appName, $body)
    {
        list($response) = $this->putApplicationConfigAdvWithHttpInfo($serverName, $vhostName, $appName, $body);
        return $response;
    }


    /**
     * Operation putApplicationConfigAdvWithHttpInfo
     *
     * Updates the specified advanced Application configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param ApplicationConfigAdv $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putApplicationConfigAdvWithHttpInfo($serverName, $vhostName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putApplicationConfigAdv');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putApplicationConfigAdv');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putApplicationConfigAdv');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putApplicationConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putBuyDRMStreamMapsConfig
     *
     * Updates the BuyDRM stream mapfile for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param BuyDRMStreamMapsConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putBuyDRMStreamMapsConfig($serverName, $vhostName, $appName, $body)
    {
        list($response) = $this->putBuyDRMStreamMapsConfigWithHttpInfo($serverName, $vhostName, $appName, $body);
        return $response;
    }


    /**
     * Operation putBuyDRMStreamMapsConfigWithHttpInfo
     *
     * Updates the BuyDRM stream mapfile for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param BuyDRMStreamMapsConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putBuyDRMStreamMapsConfigWithHttpInfo($serverName, $vhostName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putBuyDRMStreamMapsConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putBuyDRMStreamMapsConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putBuyDRMStreamMapsConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putBuyDRMStreamMapsConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/drm/buydrmmapfile";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putDRMConfig
     *
     * Updates the DRM configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param DRMConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putDRMConfig($serverName, $vhostName, $appName, $body)
    {
        list($response) = $this->putDRMConfigWithHttpInfo($serverName, $vhostName, $appName, $body);
        return $response;
    }


    /**
     * Operation putDRMConfigWithHttpInfo
     *
     * Updates the DRM configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param DRMConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putDRMConfigWithHttpInfo($serverName, $vhostName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putDRMConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putDRMConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putDRMConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putDRMConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/drm";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putDRMConfigAdv
     *
     * Updates the advanced DRM configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param DRMConfigAdv $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putDRMConfigAdv($serverName, $vhostName, $appName, $body)
    {
        list($response) = $this->putDRMConfigAdvWithHttpInfo($serverName, $vhostName, $appName, $body);
        return $response;
    }


    /**
     * Operation putDRMConfigAdvWithHttpInfo
     *
     * Updates the advanced DRM configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param DRMConfigAdv $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putDRMConfigAdvWithHttpInfo($serverName, $vhostName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putDRMConfigAdv');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putDRMConfigAdv');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putDRMConfigAdv');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putDRMConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/drm/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putDVRConfig
     *
     * Updates the DVR configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param DVRConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putDVRConfig($serverName, $vhostName, $appName, $body)
    {
        list($response) = $this->putDVRConfigWithHttpInfo($serverName, $vhostName, $appName, $body);
        return $response;
    }


    /**
     * Operation putDVRConfigWithHttpInfo
     *
     * Updates the DVR configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param DVRConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putDVRConfigWithHttpInfo($serverName, $vhostName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putDVRConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putDVRConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putDVRConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putDVRConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/dvr";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putDVRConfigAdv
     *
     * Updates the advanced DVR configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param DVRConfigAdv $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putDVRConfigAdv($serverName, $vhostName, $appName, $body)
    {
        list($response) = $this->putDVRConfigAdvWithHttpInfo($serverName, $vhostName, $appName, $body);
        return $response;
    }


    /**
     * Operation putDVRConfigAdvWithHttpInfo
     *
     * Updates the advanced DVR configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param DVRConfigAdv $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putDVRConfigAdvWithHttpInfo($serverName, $vhostName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putDVRConfigAdv');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putDVRConfigAdv');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putDVRConfigAdv');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putDVRConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/dvr/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putDvrRESTConverterStoreAction
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName The application name needed for this REST call (required)
     * @param string $instanceName The application instance name needed for this REST call (required)
     * @param string $dvrStoreName The nDVR store name needed for this REST call (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putDvrRESTConverterStoreAction($serverName, $action, $vhostName, $appName, $instanceName, $dvrStoreName)
    {
        list($response) = $this->putDvrRESTConverterStoreActionWithHttpInfo($serverName, $action, $vhostName, $appName, $instanceName, $dvrStoreName);
        return $response;
    }


    /**
     * Operation putDvrRESTConverterStoreActionWithHttpInfo
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName The application name needed for this REST call (required)
     * @param string $instanceName The application instance name needed for this REST call (required)
     * @param string $dvrStoreName The nDVR store name needed for this REST call (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putDvrRESTConverterStoreActionWithHttpInfo($serverName, $action, $vhostName, $appName, $instanceName, $dvrStoreName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putDvrRESTConverterStoreAction');
        }

        // verify the required parameter 'action' is set
        if ($action === null) {
            throw new \InvalidArgumentException('Missing the required parameter $action when calling putDvrRESTConverterStoreAction');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putDvrRESTConverterStoreAction');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putDvrRESTConverterStoreAction');
        }

        // verify the required parameter 'instanceName' is set
        if ($instanceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instanceName when calling putDvrRESTConverterStoreAction');
        }

        // verify the required parameter 'dvrStoreName' is set
        if ($dvrStoreName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dvrStoreName when calling putDvrRESTConverterStoreAction');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/instances/{instanceName}/dvrstores/{dvrStoreName}/actions/{action}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($action !== null) {
            $resourcePath = str_replace(
                "{" . "action" . "}",
                $this->apiClient->getSerializer()->toPathValue($action),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($instanceName !== null) {
            $resourcePath = str_replace(
                "{" . "instanceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($instanceName),
                $resourcePath
            );
        }// path params
        if ($dvrStoreName !== null) {
            $resourcePath = str_replace(
                "{" . "dvrStoreName" . "}",
                $this->apiClient->getSerializer()->toPathValue($dvrStoreName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putDvrRESTConverterStoresAction
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName The application name needed for this REST call (required)
     * @param string $instanceName The application instance name needed for this REST call (required)
     * @param string $dvrConverterDefaultFileDestination The file location to use when converting a nDVR store, the default is configured as the StorageDir in the application in use (optional)
     * @param string $dvrConverterDebugConversions Indicates if the conversion should have debugging enabled, can be true or false, default is false (optional)
     * @param string $dvrConverterContinueOnSourceErrors Indicates if the conversion should continue even if errors are detected, can be true or false, default is true (optional)
     * @param string $dvrConverterAudioVideoSyncEnable Indicates if the audio/video offset should be detected and conversion only started after the sync in no longer detected or over default allowable time. Can be true or false, default is false (optional)
     * @param string $dvrConverterAudioVideoMaxOffset Indicates the maximum audio/video timecodes can be out of sync (optional, default to 200)
     * @param string $dvrConverterAudioVideoMaxBuffer Indicates the maximum time a correct audio/video sync will be searched for before giving up (optional, default to 8000)
     * @param string $dvrConverterStartTime A start time in UTC from where the conversion should start in the store, default is the first entry in the store (optional)
     * @param string $dvrConverterEndTime A end time in UTC  where the conversion should end in the store, default is to the end of the store (optional)
     * @param string $dvrConverterDuration A duration for the conversion either added to the start or subtracted from the end time, if you use duration you can not use start and end (optional)
     * @param string $dvrConverterOutputFilename Indicates the output filename if not using the default, which is the name of the store being converted (optional)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putDvrRESTConverterStoresAction($serverName, $action, $vhostName, $appName, $instanceName, $dvrConverterDefaultFileDestination = null, $dvrConverterDebugConversions = null, $dvrConverterContinueOnSourceErrors = null, $dvrConverterAudioVideoSyncEnable = null, $dvrConverterAudioVideoMaxOffset = null, $dvrConverterAudioVideoMaxBuffer = null, $dvrConverterStartTime = null, $dvrConverterEndTime = null, $dvrConverterDuration = null, $dvrConverterOutputFilename = null)
    {
        list($response) = $this->putDvrRESTConverterStoresActionWithHttpInfo($serverName, $action, $vhostName, $appName, $instanceName, $dvrConverterDefaultFileDestination, $dvrConverterDebugConversions, $dvrConverterContinueOnSourceErrors, $dvrConverterAudioVideoSyncEnable, $dvrConverterAudioVideoMaxOffset, $dvrConverterAudioVideoMaxBuffer, $dvrConverterStartTime, $dvrConverterEndTime, $dvrConverterDuration, $dvrConverterOutputFilename);
        return $response;
    }


    /**
     * Operation putDvrRESTConverterStoresActionWithHttpInfo
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName The application name needed for this REST call (required)
     * @param string $instanceName The application instance name needed for this REST call (required)
     * @param string $dvrConverterDefaultFileDestination The file location to use when converting a nDVR store, the default is configured as the StorageDir in the application in use (optional)
     * @param string $dvrConverterDebugConversions Indicates if the conversion should have debugging enabled, can be true or false, default is false (optional)
     * @param string $dvrConverterContinueOnSourceErrors Indicates if the conversion should continue even if errors are detected, can be true or false, default is true (optional)
     * @param string $dvrConverterAudioVideoSyncEnable Indicates if the audio/video offset should be detected and conversion only started after the sync in no longer detected or over default allowable time. Can be true or false, default is false (optional)
     * @param string $dvrConverterAudioVideoMaxOffset Indicates the maximum audio/video timecodes can be out of sync (optional, default to 200)
     * @param string $dvrConverterAudioVideoMaxBuffer Indicates the maximum time a correct audio/video sync will be searched for before giving up (optional, default to 8000)
     * @param string $dvrConverterStartTime A start time in UTC from where the conversion should start in the store, default is the first entry in the store (optional)
     * @param string $dvrConverterEndTime A end time in UTC  where the conversion should end in the store, default is to the end of the store (optional)
     * @param string $dvrConverterDuration A duration for the conversion either added to the start or subtracted from the end time, if you use duration you can not use start and end (optional)
     * @param string $dvrConverterOutputFilename Indicates the output filename if not using the default, which is the name of the store being converted (optional)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putDvrRESTConverterStoresActionWithHttpInfo($serverName, $action, $vhostName, $appName, $instanceName, $dvrConverterDefaultFileDestination = null, $dvrConverterDebugConversions = null, $dvrConverterContinueOnSourceErrors = null, $dvrConverterAudioVideoSyncEnable = null, $dvrConverterAudioVideoMaxOffset = null, $dvrConverterAudioVideoMaxBuffer = null, $dvrConverterStartTime = null, $dvrConverterEndTime = null, $dvrConverterDuration = null, $dvrConverterOutputFilename = null)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putDvrRESTConverterStoresAction');
        }

        // verify the required parameter 'action' is set
        if ($action === null) {
            throw new \InvalidArgumentException('Missing the required parameter $action when calling putDvrRESTConverterStoresAction');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putDvrRESTConverterStoresAction');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putDvrRESTConverterStoresAction');
        }

        // verify the required parameter 'instanceName' is set
        if ($instanceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instanceName when calling putDvrRESTConverterStoresAction');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/instances/{instanceName}/dvrstores/actions/{action}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        // query params
        if ($dvrConverterDefaultFileDestination !== null) {
            $queryParams['dvrConverterDefaultFileDestination'] = $this->apiClient->getSerializer()->toQueryValue($dvrConverterDefaultFileDestination);
        }// query params
        if ($dvrConverterDebugConversions !== null) {
            $queryParams['dvrConverterDebugConversions'] = $this->apiClient->getSerializer()->toQueryValue($dvrConverterDebugConversions);
        }// query params
        if ($dvrConverterContinueOnSourceErrors !== null) {
            $queryParams['dvrConverterContinueOnSourceErrors'] = $this->apiClient->getSerializer()->toQueryValue($dvrConverterContinueOnSourceErrors);
        }// query params
        if ($dvrConverterAudioVideoSyncEnable !== null) {
            $queryParams['dvrConverterAudioVideoSyncEnable'] = $this->apiClient->getSerializer()->toQueryValue($dvrConverterAudioVideoSyncEnable);
        }// query params
        if ($dvrConverterAudioVideoMaxOffset !== null) {
            $queryParams['dvrConverterAudioVideoMaxOffset'] = $this->apiClient->getSerializer()->toQueryValue($dvrConverterAudioVideoMaxOffset);
        }// query params
        if ($dvrConverterAudioVideoMaxBuffer !== null) {
            $queryParams['dvrConverterAudioVideoMaxBuffer'] = $this->apiClient->getSerializer()->toQueryValue($dvrConverterAudioVideoMaxBuffer);
        }// query params
        if ($dvrConverterStartTime !== null) {
            $queryParams['dvrConverterStartTime'] = $this->apiClient->getSerializer()->toQueryValue($dvrConverterStartTime);
        }// query params
        if ($dvrConverterEndTime !== null) {
            $queryParams['dvrConverterEndTime'] = $this->apiClient->getSerializer()->toQueryValue($dvrConverterEndTime);
        }// query params
        if ($dvrConverterDuration !== null) {
            $queryParams['dvrConverterDuration'] = $this->apiClient->getSerializer()->toQueryValue($dvrConverterDuration);
        }// query params
        if ($dvrConverterOutputFilename !== null) {
            $queryParams['dvrConverterOutputFilename'] = $this->apiClient->getSerializer()->toQueryValue($dvrConverterOutputFilename);
        }
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($action !== null) {
            $resourcePath = str_replace(
                "{" . "action" . "}",
                $this->apiClient->getSerializer()->toPathValue($action),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($instanceName !== null) {
            $resourcePath = str_replace(
                "{" . "instanceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($instanceName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putIncomingStreamAction
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName The application name needed for this REST call (required)
     * @param string $instanceName The application instance name needed for this REST call (required)
     * @param string $streamName The stream name needed for this REST call (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putIncomingStreamAction($serverName, $action, $vhostName, $appName, $instanceName, $streamName)
    {
        list($response) = $this->putIncomingStreamActionWithHttpInfo($serverName, $action, $vhostName, $appName, $instanceName, $streamName);
        return $response;
    }


    /**
     * Operation putIncomingStreamActionWithHttpInfo
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName The application name needed for this REST call (required)
     * @param string $instanceName The application instance name needed for this REST call (required)
     * @param string $streamName The stream name needed for this REST call (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putIncomingStreamActionWithHttpInfo($serverName, $action, $vhostName, $appName, $instanceName, $streamName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putIncomingStreamAction');
        }

        // verify the required parameter 'action' is set
        if ($action === null) {
            throw new \InvalidArgumentException('Missing the required parameter $action when calling putIncomingStreamAction');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putIncomingStreamAction');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putIncomingStreamAction');
        }

        // verify the required parameter 'instanceName' is set
        if ($instanceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instanceName when calling putIncomingStreamAction');
        }

        // verify the required parameter 'streamName' is set
        if ($streamName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $streamName when calling putIncomingStreamAction');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/instances/{instanceName}/incomingstreams/{streamName}/actions/{action}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($action !== null) {
            $resourcePath = str_replace(
                "{" . "action" . "}",
                $this->apiClient->getSerializer()->toPathValue($action),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($instanceName !== null) {
            $resourcePath = str_replace(
                "{" . "instanceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($instanceName),
                $resourcePath
            );
        }// path params
        if ($streamName !== null) {
            $resourcePath = str_replace(
                "{" . "streamName" . "}",
                $this->apiClient->getSerializer()->toPathValue($streamName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putInstanceAction
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName The application name needed for this REST call (required)
     * @param string $instanceName The application instance name needed for this REST call (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putInstanceAction($serverName, $action, $vhostName, $appName, $instanceName)
    {
        list($response) = $this->putInstanceActionWithHttpInfo($serverName, $action, $vhostName, $appName, $instanceName);
        return $response;
    }


    /**
     * Operation putInstanceActionWithHttpInfo
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName The application name needed for this REST call (required)
     * @param string $instanceName The application instance name needed for this REST call (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putInstanceActionWithHttpInfo($serverName, $action, $vhostName, $appName, $instanceName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putInstanceAction');
        }

        // verify the required parameter 'action' is set
        if ($action === null) {
            throw new \InvalidArgumentException('Missing the required parameter $action when calling putInstanceAction');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putInstanceAction');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putInstanceAction');
        }

        // verify the required parameter 'instanceName' is set
        if ($instanceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instanceName when calling putInstanceAction');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/instances/{instanceName}/actions/{action}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($action !== null) {
            $resourcePath = str_replace(
                "{" . "action" . "}",
                $this->apiClient->getSerializer()->toPathValue($action),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($instanceName !== null) {
            $resourcePath = str_replace(
                "{" . "instanceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($instanceName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putMediaCacheApplicationStoreAction
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName The application name needed for this REST call (required)
     * @param string $instanceName The application instance name needed for this REST call (required)
     * @param string $filename The file or stream name item to be used in all rest action requests (optional)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putMediaCacheApplicationStoreAction($serverName, $action, $vhostName, $appName, $instanceName, $filename = null)
    {
        list($response) = $this->putMediaCacheApplicationStoreActionWithHttpInfo($serverName, $action, $vhostName, $appName, $instanceName, $filename);
        return $response;
    }


    /**
     * Operation putMediaCacheApplicationStoreActionWithHttpInfo
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName The application name needed for this REST call (required)
     * @param string $instanceName The application instance name needed for this REST call (required)
     * @param string $filename The file or stream name item to be used in all rest action requests (optional)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putMediaCacheApplicationStoreActionWithHttpInfo($serverName, $action, $vhostName, $appName, $instanceName, $filename = null)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putMediaCacheApplicationStoreAction');
        }

        // verify the required parameter 'action' is set
        if ($action === null) {
            throw new \InvalidArgumentException('Missing the required parameter $action when calling putMediaCacheApplicationStoreAction');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putMediaCacheApplicationStoreAction');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putMediaCacheApplicationStoreAction');
        }

        // verify the required parameter 'instanceName' is set
        if ($instanceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instanceName when calling putMediaCacheApplicationStoreAction');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/instances/{instanceName}/mediacache/stores/actions/{action}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        // query params
        if ($filename !== null) {
            $queryParams['filename'] = $this->apiClient->getSerializer()->toQueryValue($filename);
        }
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($action !== null) {
            $resourcePath = str_replace(
                "{" . "action" . "}",
                $this->apiClient->getSerializer()->toPathValue($action),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($instanceName !== null) {
            $resourcePath = str_replace(
                "{" . "instanceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($instanceName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putModulesConfig
     *
     * Updates the list of Modules for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param ModulesConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putModulesConfig($serverName, $vhostName, $appName, $body)
    {
        list($response) = $this->putModulesConfigWithHttpInfo($serverName, $vhostName, $appName, $body);
        return $response;
    }


    /**
     * Operation putModulesConfigWithHttpInfo
     *
     * Updates the list of Modules for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param ModulesConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putModulesConfigWithHttpInfo($serverName, $vhostName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putModulesConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putModulesConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putModulesConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putModulesConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/modules";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putPublisherAppConfig
     *
     * Updates the specified Publisher configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     * @param string $publisherName The publisher name (required)
     * @param string $appName  (required)
     * @param PublisherAppConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putPublisherAppConfig($serverName, $vhostName, $publisherName, $appName, $body)
    {
        list($response) = $this->putPublisherAppConfigWithHttpInfo($serverName, $vhostName, $publisherName, $appName, $body);
        return $response;
    }


    /**
     * Operation putPublisherAppConfigWithHttpInfo
     *
     * Updates the specified Publisher configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName The vhost name (required)
     * @param string $publisherName The publisher name (required)
     * @param string $appName  (required)
     * @param PublisherAppConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putPublisherAppConfigWithHttpInfo($serverName, $vhostName, $publisherName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putPublisherAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putPublisherAppConfig');
        }

        // verify the required parameter 'publisherName' is set
        if ($publisherName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $publisherName when calling putPublisherAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putPublisherAppConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putPublisherAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/publishers/{publisherName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($publisherName !== null) {
            $resourcePath = str_replace(
                "{" . "publisherName" . "}",
                $this->apiClient->getSerializer()->toPathValue($publisherName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putPushPublishStreamAppAction
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName The application name needed for this REST call (required)
     * @param string $entryName The map entry name needed for this REST call (required)
     * @param string $dstEntryName The destination entryName when copying (optional)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putPushPublishStreamAppAction($serverName, $action, $vhostName, $appName, $entryName, $dstEntryName = null)
    {
        list($response) = $this->putPushPublishStreamAppActionWithHttpInfo($serverName, $action, $vhostName, $appName, $entryName, $dstEntryName);
        return $response;
    }


    /**
     * Operation putPushPublishStreamAppActionWithHttpInfo
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName The application name needed for this REST call (required)
     * @param string $entryName The map entry name needed for this REST call (required)
     * @param string $dstEntryName The destination entryName when copying (optional)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putPushPublishStreamAppActionWithHttpInfo($serverName, $action, $vhostName, $appName, $entryName, $dstEntryName = null)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putPushPublishStreamAppAction');
        }

        // verify the required parameter 'action' is set
        if ($action === null) {
            throw new \InvalidArgumentException('Missing the required parameter $action when calling putPushPublishStreamAppAction');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putPushPublishStreamAppAction');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putPushPublishStreamAppAction');
        }

        // verify the required parameter 'entryName' is set
        if ($entryName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entryName when calling putPushPublishStreamAppAction');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/pushpublish/mapentries/{entryName}/actions/{action}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        // query params
        if ($dstEntryName !== null) {
            $queryParams['dstEntryName'] = $this->apiClient->getSerializer()->toQueryValue($dstEntryName);
        }
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($action !== null) {
            $resourcePath = str_replace(
                "{" . "action" . "}",
                $this->apiClient->getSerializer()->toPathValue($action),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($entryName !== null) {
            $resourcePath = str_replace(
                "{" . "entryName" . "}",
                $this->apiClient->getSerializer()->toPathValue($entryName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putPushPublishStreamAppConfig
     *
     * Updates the specified PushPublish map entry configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $entryName The entry name needed for this REST call (required)
     * @param PushPublishStreamAppConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putPushPublishStreamAppConfig($serverName, $vhostName, $appName, $entryName, $body)
    {
        list($response) = $this->putPushPublishStreamAppConfigWithHttpInfo($serverName, $vhostName, $appName, $entryName, $body);
        return $response;
    }


    /**
     * Operation putPushPublishStreamAppConfigWithHttpInfo
     *
     * Updates the specified PushPublish map entry configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param string $entryName The entry name needed for this REST call (required)
     * @param PushPublishStreamAppConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putPushPublishStreamAppConfigWithHttpInfo($serverName, $vhostName, $appName, $entryName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putPushPublishStreamAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putPushPublishStreamAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putPushPublishStreamAppConfig');
        }

        // verify the required parameter 'entryName' is set
        if ($entryName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entryName when calling putPushPublishStreamAppConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putPushPublishStreamAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/pushpublish/mapentries/{entryName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($entryName !== null) {
            $resourcePath = str_replace(
                "{" . "entryName" . "}",
                $this->apiClient->getSerializer()->toPathValue($entryName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putPushPublishStreamsAppConfig
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param PushPublishStreamAppConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putPushPublishStreamsAppConfig($serverName, $vhostName, $appName, $body)
    {
        list($response) = $this->putPushPublishStreamsAppConfigWithHttpInfo($serverName, $vhostName, $appName, $body);
        return $response;
    }


    /**
     * Operation putPushPublishStreamsAppConfigWithHttpInfo
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param PushPublishStreamAppConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putPushPublishStreamsAppConfigWithHttpInfo($serverName, $vhostName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putPushPublishStreamsAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putPushPublishStreamsAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putPushPublishStreamsAppConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putPushPublishStreamsAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/pushpublish/mapentries";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putSDPFileAppAction
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $mediaCasterType The MediaCasterType to use for the connection (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName The application name needed for this REST call (required)
     * @param string $sdpfileName The sdp file name needed for this REST call (required)
     * @param string $connectAppName The name of the application to connect to (optional)
     * @param string $appInstance The name of the application instance to connect to (optional)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putSDPFileAppAction($serverName, $action, $mediaCasterType, $vhostName, $appName, $sdpfileName, $connectAppName = null, $appInstance = null)
    {
        list($response) = $this->putSDPFileAppActionWithHttpInfo($serverName, $action, $mediaCasterType, $vhostName, $appName, $sdpfileName, $connectAppName, $appInstance);
        return $response;
    }


    /**
     * Operation putSDPFileAppActionWithHttpInfo
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $mediaCasterType The MediaCasterType to use for the connection (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName The application name needed for this REST call (required)
     * @param string $sdpfileName The sdp file name needed for this REST call (required)
     * @param string $connectAppName The name of the application to connect to (optional)
     * @param string $appInstance The name of the application instance to connect to (optional)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putSDPFileAppActionWithHttpInfo($serverName, $action, $mediaCasterType, $vhostName, $appName, $sdpfileName, $connectAppName = null, $appInstance = null)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putSDPFileAppAction');
        }

        // verify the required parameter 'action' is set
        if ($action === null) {
            throw new \InvalidArgumentException('Missing the required parameter $action when calling putSDPFileAppAction');
        }

        // verify the required parameter 'mediaCasterType' is set
        if ($mediaCasterType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $mediaCasterType when calling putSDPFileAppAction');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putSDPFileAppAction');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putSDPFileAppAction');
        }

        // verify the required parameter 'sdpfileName' is set
        if ($sdpfileName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sdpfileName when calling putSDPFileAppAction');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/sdpfiles/{sdpfileName}/actions/{action}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        // query params
        if ($connectAppName !== null) {
            $queryParams['connectAppName'] = $this->apiClient->getSerializer()->toQueryValue($connectAppName);
        }// query params
        if ($appInstance !== null) {
            $queryParams['appInstance'] = $this->apiClient->getSerializer()->toQueryValue($appInstance);
        }// query params
        if ($mediaCasterType !== null) {
            $queryParams['mediaCasterType'] = $this->apiClient->getSerializer()->toQueryValue($mediaCasterType);
        }
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($action !== null) {
            $resourcePath = str_replace(
                "{" . "action" . "}",
                $this->apiClient->getSerializer()->toPathValue($action),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($sdpfileName !== null) {
            $resourcePath = str_replace(
                "{" . "sdpfileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($sdpfileName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putSMILFileAppAction
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $mediaCasterType The MediaCasterType to use for the connection (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName The application name needed for this REST call (required)
     * @param string $smilfileName The SMIL file name needed for this REST call (required)
     * @param string $connectAppName The name of the application to connect to (optional)
     * @param string $appInstance The name of the application instance to connect to (optional)
     * @param string $dstEntryName The destination SMIL file name when copying (optional)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putSMILFileAppAction($serverName, $action, $mediaCasterType, $vhostName, $appName, $smilfileName, $connectAppName = null, $appInstance = null, $dstEntryName = null)
    {
        list($response) = $this->putSMILFileAppActionWithHttpInfo($serverName, $action, $mediaCasterType, $vhostName, $appName, $smilfileName, $connectAppName, $appInstance, $dstEntryName);
        return $response;
    }


    /**
     * Operation putSMILFileAppActionWithHttpInfo
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $mediaCasterType The MediaCasterType to use for the connection (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName The application name needed for this REST call (required)
     * @param string $smilfileName The SMIL file name needed for this REST call (required)
     * @param string $connectAppName The name of the application to connect to (optional)
     * @param string $appInstance The name of the application instance to connect to (optional)
     * @param string $dstEntryName The destination SMIL file name when copying (optional)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putSMILFileAppActionWithHttpInfo($serverName, $action, $mediaCasterType, $vhostName, $appName, $smilfileName, $connectAppName = null, $appInstance = null, $dstEntryName = null)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putSMILFileAppAction');
        }

        // verify the required parameter 'action' is set
        if ($action === null) {
            throw new \InvalidArgumentException('Missing the required parameter $action when calling putSMILFileAppAction');
        }

        // verify the required parameter 'mediaCasterType' is set
        if ($mediaCasterType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $mediaCasterType when calling putSMILFileAppAction');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putSMILFileAppAction');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putSMILFileAppAction');
        }

        // verify the required parameter 'smilfileName' is set
        if ($smilfileName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $smilfileName when calling putSMILFileAppAction');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/smilfiles/{smilfileName}/actions/{action}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        // query params
        if ($connectAppName !== null) {
            $queryParams['connectAppName'] = $this->apiClient->getSerializer()->toQueryValue($connectAppName);
        }// query params
        if ($appInstance !== null) {
            $queryParams['appInstance'] = $this->apiClient->getSerializer()->toQueryValue($appInstance);
        }// query params
        if ($mediaCasterType !== null) {
            $queryParams['mediaCasterType'] = $this->apiClient->getSerializer()->toQueryValue($mediaCasterType);
        }// query params
        if ($dstEntryName !== null) {
            $queryParams['dstEntryName'] = $this->apiClient->getSerializer()->toQueryValue($dstEntryName);
        }
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($action !== null) {
            $resourcePath = str_replace(
                "{" . "action" . "}",
                $this->apiClient->getSerializer()->toPathValue($action),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($smilfileName !== null) {
            $resourcePath = str_replace(
                "{" . "smilfileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($smilfileName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putSMILFileAppConfig
     *
     * Updates the specified SMIL File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $smilfileName The SMIL file name without the extension (required)
     * @param string $appName  (required)
     * @param SMILFileAppConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putSMILFileAppConfig($serverName, $vhostName, $smilfileName, $appName, $body)
    {
        list($response) = $this->putSMILFileAppConfigWithHttpInfo($serverName, $vhostName, $smilfileName, $appName, $body);
        return $response;
    }


    /**
     * Operation putSMILFileAppConfigWithHttpInfo
     *
     * Updates the specified SMIL File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $smilfileName The SMIL file name without the extension (required)
     * @param string $appName  (required)
     * @param SMILFileAppConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putSMILFileAppConfigWithHttpInfo($serverName, $vhostName, $smilfileName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putSMILFileAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putSMILFileAppConfig');
        }

        // verify the required parameter 'smilfileName' is set
        if ($smilfileName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $smilfileName when calling putSMILFileAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putSMILFileAppConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putSMILFileAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/smilfiles/{smilfileName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($smilfileName !== null) {
            $resourcePath = str_replace(
                "{" . "smilfileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($smilfileName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putSecurityConfig
     *
     * Updates the Security configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param SecurityConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putSecurityConfig($serverName, $vhostName, $appName, $body)
    {
        list($response) = $this->putSecurityConfigWithHttpInfo($serverName, $vhostName, $appName, $body);
        return $response;
    }


    /**
     * Operation putSecurityConfigWithHttpInfo
     *
     * Updates the Security configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param SecurityConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putSecurityConfigWithHttpInfo($serverName, $vhostName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putSecurityConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putSecurityConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putSecurityConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putSecurityConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/security";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putSourceControlAction
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $vhostName The VHost name (required)
     * @param string $appName The Application name (required)
     * @param string $instanceName The Application Instance name (required)
     * @param string $streamName The Stream name (required)
     * @param string $direction No query params available for captureImage. Optional query params for zoom and panTilt:   ZoomIn, ZoomOut,   PanTiltUp, PanTiltRight, PanTiltDown, PanTiltLeft, PanTiltHome, PanTiltUpRight, PanTiltDownRight, PanTiltDownLeft, PanTiltUpLeft (optional)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putSourceControlAction($serverName, $action, $vhostName, $appName, $instanceName, $streamName, $direction = null)
    {
        list($response) = $this->putSourceControlActionWithHttpInfo($serverName, $action, $vhostName, $appName, $instanceName, $streamName, $direction);
        return $response;
    }


    /**
     * Operation putSourceControlActionWithHttpInfo
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $vhostName The VHost name (required)
     * @param string $appName The Application name (required)
     * @param string $instanceName The Application Instance name (required)
     * @param string $streamName The Stream name (required)
     * @param string $direction No query params available for captureImage. Optional query params for zoom and panTilt:   ZoomIn, ZoomOut,   PanTiltUp, PanTiltRight, PanTiltDown, PanTiltLeft, PanTiltHome, PanTiltUpRight, PanTiltDownRight, PanTiltDownLeft, PanTiltUpLeft (optional)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putSourceControlActionWithHttpInfo($serverName, $action, $vhostName, $appName, $instanceName, $streamName, $direction = null)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putSourceControlAction');
        }

        // verify the required parameter 'action' is set
        if ($action === null) {
            throw new \InvalidArgumentException('Missing the required parameter $action when calling putSourceControlAction');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putSourceControlAction');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putSourceControlAction');
        }

        // verify the required parameter 'instanceName' is set
        if ($instanceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instanceName when calling putSourceControlAction');
        }

        // verify the required parameter 'streamName' is set
        if ($streamName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $streamName when calling putSourceControlAction');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/instances/{instanceName}/incomingstreams/{streamName}/sourcecontrol/actions/{action}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        // query params
        if ($direction !== null) {
            $queryParams['direction'] = $this->apiClient->getSerializer()->toQueryValue($direction);
        }
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($action !== null) {
            $resourcePath = str_replace(
                "{" . "action" . "}",
                $this->apiClient->getSerializer()->toPathValue($action),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($instanceName !== null) {
            $resourcePath = str_replace(
                "{" . "instanceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($instanceName),
                $resourcePath
            );
        }// path params
        if ($streamName !== null) {
            $resourcePath = str_replace(
                "{" . "streamName" . "}",
                $this->apiClient->getSerializer()->toPathValue($streamName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putStreamConfigurationConfig
     *
     * Updates the Stream configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param StreamConfigurationConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putStreamConfigurationConfig($serverName, $vhostName, $appName, $body)
    {
        list($response) = $this->putStreamConfigurationConfigWithHttpInfo($serverName, $vhostName, $appName, $body);
        return $response;
    }


    /**
     * Operation putStreamConfigurationConfigWithHttpInfo
     *
     * Updates the Stream configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param StreamConfigurationConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putStreamConfigurationConfigWithHttpInfo($serverName, $vhostName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putStreamConfigurationConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putStreamConfigurationConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putStreamConfigurationConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putStreamConfigurationConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/streamconfiguration";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putStreamFileAppAction
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $mediaCasterType The MediaCasterType to use for the connection (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName The application name needed for this REST call (required)
     * @param string $streamfileName The stream file, file name needed for this REST call (required)
     * @param string $connectAppName The name of the application to connect to (optional)
     * @param string $appInstance The name of the application instance to connect to (optional)
     * @param string $dstEntryName The destination stream file name when copying (optional)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putStreamFileAppAction($serverName, $action, $mediaCasterType, $vhostName, $appName, $streamfileName, $connectAppName = null, $appInstance = null, $dstEntryName = null)
    {
        list($response) = $this->putStreamFileAppActionWithHttpInfo($serverName, $action, $mediaCasterType, $vhostName, $appName, $streamfileName, $connectAppName, $appInstance, $dstEntryName);
        return $response;
    }


    /**
     * Operation putStreamFileAppActionWithHttpInfo
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $mediaCasterType The MediaCasterType to use for the connection (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName The application name needed for this REST call (required)
     * @param string $streamfileName The stream file, file name needed for this REST call (required)
     * @param string $connectAppName The name of the application to connect to (optional)
     * @param string $appInstance The name of the application instance to connect to (optional)
     * @param string $dstEntryName The destination stream file name when copying (optional)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putStreamFileAppActionWithHttpInfo($serverName, $action, $mediaCasterType, $vhostName, $appName, $streamfileName, $connectAppName = null, $appInstance = null, $dstEntryName = null)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putStreamFileAppAction');
        }

        // verify the required parameter 'action' is set
        if ($action === null) {
            throw new \InvalidArgumentException('Missing the required parameter $action when calling putStreamFileAppAction');
        }

        // verify the required parameter 'mediaCasterType' is set
        if ($mediaCasterType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $mediaCasterType when calling putStreamFileAppAction');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putStreamFileAppAction');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putStreamFileAppAction');
        }

        // verify the required parameter 'streamfileName' is set
        if ($streamfileName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $streamfileName when calling putStreamFileAppAction');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/streamfiles/{streamfileName}/actions/{action}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        // query params
        if ($connectAppName !== null) {
            $queryParams['connectAppName'] = $this->apiClient->getSerializer()->toQueryValue($connectAppName);
        }// query params
        if ($appInstance !== null) {
            $queryParams['appInstance'] = $this->apiClient->getSerializer()->toQueryValue($appInstance);
        }// query params
        if ($mediaCasterType !== null) {
            $queryParams['mediaCasterType'] = $this->apiClient->getSerializer()->toQueryValue($mediaCasterType);
        }// query params
        if ($dstEntryName !== null) {
            $queryParams['dstEntryName'] = $this->apiClient->getSerializer()->toQueryValue($dstEntryName);
        }
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($action !== null) {
            $resourcePath = str_replace(
                "{" . "action" . "}",
                $this->apiClient->getSerializer()->toPathValue($action),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($streamfileName !== null) {
            $resourcePath = str_replace(
                "{" . "streamfileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($streamfileName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putStreamFileAppConfig
     *
     * Updates the specified Stream File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $streamfileName The stream file name without the extension (required)
     * @param string $appName  (required)
     * @param StreamFileAppConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putStreamFileAppConfig($serverName, $vhostName, $streamfileName, $appName, $body)
    {
        list($response) = $this->putStreamFileAppConfigWithHttpInfo($serverName, $vhostName, $streamfileName, $appName, $body);
        return $response;
    }


    /**
     * Operation putStreamFileAppConfigWithHttpInfo
     *
     * Updates the specified Stream File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $streamfileName The stream file name without the extension (required)
     * @param string $appName  (required)
     * @param StreamFileAppConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putStreamFileAppConfigWithHttpInfo($serverName, $vhostName, $streamfileName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putStreamFileAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putStreamFileAppConfig');
        }

        // verify the required parameter 'streamfileName' is set
        if ($streamfileName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $streamfileName when calling putStreamFileAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putStreamFileAppConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putStreamFileAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/streamfiles/{streamfileName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($streamfileName !== null) {
            $resourcePath = str_replace(
                "{" . "streamfileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($streamfileName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putStreamFileAppConfigAdv
     *
     * Updates the Advanced Stream File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $streamfileName The stream file name without the .stream extension (required)
     * @param string $appName  (required)
     * @param StreamFileAppConfigAdv $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putStreamFileAppConfigAdv($serverName, $vhostName, $streamfileName, $appName, $body)
    {
        list($response) = $this->putStreamFileAppConfigAdvWithHttpInfo($serverName, $vhostName, $streamfileName, $appName, $body);
        return $response;
    }


    /**
     * Operation putStreamFileAppConfigAdvWithHttpInfo
     *
     * Updates the Advanced Stream File configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $streamfileName The stream file name without the .stream extension (required)
     * @param string $appName  (required)
     * @param StreamFileAppConfigAdv $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putStreamFileAppConfigAdvWithHttpInfo($serverName, $vhostName, $streamfileName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putStreamFileAppConfigAdv');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putStreamFileAppConfigAdv');
        }

        // verify the required parameter 'streamfileName' is set
        if ($streamfileName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $streamfileName when calling putStreamFileAppConfigAdv');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putStreamFileAppConfigAdv');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putStreamFileAppConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/streamfiles/{streamfileName}/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($streamfileName !== null) {
            $resourcePath = str_replace(
                "{" . "streamfileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($streamfileName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putStreamGroupAction
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName The application name needed for this REST call (required)
     * @param string $instanceName The application instance name needed for this REST call (required)
     * @param string $groupName The group name needed for this REST call (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putStreamGroupAction($serverName, $action, $vhostName, $appName, $instanceName, $groupName)
    {
        list($response) = $this->putStreamGroupActionWithHttpInfo($serverName, $action, $vhostName, $appName, $instanceName, $groupName);
        return $response;
    }


    /**
     * Operation putStreamGroupActionWithHttpInfo
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName The application name needed for this REST call (required)
     * @param string $instanceName The application instance name needed for this REST call (required)
     * @param string $groupName The group name needed for this REST call (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putStreamGroupActionWithHttpInfo($serverName, $action, $vhostName, $appName, $instanceName, $groupName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putStreamGroupAction');
        }

        // verify the required parameter 'action' is set
        if ($action === null) {
            throw new \InvalidArgumentException('Missing the required parameter $action when calling putStreamGroupAction');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putStreamGroupAction');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putStreamGroupAction');
        }

        // verify the required parameter 'instanceName' is set
        if ($instanceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instanceName when calling putStreamGroupAction');
        }

        // verify the required parameter 'groupName' is set
        if ($groupName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $groupName when calling putStreamGroupAction');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/instances/{instanceName}/streamgroups/{groupName}/actions/{action}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($action !== null) {
            $resourcePath = str_replace(
                "{" . "action" . "}",
                $this->apiClient->getSerializer()->toPathValue($action),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($instanceName !== null) {
            $resourcePath = str_replace(
                "{" . "instanceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($instanceName),
                $resourcePath
            );
        }// path params
        if ($groupName !== null) {
            $resourcePath = str_replace(
                "{" . "groupName" . "}",
                $this->apiClient->getSerializer()->toPathValue($groupName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putStreamRecorderAction
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName The application name needed for this REST call (required)
     * @param string $instanceName The application instance name needed for this REST call (required)
     * @param string $recorderName The recorder name (stream name) needed for this REST call (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putStreamRecorderAction($serverName, $action, $vhostName, $appName, $instanceName, $recorderName)
    {
        list($response) = $this->putStreamRecorderActionWithHttpInfo($serverName, $action, $vhostName, $appName, $instanceName, $recorderName);
        return $response;
    }


    /**
     * Operation putStreamRecorderActionWithHttpInfo
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName The application name needed for this REST call (required)
     * @param string $instanceName The application instance name needed for this REST call (required)
     * @param string $recorderName The recorder name (stream name) needed for this REST call (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putStreamRecorderActionWithHttpInfo($serverName, $action, $vhostName, $appName, $instanceName, $recorderName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putStreamRecorderAction');
        }

        // verify the required parameter 'action' is set
        if ($action === null) {
            throw new \InvalidArgumentException('Missing the required parameter $action when calling putStreamRecorderAction');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putStreamRecorderAction');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putStreamRecorderAction');
        }

        // verify the required parameter 'instanceName' is set
        if ($instanceName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instanceName when calling putStreamRecorderAction');
        }

        // verify the required parameter 'recorderName' is set
        if ($recorderName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $recorderName when calling putStreamRecorderAction');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/instances/{instanceName}/streamrecorders/{recorderName}/actions/{action}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($action !== null) {
            $resourcePath = str_replace(
                "{" . "action" . "}",
                $this->apiClient->getSerializer()->toPathValue($action),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($instanceName !== null) {
            $resourcePath = str_replace(
                "{" . "instanceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($instanceName),
                $resourcePath
            );
        }// path params
        if ($recorderName !== null) {
            $resourcePath = str_replace(
                "{" . "recorderName" . "}",
                $this->apiClient->getSerializer()->toPathValue($recorderName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putTranscoderAppConfig
     *
     * Updates the Transcoder configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param TranscoderAppConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderAppConfig($serverName, $vhostName, $appName, $body)
    {
        list($response) = $this->putTranscoderAppConfigWithHttpInfo($serverName, $vhostName, $appName, $body);
        return $response;
    }


    /**
     * Operation putTranscoderAppConfigWithHttpInfo
     *
     * Updates the Transcoder configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param TranscoderAppConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderAppConfigWithHttpInfo($serverName, $vhostName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putTranscoderAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putTranscoderAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putTranscoderAppConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putTranscoderAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/transcoder";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putTranscoderAppConfigAdv
     *
     * Updates the Advanced Transcoder configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param TranscoderAppConfigAdv $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderAppConfigAdv($serverName, $vhostName, $appName, $body)
    {
        list($response) = $this->putTranscoderAppConfigAdvWithHttpInfo($serverName, $vhostName, $appName, $body);
        return $response;
    }


    /**
     * Operation putTranscoderAppConfigAdvWithHttpInfo
     *
     * Updates the Advanced Transcoder configuration for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param TranscoderAppConfigAdv $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderAppConfigAdvWithHttpInfo($serverName, $vhostName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putTranscoderAppConfigAdv');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putTranscoderAppConfigAdv');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putTranscoderAppConfigAdv');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putTranscoderAppConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/transcoder/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putTranscoderEncodeAppConfig
     *
     * Updates the specified Trancoder Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $encodeName  (required)
     * @param string $appName  (required)
     * @param TranscoderEncodeAppConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderEncodeAppConfig($serverName, $vhostName, $templateName, $encodeName, $appName, $body)
    {
        list($response) = $this->putTranscoderEncodeAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $encodeName, $appName, $body);
        return $response;
    }


    /**
     * Operation putTranscoderEncodeAppConfigWithHttpInfo
     *
     * Updates the specified Trancoder Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $encodeName  (required)
     * @param string $appName  (required)
     * @param TranscoderEncodeAppConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderEncodeAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $encodeName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putTranscoderEncodeAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putTranscoderEncodeAppConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling putTranscoderEncodeAppConfig');
        }

        // verify the required parameter 'encodeName' is set
        if ($encodeName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $encodeName when calling putTranscoderEncodeAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putTranscoderEncodeAppConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putTranscoderEncodeAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/transcoder/templates/{templateName}/encodes/{encodeName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($encodeName !== null) {
            $resourcePath = str_replace(
                "{" . "encodeName" . "}",
                $this->apiClient->getSerializer()->toPathValue($encodeName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putTranscoderEncodeAppConfigAdv
     *
     * Updates the Advanced Transcoder Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $encodeName  (required)
     * @param string $appName  (required)
     * @param TranscoderEncodeAppConfigAdv $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderEncodeAppConfigAdv($serverName, $vhostName, $templateName, $encodeName, $appName, $body)
    {
        list($response) = $this->putTranscoderEncodeAppConfigAdvWithHttpInfo($serverName, $vhostName, $templateName, $encodeName, $appName, $body);
        return $response;
    }


    /**
     * Operation putTranscoderEncodeAppConfigAdvWithHttpInfo
     *
     * Updates the Advanced Transcoder Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $encodeName  (required)
     * @param string $appName  (required)
     * @param TranscoderEncodeAppConfigAdv $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderEncodeAppConfigAdvWithHttpInfo($serverName, $vhostName, $templateName, $encodeName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putTranscoderEncodeAppConfigAdv');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putTranscoderEncodeAppConfigAdv');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling putTranscoderEncodeAppConfigAdv');
        }

        // verify the required parameter 'encodeName' is set
        if ($encodeName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $encodeName when calling putTranscoderEncodeAppConfigAdv');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putTranscoderEncodeAppConfigAdv');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putTranscoderEncodeAppConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/transcoder/templates/{templateName}/encodes/{encodeName}/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($encodeName !== null) {
            $resourcePath = str_replace(
                "{" . "encodeName" . "}",
                $this->apiClient->getSerializer()->toPathValue($encodeName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putTranscoderOverlayDecodeAppConfig
     *
     * Updates the specified Trancoder Overlay Decode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $overlayName  (required)
     * @param string $appName  (required)
     * @param TranscoderOverlayDecodeAppConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderOverlayDecodeAppConfig($serverName, $vhostName, $templateName, $overlayName, $appName, $body)
    {
        list($response) = $this->putTranscoderOverlayDecodeAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $overlayName, $appName, $body);
        return $response;
    }


    /**
     * Operation putTranscoderOverlayDecodeAppConfigWithHttpInfo
     *
     * Updates the specified Trancoder Overlay Decode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $overlayName  (required)
     * @param string $appName  (required)
     * @param TranscoderOverlayDecodeAppConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderOverlayDecodeAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $overlayName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putTranscoderOverlayDecodeAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putTranscoderOverlayDecodeAppConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling putTranscoderOverlayDecodeAppConfig');
        }

        // verify the required parameter 'overlayName' is set
        if ($overlayName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $overlayName when calling putTranscoderOverlayDecodeAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putTranscoderOverlayDecodeAppConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putTranscoderOverlayDecodeAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/transcoder/templates/{templateName}/decode/overlays/{overlayName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($overlayName !== null) {
            $resourcePath = str_replace(
                "{" . "overlayName" . "}",
                $this->apiClient->getSerializer()->toPathValue($overlayName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putTranscoderOverlayEncodeAppConfig
     *
     * Updates the specified Trancoder Overlay Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $overlayName  (required)
     * @param string $encodeName  (required)
     * @param string $appName  (required)
     * @param TranscoderOverlayEncodeAppConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderOverlayEncodeAppConfig($serverName, $vhostName, $templateName, $overlayName, $encodeName, $appName, $body)
    {
        list($response) = $this->putTranscoderOverlayEncodeAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $overlayName, $encodeName, $appName, $body);
        return $response;
    }


    /**
     * Operation putTranscoderOverlayEncodeAppConfigWithHttpInfo
     *
     * Updates the specified Trancoder Overlay Encode configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $overlayName  (required)
     * @param string $encodeName  (required)
     * @param string $appName  (required)
     * @param TranscoderOverlayEncodeAppConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderOverlayEncodeAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $overlayName, $encodeName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putTranscoderOverlayEncodeAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putTranscoderOverlayEncodeAppConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling putTranscoderOverlayEncodeAppConfig');
        }

        // verify the required parameter 'overlayName' is set
        if ($overlayName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $overlayName when calling putTranscoderOverlayEncodeAppConfig');
        }

        // verify the required parameter 'encodeName' is set
        if ($encodeName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $encodeName when calling putTranscoderOverlayEncodeAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putTranscoderOverlayEncodeAppConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putTranscoderOverlayEncodeAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/transcoder/templates/{templateName}/encodes/{encodeName}/overlays/{overlayName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($overlayName !== null) {
            $resourcePath = str_replace(
                "{" . "overlayName" . "}",
                $this->apiClient->getSerializer()->toPathValue($overlayName),
                $resourcePath
            );
        }// path params
        if ($encodeName !== null) {
            $resourcePath = str_replace(
                "{" . "encodeName" . "}",
                $this->apiClient->getSerializer()->toPathValue($encodeName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putTranscoderStreamNameGroupAppConfig
     *
     * Updates the specified Trancoder StreamNameGroup configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $groupName  (required)
     * @param string $appName  (required)
     * @param TranscoderStreamNameGroupAppConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderStreamNameGroupAppConfig($serverName, $vhostName, $templateName, $groupName, $appName, $body)
    {
        list($response) = $this->putTranscoderStreamNameGroupAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $groupName, $appName, $body);
        return $response;
    }


    /**
     * Operation putTranscoderStreamNameGroupAppConfigWithHttpInfo
     *
     * Updates the specified Trancoder StreamNameGroup configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $groupName  (required)
     * @param string $appName  (required)
     * @param TranscoderStreamNameGroupAppConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderStreamNameGroupAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $groupName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putTranscoderStreamNameGroupAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putTranscoderStreamNameGroupAppConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling putTranscoderStreamNameGroupAppConfig');
        }

        // verify the required parameter 'groupName' is set
        if ($groupName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $groupName when calling putTranscoderStreamNameGroupAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putTranscoderStreamNameGroupAppConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putTranscoderStreamNameGroupAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/transcoder/templates/{templateName}/streamnamegroups/{groupName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($groupName !== null) {
            $resourcePath = str_replace(
                "{" . "groupName" . "}",
                $this->apiClient->getSerializer()->toPathValue($groupName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putTranscoderTemplateAppAction
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName The application name needed for this REST call (required)
     * @param string $templateName The template name needed for this REST call (required)
     * @param string $dstEntryName The destination transcode template file name when copying (optional)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderTemplateAppAction($serverName, $action, $vhostName, $appName, $templateName, $dstEntryName = null)
    {
        list($response) = $this->putTranscoderTemplateAppActionWithHttpInfo($serverName, $action, $vhostName, $appName, $templateName, $dstEntryName);
        return $response;
    }


    /**
     * Operation putTranscoderTemplateAppActionWithHttpInfo
     *
     * .
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $action The action which should be performed by the server (required)
     * @param string $vhostName The name of the current VHost the action will be performed on (required)
     * @param string $appName The application name needed for this REST call (required)
     * @param string $templateName The template name needed for this REST call (required)
     * @param string $dstEntryName The destination transcode template file name when copying (optional)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderTemplateAppActionWithHttpInfo($serverName, $action, $vhostName, $appName, $templateName, $dstEntryName = null)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putTranscoderTemplateAppAction');
        }

        // verify the required parameter 'action' is set
        if ($action === null) {
            throw new \InvalidArgumentException('Missing the required parameter $action when calling putTranscoderTemplateAppAction');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putTranscoderTemplateAppAction');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putTranscoderTemplateAppAction');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling putTranscoderTemplateAppAction');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/transcoder/templates/{templateName}/actions/{action}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        // query params
        if ($dstEntryName !== null) {
            $queryParams['dstEntryName'] = $this->apiClient->getSerializer()->toQueryValue($dstEntryName);
        }
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($action !== null) {
            $resourcePath = str_replace(
                "{" . "action" . "}",
                $this->apiClient->getSerializer()->toPathValue($action),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putTranscoderTemplateAppConfig
     *
     * Updates the specified Trancoder Template configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $appName  (required)
     * @param TranscoderTemplateAppConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderTemplateAppConfig($serverName, $vhostName, $templateName, $appName, $body)
    {
        list($response) = $this->putTranscoderTemplateAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $appName, $body);
        return $response;
    }


    /**
     * Operation putTranscoderTemplateAppConfigWithHttpInfo
     *
     * Updates the specified Trancoder Template configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $appName  (required)
     * @param TranscoderTemplateAppConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderTemplateAppConfigWithHttpInfo($serverName, $vhostName, $templateName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putTranscoderTemplateAppConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putTranscoderTemplateAppConfig');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling putTranscoderTemplateAppConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putTranscoderTemplateAppConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putTranscoderTemplateAppConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/transcoder/templates/{templateName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putTranscoderTemplateAppConfigAdv
     *
     * Updates the Advanced Transcoder Template configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $appName  (required)
     * @param TranscoderTemplateAppConfigAdv $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderTemplateAppConfigAdv($serverName, $vhostName, $templateName, $appName, $body)
    {
        list($response) = $this->putTranscoderTemplateAppConfigAdvWithHttpInfo($serverName, $vhostName, $templateName, $appName, $body);
        return $response;
    }


    /**
     * Operation putTranscoderTemplateAppConfigAdvWithHttpInfo
     *
     * Updates the Advanced Transcoder Template configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $templateName  (required)
     * @param string $appName  (required)
     * @param TranscoderTemplateAppConfigAdv $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putTranscoderTemplateAppConfigAdvWithHttpInfo($serverName, $vhostName, $templateName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putTranscoderTemplateAppConfigAdv');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putTranscoderTemplateAppConfigAdv');
        }

        // verify the required parameter 'templateName' is set
        if ($templateName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templateName when calling putTranscoderTemplateAppConfigAdv');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putTranscoderTemplateAppConfigAdv');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putTranscoderTemplateAppConfigAdv');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/transcoder/templates/{templateName}/adv";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                "{" . "templateName" . "}",
                $this->apiClient->getSerializer()->toPathValue($templateName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putVerimatrixStreamMapsConfig
     *
     * Updates the Verimatrix stream mapfile for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param VerimatrixStreamMapsConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putVerimatrixStreamMapsConfig($serverName, $vhostName, $appName, $body)
    {
        list($response) = $this->putVerimatrixStreamMapsConfigWithHttpInfo($serverName, $vhostName, $appName, $body);
        return $response;
    }


    /**
     * Operation putVerimatrixStreamMapsConfigWithHttpInfo
     *
     * Updates the Verimatrix stream mapfile for the specified Application.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $vhostName  (required)
     * @param string $appName  (required)
     * @param VerimatrixStreamMapsConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putVerimatrixStreamMapsConfigWithHttpInfo($serverName, $vhostName, $appName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putVerimatrixStreamMapsConfig');
        }

        // verify the required parameter 'vhostName' is set
        if ($vhostName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vhostName when calling putVerimatrixStreamMapsConfig');
        }

        // verify the required parameter 'appName' is set
        if ($appName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $appName when calling putVerimatrixStreamMapsConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putVerimatrixStreamMapsConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/vhosts/{vhostName}/applications/{appName}/drm/verimatrixmapfile";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($vhostName !== null) {
            $resourcePath = str_replace(
                "{" . "vhostName" . "}",
                $this->apiClient->getSerializer()->toPathValue($vhostName),
                $resourcePath
            );
        }// path params
        if ($appName !== null) {
            $resourcePath = str_replace(
                "{" . "appName" . "}",
                $this->apiClient->getSerializer()->toPathValue($appName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
}
