<?php
/**
 * VserversserverNameusersApi
 * PHP version 5
 *
 * @category Class
 * @package  WowzaApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Topix\Hackademy\WowzaApi\Client;

use Topix\Hackademy\WowzaApi\Configuration;
use Topix\Hackademy\WowzaApi\ApiClient;
use Topix\Hackademy\WowzaApi\ApiException;
use Topix\Hackademy\WowzaApi\Model\UserConfig;
use Topix\Hackademy\WowzaApi\Model\UsersConfig;
use Topix\Hackademy\WowzaApi\ObjectSerializer;

/**
 * VserversserverNameusersApi Class Doc Comment
 *
 * @category Class
 * @package  WowzaApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VserversserverNameusersApi extends SwaggerApi
{

    /**
     * Operation deleteUserConfig
     *
     * Deletes the specified User configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $userName The user name (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function deleteUserConfig($serverName, $userName)
    {
        list($response) = $this->deleteUserConfigWithHttpInfo($serverName, $userName);
        return $response;
    }


    /**
     * Operation deleteUserConfigWithHttpInfo
     *
     * Deletes the specified User configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $userName The user name (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function deleteUserConfigWithHttpInfo($serverName, $userName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling deleteUserConfig');
        }

        // verify the required parameter 'userName' is set
        if ($userName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $userName when calling deleteUserConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/users/{userName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($userName !== null) {
            $resourcePath = str_replace(
                "{" . "userName" . "}",
                $this->apiClient->getSerializer()->toPathValue($userName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation getUserConfig
     *
     * Retrieves the specified User configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $userName The user name (required)
     *
     * @return  UserConfig
     * @throws ApiException on non-2xx response
     */
    public function getUserConfig($serverName, $userName)
    {
        list($response) = $this->getUserConfigWithHttpInfo($serverName, $userName);
        return $response;
    }


    /**
     * Operation getUserConfigWithHttpInfo
     *
     * Retrieves the specified User configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $userName The user name (required)
     *
     * @return Array of \Model\UserConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getUserConfigWithHttpInfo($serverName, $userName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getUserConfig');
        }

        // verify the required parameter 'userName' is set
        if ($userName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $userName when calling getUserConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/users/{userName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($userName !== null) {
            $resourcePath = str_replace(
                "{" . "userName" . "}",
                $this->apiClient->getSerializer()->toPathValue($userName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                UserConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, UserConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), UserConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getUsersConfig
     *
     * Retrieves the list of server Users.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return  UsersConfig
     * @throws ApiException on non-2xx response
     */
    public function getUsersConfig($serverName)
    {
        list($response) = $this->getUsersConfigWithHttpInfo($serverName);
        return $response;
    }


    /**
     * Operation getUsersConfigWithHttpInfo
     *
     * Retrieves the list of server Users.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return Array of \Model\UsersConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getUsersConfigWithHttpInfo($serverName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getUsersConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/users";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                UsersConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, UsersConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), UsersConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation postUserConfig
     *
     * Adds the specified User configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $userName The user name (required)
     * @param UserConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postUserConfig($serverName, $userName, $body)
    {
        list($response) = $this->postUserConfigWithHttpInfo($serverName, $userName, $body);
        return $response;
    }


    /**
     * Operation postUserConfigWithHttpInfo
     *
     * Adds the specified User configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $userName The user name (required)
     * @param UserConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postUserConfigWithHttpInfo($serverName, $userName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postUserConfig');
        }

        // verify the required parameter 'userName' is set
        if ($userName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $userName when calling postUserConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postUserConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/users/{userName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($userName !== null) {
            $resourcePath = str_replace(
                "{" . "userName" . "}",
                $this->apiClient->getSerializer()->toPathValue($userName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postUsersConfig
     *
     * Adds a new server User to the list.
     *
     * @param string $serverName Reserved for future use (required)
     * @param UserConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postUsersConfig($serverName, $body)
    {
        list($response) = $this->postUsersConfigWithHttpInfo($serverName, $body);
        return $response;
    }


    /**
     * Operation postUsersConfigWithHttpInfo
     *
     * Adds a new server User to the list.
     *
     * @param string $serverName Reserved for future use (required)
     * @param UserConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postUsersConfigWithHttpInfo($serverName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postUsersConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postUsersConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/users";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putUserConfig
     *
     * Updates the specified User configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $userName The user name (required)
     * @param UserConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putUserConfig($serverName, $userName, $body)
    {
        list($response) = $this->putUserConfigWithHttpInfo($serverName, $userName, $body);
        return $response;
    }


    /**
     * Operation putUserConfigWithHttpInfo
     *
     * Updates the specified User configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $userName The user name (required)
     * @param UserConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putUserConfigWithHttpInfo($serverName, $userName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putUserConfig');
        }

        // verify the required parameter 'userName' is set
        if ($userName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $userName when calling putUserConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putUserConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/users/{userName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($userName !== null) {
            $resourcePath = str_replace(
                "{" . "userName" . "}",
                $this->apiClient->getSerializer()->toPathValue($userName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
}
