<?php
/**
 * VserversserverNamepublishersApi
 * PHP version 5
 *
 * @category Class
 * @package  WowzaApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Topix\Hackademy\WowzaApi\Client;

use Topix\Hackademy\WowzaApi\Configuration;
use Topix\Hackademy\WowzaApi\ApiClient;
use Topix\Hackademy\WowzaApi\ApiException;
use Topix\Hackademy\WowzaApi\Model\PublisherConfig;
use Topix\Hackademy\WowzaApi\Model\PublisherConfig3;
use Topix\Hackademy\WowzaApi\Model\PublishersConfig;
use Topix\Hackademy\WowzaApi\Model\PublishersConfig3;
use Topix\Hackademy\WowzaApi\ObjectSerializer;

/**
 * VserversserverNamepublishersApi Class Doc Comment
 *
 * @category Class
 * @package  WowzaApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VserversserverNamepublishersApi extends SwaggerApi
{

    /**
     * Operation deletePublisherConfig
     *
     * Deletes the specified Publisher configuration.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function deletePublisherConfig($serverName)
    {
        list($response) = $this->deletePublisherConfigWithHttpInfo($serverName);
        return $response;
    }


    /**
     * Operation deletePublisherConfigWithHttpInfo
     *
     * Deletes the specified Publisher configuration.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function deletePublisherConfigWithHttpInfo($serverName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling deletePublisherConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/publishers/{publisher}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation deletePublisherConfig3
     *
     * Deletes the specified Publisher configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $publisher  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function deletePublisherConfig3($serverName, $publisher)
    {
        list($response) = $this->deletePublisherConfig3WithHttpInfo($serverName, $publisher);
        return $response;
    }


    /**
     * Operation deletePublisherConfig3WithHttpInfo
     *
     * Deletes the specified Publisher configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $publisher  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function deletePublisherConfig3WithHttpInfo($serverName, $publisher)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling deletePublisherConfig3');
        }

        // verify the required parameter 'publisher' is set
        if ($publisher === null) {
            throw new \InvalidArgumentException('Missing the required parameter $publisher when calling deletePublisherConfig3');
        }

        // parse inputs
        $resourcePath = "/v3/servers/{serverName}/publishers/{publisher}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($publisher !== null) {
            $resourcePath = str_replace(
                "{" . "publisher" . "}",
                $this->apiClient->getSerializer()->toPathValue($publisher),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation getPublisherConfig
     *
     * Retrieves the specified Publisher configuration.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return  PublisherConfig
     * @throws ApiException on non-2xx response
     */
    public function getPublisherConfig($serverName)
    {
        list($response) = $this->getPublisherConfigWithHttpInfo($serverName);
        return $response;
    }


    /**
     * Operation getPublisherConfigWithHttpInfo
     *
     * Retrieves the specified Publisher configuration.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return Array of \Model\PublisherConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getPublisherConfigWithHttpInfo($serverName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getPublisherConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/publishers/{publisher}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                PublisherConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, PublisherConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), PublisherConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getPublisherConfig3
     *
     * Retrieves the specified Publisher configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $publisher  (required)
     *
     * @return  PublisherConfig3
     * @throws ApiException on non-2xx response
     */
    public function getPublisherConfig3($serverName, $publisher)
    {
        list($response) = $this->getPublisherConfig3WithHttpInfo($serverName, $publisher);
        return $response;
    }


    /**
     * Operation getPublisherConfig3WithHttpInfo
     *
     * Retrieves the specified Publisher configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $publisher  (required)
     *
     * @return Array of \Model\PublisherConfig3, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getPublisherConfig3WithHttpInfo($serverName, $publisher)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getPublisherConfig3');
        }

        // verify the required parameter 'publisher' is set
        if ($publisher === null) {
            throw new \InvalidArgumentException('Missing the required parameter $publisher when calling getPublisherConfig3');
        }

        // parse inputs
        $resourcePath = "/v3/servers/{serverName}/publishers/{publisher}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($publisher !== null) {
            $resourcePath = str_replace(
                "{" . "publisher" . "}",
                $this->apiClient->getSerializer()->toPathValue($publisher),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                PublisherConfig3::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, PublisherConfig3::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), PublisherConfig3::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getPublishersConfig
     *
     * Retrieves the list of server Publishers.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return  PublishersConfig
     * @throws ApiException on non-2xx response
     */
    public function getPublishersConfig($serverName)
    {
        list($response) = $this->getPublishersConfigWithHttpInfo($serverName);
        return $response;
    }


    /**
     * Operation getPublishersConfigWithHttpInfo
     *
     * Retrieves the list of server Publishers.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return Array of \Model\PublishersConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getPublishersConfigWithHttpInfo($serverName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getPublishersConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/publishers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                PublishersConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, PublishersConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), PublishersConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getPublishersConfig3
     *
     * Retrieves the list of server Publishers.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return  PublishersConfig3
     * @throws ApiException on non-2xx response
     */
    public function getPublishersConfig3($serverName)
    {
        list($response) = $this->getPublishersConfig3WithHttpInfo($serverName);
        return $response;
    }


    /**
     * Operation getPublishersConfig3WithHttpInfo
     *
     * Retrieves the list of server Publishers.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return Array of \Model\PublishersConfig3, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getPublishersConfig3WithHttpInfo($serverName)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getPublishersConfig3');
        }

        // parse inputs
        $resourcePath = "/v3/servers/{serverName}/publishers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                PublishersConfig3::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, PublishersConfig3::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), PublishersConfig3::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation postPublisherConfig
     *
     * Adds the specified Publisher configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param PublisherConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postPublisherConfig($serverName, $body)
    {
        list($response) = $this->postPublisherConfigWithHttpInfo($serverName, $body);
        return $response;
    }


    /**
     * Operation postPublisherConfigWithHttpInfo
     *
     * Adds the specified Publisher configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param PublisherConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postPublisherConfigWithHttpInfo($serverName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postPublisherConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postPublisherConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/publishers/{publisher}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postPublisherConfig3
     *
     * Adds the specified Publisher configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $publisher  (required)
     * @param PublisherConfig3 $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postPublisherConfig3($serverName, $publisher, $body)
    {
        list($response) = $this->postPublisherConfig3WithHttpInfo($serverName, $publisher, $body);
        return $response;
    }


    /**
     * Operation postPublisherConfig3WithHttpInfo
     *
     * Adds the specified Publisher configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $publisher  (required)
     * @param PublisherConfig3 $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postPublisherConfig3WithHttpInfo($serverName, $publisher, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postPublisherConfig3');
        }

        // verify the required parameter 'publisher' is set
        if ($publisher === null) {
            throw new \InvalidArgumentException('Missing the required parameter $publisher when calling postPublisherConfig3');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postPublisherConfig3');
        }

        // parse inputs
        $resourcePath = "/v3/servers/{serverName}/publishers/{publisher}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($publisher !== null) {
            $resourcePath = str_replace(
                "{" . "publisher" . "}",
                $this->apiClient->getSerializer()->toPathValue($publisher),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postPublishersConfig
     *
     * Adds a new Publisher to the list.
     *
     * @param string $serverName Reserved for future use (required)
     * @param PublisherConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postPublishersConfig($serverName, $body)
    {
        list($response) = $this->postPublishersConfigWithHttpInfo($serverName, $body);
        return $response;
    }


    /**
     * Operation postPublishersConfigWithHttpInfo
     *
     * Adds a new Publisher to the list.
     *
     * @param string $serverName Reserved for future use (required)
     * @param PublisherConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postPublishersConfigWithHttpInfo($serverName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postPublishersConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postPublishersConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/publishers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation postPublishersConfig3
     *
     * Adds a new Publisher to the list.
     *
     * @param string $serverName Reserved for future use (required)
     * @param PublisherConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function postPublishersConfig3($serverName, $body)
    {
        list($response) = $this->postPublishersConfig3WithHttpInfo($serverName, $body);
        return $response;
    }


    /**
     * Operation postPublishersConfig3WithHttpInfo
     *
     * Adds a new Publisher to the list.
     *
     * @param string $serverName Reserved for future use (required)
     * @param PublisherConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function postPublishersConfig3WithHttpInfo($serverName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling postPublishersConfig3');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postPublishersConfig3');
        }

        // parse inputs
        $resourcePath = "/v3/servers/{serverName}/publishers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putPublisherConfig
     *
     * Updates the specified Publisher configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param PublisherConfig $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putPublisherConfig($serverName, $body)
    {
        list($response) = $this->putPublisherConfigWithHttpInfo($serverName, $body);
        return $response;
    }


    /**
     * Operation putPublisherConfigWithHttpInfo
     *
     * Updates the specified Publisher configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param PublisherConfig $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putPublisherConfigWithHttpInfo($serverName, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putPublisherConfig');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putPublisherConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/publishers/{publisher}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation putPublisherConfig3
     *
     * Updates the specified Publisher configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $publisher  (required)
     * @param PublisherConfig3 $body  (required)
     *
     * @return void
     * @throws ApiException on non-2xx response
     */
    public function putPublisherConfig3($serverName, $publisher, $body)
    {
        list($response) = $this->putPublisherConfig3WithHttpInfo($serverName, $publisher, $body);
        return $response;
    }


    /**
     * Operation putPublisherConfig3WithHttpInfo
     *
     * Updates the specified Publisher configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $publisher  (required)
     * @param PublisherConfig3 $body  (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function putPublisherConfig3WithHttpInfo($serverName, $publisher, $body)
    {
        
        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling putPublisherConfig3');
        }

        // verify the required parameter 'publisher' is set
        if ($publisher === null) {
            throw new \InvalidArgumentException('Missing the required parameter $publisher when calling putPublisherConfig3');
        }

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putPublisherConfig3');
        }

        // parse inputs
        $resourcePath = "/v3/servers/{serverName}/publishers/{publisher}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/xml','text/xml','application/json'));

        
        
        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($publisher !== null) {
            $resourcePath = str_replace(
                "{" . "publisher" . "}",
                $this->apiClient->getSerializer()->toPathValue($publisher),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
}
