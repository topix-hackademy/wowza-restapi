<?php
/**
 * VserversserverNamemediacastersApi
 * PHP version 5
 *
 * @category Class
 * @package  WowzaApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Topix\Hackademy\WowzaApi\Client;

use Topix\Hackademy\WowzaApi\Configuration;
use Topix\Hackademy\WowzaApi\ApiClient;
use Topix\Hackademy\WowzaApi\ApiException;
use Topix\Hackademy\WowzaApi\Model\MediaCasterConfig;
use Topix\Hackademy\WowzaApi\Model\MediaCastersConfig;
use Topix\Hackademy\WowzaApi\ObjectSerializer;

/**
 * VserversserverNamemediacastersApi Class Doc Comment
 *
 * @category Class
 * @package  WowzaApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VserversserverNamemediacastersApi extends SwaggerApi
{

     /**
     * Operation getMediaCasterConfig
     *
     * Retrieves the specified MediaCaster configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $mediacastername  (required)
     *
     * @return  MediaCasterConfig
     * @throws ApiException on non-2xx response
     */
    public function getMediaCasterConfig($serverName, $mediacastername)
    {
        list($response) = $this->getMediaCasterConfigWithHttpInfo($serverName, $mediacastername);
        return $response;
    }


    /**
     * Operation getMediaCasterConfigWithHttpInfo
     *
     * Retrieves the specified MediaCaster configuration.
     *
     * @param string $serverName Reserved for future use (required)
     * @param string $mediacastername  (required)
     *
     * @return Array of \Model\MediaCasterConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getMediaCasterConfigWithHttpInfo($serverName, $mediacastername)
    {

        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getMediaCasterConfig');
        }

        // verify the required parameter 'mediacastername' is set
        if ($mediacastername === null) {
            throw new \InvalidArgumentException('Missing the required parameter $mediacastername when calling getMediaCasterConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/mediacasters/{mediacastername}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());



        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }// path params
        if ($mediacastername !== null) {
            $resourcePath = str_replace(
                "{" . "mediacastername" . "}",
                $this->apiClient->getSerializer()->toPathValue($mediacastername),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);




        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                MediaCasterConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, MediaCasterConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), MediaCasterConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation getMediaCastersConfig
     *
     * Retrieves the list of MediaCasters.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return  MediaCastersConfig
     * @throws ApiException on non-2xx response
     */
    public function getMediaCastersConfig($serverName)
    {
        list($response) = $this->getMediaCastersConfigWithHttpInfo($serverName);
        return $response;
    }


    /**
     * Operation getMediaCastersConfigWithHttpInfo
     *
     * Retrieves the list of MediaCasters.
     *
     * @param string $serverName Reserved for future use (required)
     *
     * @return Array of \Model\MediaCastersConfig, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     */
    public function getMediaCastersConfigWithHttpInfo($serverName)
    {

        // verify the required parameter 'serverName' is set
        if ($serverName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $serverName when calling getMediaCastersConfig');
        }

        // parse inputs
        $resourcePath = "/v2/servers/{serverName}/mediacasters";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/xml', 'text/xml', 'application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());



        // path params
        if ($serverName !== null) {
            $resourcePath = str_replace(
                "{" . "serverName" . "}",
                $this->apiClient->getSerializer()->toPathValue($serverName),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);




        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                MediaCastersConfig::class
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, MediaCastersConfig::class, $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), MediaCastersConfig::class, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
