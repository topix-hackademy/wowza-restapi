<?php
/**
 * SecurityConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  WowzaApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Topix\Hackademy\WowzaApi\Model;


/**
 * SecurityConfig Class Doc Comment
 *
 * @category    Class
 * @package     WowzaApi
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SecurityConfig extends SwaggerModel
 {

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SecurityConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'playMaximumConnections' => 'int',
        'publishBlockDuplicateStreamNames' => 'bool',
        'publishIPWhiteList' => 'string',
        'playAuthenticationMethod' => 'string',
        'serverName' => 'string',
        'clientStreamWriteAccess' => 'string',
        'playIPWhiteList' => 'string',
        'publishRequirePassword' => 'bool',
        'playIPBlackList' => 'string',
        'version' => 'string',
        'secureTokenVersion' => 'int',
        'publishPasswordFile' => 'string',
        'publishValidEncoders' => 'string',
        'secureTokenQueryParametersPrefix' => 'string',
        'secureTokenUseTEAForRTMP' => 'bool',
        'publishAuthenticationMethod' => 'string',
        'secureTokenHashAlgorithm' => 'string',
        'publishIPBlackList' => 'string',
        'playRequireSecureConnection' => 'bool',
        'secureTokenOriginSharedSecret' => 'string',
        'saveFieldList' => 'string[]',
        'secureTokenIncludeClientIPInHash' => 'bool',
        'publishRTMPSecureURL' => 'string',
        'secureTokenSharedSecret' => 'string'
);

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'playMaximumConnections' => 'playMaximumConnections',
        'publishBlockDuplicateStreamNames' => 'publishBlockDuplicateStreamNames',
        'publishIPWhiteList' => 'publishIPWhiteList',
        'playAuthenticationMethod' => 'playAuthenticationMethod',
        'serverName' => 'serverName',
        'clientStreamWriteAccess' => 'clientStreamWriteAccess',
        'playIPWhiteList' => 'playIPWhiteList',
        'publishRequirePassword' => 'publishRequirePassword',
        'playIPBlackList' => 'playIPBlackList',
        'version' => 'version',
        'secureTokenVersion' => 'secureTokenVersion',
        'publishPasswordFile' => 'publishPasswordFile',
        'publishValidEncoders' => 'publishValidEncoders',
        'secureTokenQueryParametersPrefix' => 'secureTokenQueryParametersPrefix',
        'secureTokenUseTEAForRTMP' => 'secureTokenUseTEAForRTMP',
        'publishAuthenticationMethod' => 'publishAuthenticationMethod',
        'secureTokenHashAlgorithm' => 'secureTokenHashAlgorithm',
        'publishIPBlackList' => 'publishIPBlackList',
        'playRequireSecureConnection' => 'playRequireSecureConnection',
        'secureTokenOriginSharedSecret' => 'secureTokenOriginSharedSecret',
        'saveFieldList' => 'saveFieldList',
        'secureTokenIncludeClientIPInHash' => 'secureTokenIncludeClientIPInHash',
        'publishRTMPSecureURL' => 'publishRTMPSecureURL',
        'secureTokenSharedSecret' => 'secureTokenSharedSecret'
);

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'playMaximumConnections' => 'setPlayMaximumConnections',
        'publishBlockDuplicateStreamNames' => 'setPublishBlockDuplicateStreamNames',
        'publishIPWhiteList' => 'setPublishIPWhiteList',
        'playAuthenticationMethod' => 'setPlayAuthenticationMethod',
        'serverName' => 'setServerName',
        'clientStreamWriteAccess' => 'setClientStreamWriteAccess',
        'playIPWhiteList' => 'setPlayIPWhiteList',
        'publishRequirePassword' => 'setPublishRequirePassword',
        'playIPBlackList' => 'setPlayIPBlackList',
        'version' => 'setVersion',
        'secureTokenVersion' => 'setSecureTokenVersion',
        'publishPasswordFile' => 'setPublishPasswordFile',
        'publishValidEncoders' => 'setPublishValidEncoders',
        'secureTokenQueryParametersPrefix' => 'setSecureTokenQueryParametersPrefix',
        'secureTokenUseTEAForRTMP' => 'setSecureTokenUseTEAForRTMP',
        'publishAuthenticationMethod' => 'setPublishAuthenticationMethod',
        'secureTokenHashAlgorithm' => 'setSecureTokenHashAlgorithm',
        'publishIPBlackList' => 'setPublishIPBlackList',
        'playRequireSecureConnection' => 'setPlayRequireSecureConnection',
        'secureTokenOriginSharedSecret' => 'setSecureTokenOriginSharedSecret',
        'saveFieldList' => 'setSaveFieldList',
        'secureTokenIncludeClientIPInHash' => 'setSecureTokenIncludeClientIPInHash',
        'publishRTMPSecureURL' => 'setPublishRTMPSecureURL',
        'secureTokenSharedSecret' => 'setSecureTokenSharedSecret'
);

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'playMaximumConnections' => 'getPlayMaximumConnections',
        'publishBlockDuplicateStreamNames' => 'getPublishBlockDuplicateStreamNames',
        'publishIPWhiteList' => 'getPublishIPWhiteList',
        'playAuthenticationMethod' => 'getPlayAuthenticationMethod',
        'serverName' => 'getServerName',
        'clientStreamWriteAccess' => 'getClientStreamWriteAccess',
        'playIPWhiteList' => 'getPlayIPWhiteList',
        'publishRequirePassword' => 'getPublishRequirePassword',
        'playIPBlackList' => 'getPlayIPBlackList',
        'version' => 'getVersion',
        'secureTokenVersion' => 'getSecureTokenVersion',
        'publishPasswordFile' => 'getPublishPasswordFile',
        'publishValidEncoders' => 'getPublishValidEncoders',
        'secureTokenQueryParametersPrefix' => 'getSecureTokenQueryParametersPrefix',
        'secureTokenUseTEAForRTMP' => 'getSecureTokenUseTEAForRTMP',
        'publishAuthenticationMethod' => 'getPublishAuthenticationMethod',
        'secureTokenHashAlgorithm' => 'getSecureTokenHashAlgorithm',
        'publishIPBlackList' => 'getPublishIPBlackList',
        'playRequireSecureConnection' => 'getPlayRequireSecureConnection',
        'secureTokenOriginSharedSecret' => 'getSecureTokenOriginSharedSecret',
        'saveFieldList' => 'getSaveFieldList',
        'secureTokenIncludeClientIPInHash' => 'getSecureTokenIncludeClientIPInHash',
        'publishRTMPSecureURL' => 'getPublishRTMPSecureURL',
        'secureTokenSharedSecret' => 'getSecureTokenSharedSecret'
);

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['playMaximumConnections'] = isset($data['playMaximumConnections']) ? $data['playMaximumConnections'] : null;
        $this->container['publishBlockDuplicateStreamNames'] = isset($data['publishBlockDuplicateStreamNames']) ? $data['publishBlockDuplicateStreamNames'] : null;
        $this->container['publishIPWhiteList'] = isset($data['publishIPWhiteList']) ? $data['publishIPWhiteList'] : null;
        $this->container['playAuthenticationMethod'] = isset($data['playAuthenticationMethod']) ? $data['playAuthenticationMethod'] : null;
        $this->container['serverName'] = isset($data['serverName']) ? $data['serverName'] : null;
        $this->container['clientStreamWriteAccess'] = isset($data['clientStreamWriteAccess']) ? $data['clientStreamWriteAccess'] : null;
        $this->container['playIPWhiteList'] = isset($data['playIPWhiteList']) ? $data['playIPWhiteList'] : null;
        $this->container['publishRequirePassword'] = isset($data['publishRequirePassword']) ? $data['publishRequirePassword'] : null;
        $this->container['playIPBlackList'] = isset($data['playIPBlackList']) ? $data['playIPBlackList'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['secureTokenVersion'] = isset($data['secureTokenVersion']) ? $data['secureTokenVersion'] : null;
        $this->container['publishPasswordFile'] = isset($data['publishPasswordFile']) ? $data['publishPasswordFile'] : null;
        $this->container['publishValidEncoders'] = isset($data['publishValidEncoders']) ? $data['publishValidEncoders'] : null;
        $this->container['secureTokenQueryParametersPrefix'] = isset($data['secureTokenQueryParametersPrefix']) ? $data['secureTokenQueryParametersPrefix'] : null;
        $this->container['secureTokenUseTEAForRTMP'] = isset($data['secureTokenUseTEAForRTMP']) ? $data['secureTokenUseTEAForRTMP'] : null;
        $this->container['publishAuthenticationMethod'] = isset($data['publishAuthenticationMethod']) ? $data['publishAuthenticationMethod'] : null;
        $this->container['secureTokenHashAlgorithm'] = isset($data['secureTokenHashAlgorithm']) ? $data['secureTokenHashAlgorithm'] : null;
        $this->container['publishIPBlackList'] = isset($data['publishIPBlackList']) ? $data['publishIPBlackList'] : null;
        $this->container['playRequireSecureConnection'] = isset($data['playRequireSecureConnection']) ? $data['playRequireSecureConnection'] : null;
        $this->container['secureTokenOriginSharedSecret'] = isset($data['secureTokenOriginSharedSecret']) ? $data['secureTokenOriginSharedSecret'] : null;
        $this->container['saveFieldList'] = isset($data['saveFieldList']) ? $data['saveFieldList'] : null;
        $this->container['secureTokenIncludeClientIPInHash'] = isset($data['secureTokenIncludeClientIPInHash']) ? $data['secureTokenIncludeClientIPInHash'] : null;
        $this->container['publishRTMPSecureURL'] = isset($data['publishRTMPSecureURL']) ? $data['publishRTMPSecureURL'] : null;
        $this->container['secureTokenSharedSecret'] = isset($data['secureTokenSharedSecret']) ? $data['secureTokenSharedSecret'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['playMaximumConnections'] === null) {
            $invalid_properties[] = "'playMaximumConnections' can't be null";
        }
        if ($this->container['publishBlockDuplicateStreamNames'] === null) {
            $invalid_properties[] = "'publishBlockDuplicateStreamNames' can't be null";
        }
        if ($this->container['publishIPWhiteList'] === null) {
            $invalid_properties[] = "'publishIPWhiteList' can't be null";
        }
        if ($this->container['playAuthenticationMethod'] === null) {
            $invalid_properties[] = "'playAuthenticationMethod' can't be null";
        }
        if ($this->container['serverName'] === null) {
            $invalid_properties[] = "'serverName' can't be null";
        }
        if ($this->container['clientStreamWriteAccess'] === null) {
            $invalid_properties[] = "'clientStreamWriteAccess' can't be null";
        }
        if ($this->container['playIPWhiteList'] === null) {
            $invalid_properties[] = "'playIPWhiteList' can't be null";
        }
        if ($this->container['publishRequirePassword'] === null) {
            $invalid_properties[] = "'publishRequirePassword' can't be null";
        }
        if ($this->container['playIPBlackList'] === null) {
            $invalid_properties[] = "'playIPBlackList' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalid_properties[] = "'version' can't be null";
        }
        if ($this->container['secureTokenVersion'] === null) {
            $invalid_properties[] = "'secureTokenVersion' can't be null";
        }
        if ($this->container['publishPasswordFile'] === null) {
            $invalid_properties[] = "'publishPasswordFile' can't be null";
        }
        if ($this->container['publishValidEncoders'] === null) {
            $invalid_properties[] = "'publishValidEncoders' can't be null";
        }
        if ($this->container['secureTokenQueryParametersPrefix'] === null) {
            $invalid_properties[] = "'secureTokenQueryParametersPrefix' can't be null";
        }
        if ($this->container['secureTokenUseTEAForRTMP'] === null) {
            $invalid_properties[] = "'secureTokenUseTEAForRTMP' can't be null";
        }
        if ($this->container['publishAuthenticationMethod'] === null) {
            $invalid_properties[] = "'publishAuthenticationMethod' can't be null";
        }
        if ($this->container['secureTokenHashAlgorithm'] === null) {
            $invalid_properties[] = "'secureTokenHashAlgorithm' can't be null";
        }
        if ($this->container['publishIPBlackList'] === null) {
            $invalid_properties[] = "'publishIPBlackList' can't be null";
        }
        if ($this->container['playRequireSecureConnection'] === null) {
            $invalid_properties[] = "'playRequireSecureConnection' can't be null";
        }
        if ($this->container['secureTokenOriginSharedSecret'] === null) {
            $invalid_properties[] = "'secureTokenOriginSharedSecret' can't be null";
        }
        if ($this->container['secureTokenIncludeClientIPInHash'] === null) {
            $invalid_properties[] = "'secureTokenIncludeClientIPInHash' can't be null";
        }
        if ($this->container['publishRTMPSecureURL'] === null) {
            $invalid_properties[] = "'publishRTMPSecureURL' can't be null";
        }
        if ($this->container['secureTokenSharedSecret'] === null) {
            $invalid_properties[] = "'secureTokenSharedSecret' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['playMaximumConnections'] === null) {
            return false;
        }
        if ($this->container['publishBlockDuplicateStreamNames'] === null) {
            return false;
        }
        if ($this->container['publishIPWhiteList'] === null) {
            return false;
        }
        if ($this->container['playAuthenticationMethod'] === null) {
            return false;
        }
        if ($this->container['serverName'] === null) {
            return false;
        }
        if ($this->container['clientStreamWriteAccess'] === null) {
            return false;
        }
        if ($this->container['playIPWhiteList'] === null) {
            return false;
        }
        if ($this->container['publishRequirePassword'] === null) {
            return false;
        }
        if ($this->container['playIPBlackList'] === null) {
            return false;
        }
        if ($this->container['version'] === null) {
            return false;
        }
        if ($this->container['secureTokenVersion'] === null) {
            return false;
        }
        if ($this->container['publishPasswordFile'] === null) {
            return false;
        }
        if ($this->container['publishValidEncoders'] === null) {
            return false;
        }
        if ($this->container['secureTokenQueryParametersPrefix'] === null) {
            return false;
        }
        if ($this->container['secureTokenUseTEAForRTMP'] === null) {
            return false;
        }
        if ($this->container['publishAuthenticationMethod'] === null) {
            return false;
        }
        if ($this->container['secureTokenHashAlgorithm'] === null) {
            return false;
        }
        if ($this->container['publishIPBlackList'] === null) {
            return false;
        }
        if ($this->container['playRequireSecureConnection'] === null) {
            return false;
        }
        if ($this->container['secureTokenOriginSharedSecret'] === null) {
            return false;
        }
        if ($this->container['secureTokenIncludeClientIPInHash'] === null) {
            return false;
        }
        if ($this->container['publishRTMPSecureURL'] === null) {
            return false;
        }
        if ($this->container['secureTokenSharedSecret'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets playMaximumConnections
     * @return int
     */
    public function getPlayMaximumConnections()
    {
        return $this->container['playMaximumConnections'];
    }

    /**
     * Sets playMaximumConnections
     * @param int $playMaximumConnections
     * @return $this
     */
    public function setPlayMaximumConnections($playMaximumConnections)
    {
        $this->container['playMaximumConnections'] = $playMaximumConnections;

        return $this;
    }

    /**
     * Gets publishBlockDuplicateStreamNames
     * @return bool
     */
    public function getPublishBlockDuplicateStreamNames()
    {
        return $this->container['publishBlockDuplicateStreamNames'];
    }

    /**
     * Sets publishBlockDuplicateStreamNames
     * @param bool $publishBlockDuplicateStreamNames
     * @return $this
     */
    public function setPublishBlockDuplicateStreamNames($publishBlockDuplicateStreamNames)
    {
        $this->container['publishBlockDuplicateStreamNames'] = $publishBlockDuplicateStreamNames;

        return $this;
    }

    /**
     * Gets publishIPWhiteList
     * @return string
     */
    public function getPublishIPWhiteList()
    {
        return $this->container['publishIPWhiteList'];
    }

    /**
     * Sets publishIPWhiteList
     * @param string $publishIPWhiteList
     * @return $this
     */
    public function setPublishIPWhiteList($publishIPWhiteList)
    {
        $this->container['publishIPWhiteList'] = $publishIPWhiteList;

        return $this;
    }

    /**
     * Gets playAuthenticationMethod
     * @return string
     */
    public function getPlayAuthenticationMethod()
    {
        return $this->container['playAuthenticationMethod'];
    }

    /**
     * Sets playAuthenticationMethod
     * @param string $playAuthenticationMethod
     * @return $this
     */
    public function setPlayAuthenticationMethod($playAuthenticationMethod)
    {
        $this->container['playAuthenticationMethod'] = $playAuthenticationMethod;

        return $this;
    }

    /**
     * Gets serverName
     * @return string
     */
    public function getServerName()
    {
        return $this->container['serverName'];
    }

    /**
     * Sets serverName
     * @param string $serverName
     * @return $this
     */
    public function setServerName($serverName)
    {
        $this->container['serverName'] = $serverName;

        return $this;
    }

    /**
     * Gets clientStreamWriteAccess
     * @return string
     */
    public function getClientStreamWriteAccess()
    {
        return $this->container['clientStreamWriteAccess'];
    }

    /**
     * Sets clientStreamWriteAccess
     * @param string $clientStreamWriteAccess
     * @return $this
     */
    public function setClientStreamWriteAccess($clientStreamWriteAccess)
    {
        $this->container['clientStreamWriteAccess'] = $clientStreamWriteAccess;

        return $this;
    }

    /**
     * Gets playIPWhiteList
     * @return string
     */
    public function getPlayIPWhiteList()
    {
        return $this->container['playIPWhiteList'];
    }

    /**
     * Sets playIPWhiteList
     * @param string $playIPWhiteList
     * @return $this
     */
    public function setPlayIPWhiteList($playIPWhiteList)
    {
        $this->container['playIPWhiteList'] = $playIPWhiteList;

        return $this;
    }

    /**
     * Gets publishRequirePassword
     * @return bool
     */
    public function getPublishRequirePassword()
    {
        return $this->container['publishRequirePassword'];
    }

    /**
     * Sets publishRequirePassword
     * @param bool $publishRequirePassword
     * @return $this
     */
    public function setPublishRequirePassword($publishRequirePassword)
    {
        $this->container['publishRequirePassword'] = $publishRequirePassword;

        return $this;
    }

    /**
     * Gets playIPBlackList
     * @return string
     */
    public function getPlayIPBlackList()
    {
        return $this->container['playIPBlackList'];
    }

    /**
     * Sets playIPBlackList
     * @param string $playIPBlackList
     * @return $this
     */
    public function setPlayIPBlackList($playIPBlackList)
    {
        $this->container['playIPBlackList'] = $playIPBlackList;

        return $this;
    }

    /**
     * Gets version
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     * @param string $version
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets secureTokenVersion
     * @return int
     */
    public function getSecureTokenVersion()
    {
        return $this->container['secureTokenVersion'];
    }

    /**
     * Sets secureTokenVersion
     * @param int $secureTokenVersion
     * @return $this
     */
    public function setSecureTokenVersion($secureTokenVersion)
    {
        $this->container['secureTokenVersion'] = $secureTokenVersion;

        return $this;
    }

    /**
     * Gets publishPasswordFile
     * @return string
     */
    public function getPublishPasswordFile()
    {
        return $this->container['publishPasswordFile'];
    }

    /**
     * Sets publishPasswordFile
     * @param string $publishPasswordFile
     * @return $this
     */
    public function setPublishPasswordFile($publishPasswordFile)
    {
        $this->container['publishPasswordFile'] = $publishPasswordFile;

        return $this;
    }

    /**
     * Gets publishValidEncoders
     * @return string
     */
    public function getPublishValidEncoders()
    {
        return $this->container['publishValidEncoders'];
    }

    /**
     * Sets publishValidEncoders
     * @param string $publishValidEncoders
     * @return $this
     */
    public function setPublishValidEncoders($publishValidEncoders)
    {
        $this->container['publishValidEncoders'] = $publishValidEncoders;

        return $this;
    }

    /**
     * Gets secureTokenQueryParametersPrefix
     * @return string
     */
    public function getSecureTokenQueryParametersPrefix()
    {
        return $this->container['secureTokenQueryParametersPrefix'];
    }

    /**
     * Sets secureTokenQueryParametersPrefix
     * @param string $secureTokenQueryParametersPrefix
     * @return $this
     */
    public function setSecureTokenQueryParametersPrefix($secureTokenQueryParametersPrefix)
    {
        $this->container['secureTokenQueryParametersPrefix'] = $secureTokenQueryParametersPrefix;

        return $this;
    }

    /**
     * Gets secureTokenUseTEAForRTMP
     * @return bool
     */
    public function getSecureTokenUseTEAForRTMP()
    {
        return $this->container['secureTokenUseTEAForRTMP'];
    }

    /**
     * Sets secureTokenUseTEAForRTMP
     * @param bool $secureTokenUseTEAForRTMP
     * @return $this
     */
    public function setSecureTokenUseTEAForRTMP($secureTokenUseTEAForRTMP)
    {
        $this->container['secureTokenUseTEAForRTMP'] = $secureTokenUseTEAForRTMP;

        return $this;
    }

    /**
     * Gets publishAuthenticationMethod
     * @return string
     */
    public function getPublishAuthenticationMethod()
    {
        return $this->container['publishAuthenticationMethod'];
    }

    /**
     * Sets publishAuthenticationMethod
     * @param string $publishAuthenticationMethod
     * @return $this
     */
    public function setPublishAuthenticationMethod($publishAuthenticationMethod)
    {
        $this->container['publishAuthenticationMethod'] = $publishAuthenticationMethod;

        return $this;
    }

    /**
     * Gets secureTokenHashAlgorithm
     * @return string
     */
    public function getSecureTokenHashAlgorithm()
    {
        return $this->container['secureTokenHashAlgorithm'];
    }

    /**
     * Sets secureTokenHashAlgorithm
     * @param string $secureTokenHashAlgorithm
     * @return $this
     */
    public function setSecureTokenHashAlgorithm($secureTokenHashAlgorithm)
    {
        $this->container['secureTokenHashAlgorithm'] = $secureTokenHashAlgorithm;

        return $this;
    }

    /**
     * Gets publishIPBlackList
     * @return string
     */
    public function getPublishIPBlackList()
    {
        return $this->container['publishIPBlackList'];
    }

    /**
     * Sets publishIPBlackList
     * @param string $publishIPBlackList
     * @return $this
     */
    public function setPublishIPBlackList($publishIPBlackList)
    {
        $this->container['publishIPBlackList'] = $publishIPBlackList;

        return $this;
    }

    /**
     * Gets playRequireSecureConnection
     * @return bool
     */
    public function getPlayRequireSecureConnection()
    {
        return $this->container['playRequireSecureConnection'];
    }

    /**
     * Sets playRequireSecureConnection
     * @param bool $playRequireSecureConnection
     * @return $this
     */
    public function setPlayRequireSecureConnection($playRequireSecureConnection)
    {
        $this->container['playRequireSecureConnection'] = $playRequireSecureConnection;

        return $this;
    }

    /**
     * Gets secureTokenOriginSharedSecret
     * @return string
     */
    public function getSecureTokenOriginSharedSecret()
    {
        return $this->container['secureTokenOriginSharedSecret'];
    }

    /**
     * Sets secureTokenOriginSharedSecret
     * @param string $secureTokenOriginSharedSecret
     * @return $this
     */
    public function setSecureTokenOriginSharedSecret($secureTokenOriginSharedSecret)
    {
        $this->container['secureTokenOriginSharedSecret'] = $secureTokenOriginSharedSecret;

        return $this;
    }

    /**
     * Gets saveFieldList
     * @return string[]
     */
    public function getSaveFieldList()
    {
        return $this->container['saveFieldList'];
    }

    /**
     * Sets saveFieldList
     * @param string[] $saveFieldList
     * @return $this
     */
    public function setSaveFieldList($saveFieldList)
    {
        $this->container['saveFieldList'] = $saveFieldList;

        return $this;
    }

    /**
     * Gets secureTokenIncludeClientIPInHash
     * @return bool
     */
    public function getSecureTokenIncludeClientIPInHash()
    {
        return $this->container['secureTokenIncludeClientIPInHash'];
    }

    /**
     * Sets secureTokenIncludeClientIPInHash
     * @param bool $secureTokenIncludeClientIPInHash
     * @return $this
     */
    public function setSecureTokenIncludeClientIPInHash($secureTokenIncludeClientIPInHash)
    {
        $this->container['secureTokenIncludeClientIPInHash'] = $secureTokenIncludeClientIPInHash;

        return $this;
    }

    /**
     * Gets publishRTMPSecureURL
     * @return string
     */
    public function getPublishRTMPSecureURL()
    {
        return $this->container['publishRTMPSecureURL'];
    }

    /**
     * Sets publishRTMPSecureURL
     * @param string $publishRTMPSecureURL
     * @return $this
     */
    public function setPublishRTMPSecureURL($publishRTMPSecureURL)
    {
        $this->container['publishRTMPSecureURL'] = $publishRTMPSecureURL;

        return $this;
    }

    /**
     * Gets secureTokenSharedSecret
     * @return string
     */
    public function getSecureTokenSharedSecret()
    {
        return $this->container['secureTokenSharedSecret'];
    }

    /**
     * Sets secureTokenSharedSecret
     * @param string $secureTokenSharedSecret
     * @return $this
     */
    public function setSecureTokenSharedSecret($secureTokenSharedSecret)
    {
        $this->container['secureTokenSharedSecret'] = $secureTokenSharedSecret;

        return $this;
}

}
