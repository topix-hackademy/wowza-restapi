<?php
/**
 * AppShortObject
 *
 * PHP version 5
 *
 * @category Class
 * @package  WowzaApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Topix\Hackademy\WowzaApi\Model;


/**
 * AppShortObject Class Doc Comment
 *
 * @category    Class
 * @package     WowzaApi
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AppShortObject extends SwaggerModel
 {

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'AppShortObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'drmEnabled' => 'bool',
        'streamTargetsEnabled' => 'bool',
        'appType' => 'string',
        'transcoderEnabled' => 'bool',
        'dvrEnabled' => 'bool',
        'id' => 'string',
        'href' => 'string'
);

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'drmEnabled' => 'drmEnabled',
        'streamTargetsEnabled' => 'streamTargetsEnabled',
        'appType' => 'appType',
        'transcoderEnabled' => 'transcoderEnabled',
        'dvrEnabled' => 'dvrEnabled',
        'id' => 'id',
        'href' => 'href'
);

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'drmEnabled' => 'setDrmEnabled',
        'streamTargetsEnabled' => 'setStreamTargetsEnabled',
        'appType' => 'setAppType',
        'transcoderEnabled' => 'setTranscoderEnabled',
        'dvrEnabled' => 'setDvrEnabled',
        'id' => 'setId',
        'href' => 'setHref'
);

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'drmEnabled' => 'getDrmEnabled',
        'streamTargetsEnabled' => 'getStreamTargetsEnabled',
        'appType' => 'getAppType',
        'transcoderEnabled' => 'getTranscoderEnabled',
        'dvrEnabled' => 'getDvrEnabled',
        'id' => 'getId',
        'href' => 'getHref'
);

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['drmEnabled'] = isset($data['drmEnabled']) ? $data['drmEnabled'] : null;
        $this->container['streamTargetsEnabled'] = isset($data['streamTargetsEnabled']) ? $data['streamTargetsEnabled'] : null;
        $this->container['appType'] = isset($data['appType']) ? $data['appType'] : null;
        $this->container['transcoderEnabled'] = isset($data['transcoderEnabled']) ? $data['transcoderEnabled'] : null;
        $this->container['dvrEnabled'] = isset($data['dvrEnabled']) ? $data['dvrEnabled'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['href'] = isset($data['href']) ? $data['href'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['drmEnabled'] === null) {
            $invalid_properties[] = "'drmEnabled' can't be null";
        }
        if ($this->container['streamTargetsEnabled'] === null) {
            $invalid_properties[] = "'streamTargetsEnabled' can't be null";
        }
        if ($this->container['appType'] === null) {
            $invalid_properties[] = "'appType' can't be null";
        }
        if ($this->container['transcoderEnabled'] === null) {
            $invalid_properties[] = "'transcoderEnabled' can't be null";
        }
        if ($this->container['dvrEnabled'] === null) {
            $invalid_properties[] = "'dvrEnabled' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['href'] === null) {
            $invalid_properties[] = "'href' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['drmEnabled'] === null) {
            return false;
        }
        if ($this->container['streamTargetsEnabled'] === null) {
            return false;
        }
        if ($this->container['appType'] === null) {
            return false;
        }
        if ($this->container['transcoderEnabled'] === null) {
            return false;
        }
        if ($this->container['dvrEnabled'] === null) {
            return false;
        }
        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['href'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets drmEnabled
     * @return bool
     */
    public function getDrmEnabled()
    {
        return $this->container['drmEnabled'];
    }

    /**
     * Sets drmEnabled
     * @param bool $drmEnabled
     * @return $this
     */
    public function setDrmEnabled($drmEnabled)
    {
        $this->container['drmEnabled'] = $drmEnabled;

        return $this;
    }

    /**
     * Gets streamTargetsEnabled
     * @return bool
     */
    public function getStreamTargetsEnabled()
    {
        return $this->container['streamTargetsEnabled'];
    }

    /**
     * Sets streamTargetsEnabled
     * @param bool $streamTargetsEnabled
     * @return $this
     */
    public function setStreamTargetsEnabled($streamTargetsEnabled)
    {
        $this->container['streamTargetsEnabled'] = $streamTargetsEnabled;

        return $this;
    }

    /**
     * Gets appType
     * @return string
     */
    public function getAppType()
    {
        return $this->container['appType'];
    }

    /**
     * Sets appType
     * @param string $appType
     * @return $this
     */
    public function setAppType($appType)
    {
        $this->container['appType'] = $appType;

        return $this;
    }

    /**
     * Gets transcoderEnabled
     * @return bool
     */
    public function getTranscoderEnabled()
    {
        return $this->container['transcoderEnabled'];
    }

    /**
     * Sets transcoderEnabled
     * @param bool $transcoderEnabled
     * @return $this
     */
    public function setTranscoderEnabled($transcoderEnabled)
    {
        $this->container['transcoderEnabled'] = $transcoderEnabled;

        return $this;
    }

    /**
     * Gets dvrEnabled
     * @return bool
     */
    public function getDvrEnabled()
    {
        return $this->container['dvrEnabled'];
    }

    /**
     * Sets dvrEnabled
     * @param bool $dvrEnabled
     * @return $this
     */
    public function setDvrEnabled($dvrEnabled)
    {
        $this->container['dvrEnabled'] = $dvrEnabled;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets href
     * @return string
     */
    public function getHref()
    {
        return $this->container['href'];
    }

    /**
     * Sets href
     * @param string $href
     * @return $this
     */
    public function setHref($href)
    {
        $this->container['href'] = $href;

        return $this;
}

}
