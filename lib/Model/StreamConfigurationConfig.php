<?php
/**
 * StreamConfigurationConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  WowzaApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Topix\Hackademy\WowzaApi\Model;


/**
 * StreamConfigurationConfig Class Doc Comment
 *
 * @category    Class
 * @package     WowzaApi
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class StreamConfigurationConfig extends SwaggerModel
 {

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'StreamConfigurationConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'streamType' => 'string',
        'storageDirExists' => 'bool',
        'keyDir' => 'string',
        'createStorageDir' => 'bool',
        'liveStreamPacketizer' => 'string[]',
        'serverName' => 'string',
        'storageDir' => 'string',
        'saveFieldList' => 'string[]',
        'version' => 'string',
        'httpRandomizeMediaName' => 'bool'
);

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'streamType' => 'streamType',
        'storageDirExists' => 'storageDirExists',
        'keyDir' => 'keyDir',
        'createStorageDir' => 'createStorageDir',
        'liveStreamPacketizer' => 'liveStreamPacketizer',
        'serverName' => 'serverName',
        'storageDir' => 'storageDir',
        'saveFieldList' => 'saveFieldList',
        'version' => 'version',
        'httpRandomizeMediaName' => 'httpRandomizeMediaName'
);

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'streamType' => 'setStreamType',
        'storageDirExists' => 'setStorageDirExists',
        'keyDir' => 'setKeyDir',
        'createStorageDir' => 'setCreateStorageDir',
        'liveStreamPacketizer' => 'setLiveStreamPacketizer',
        'serverName' => 'setServerName',
        'storageDir' => 'setStorageDir',
        'saveFieldList' => 'setSaveFieldList',
        'version' => 'setVersion',
        'httpRandomizeMediaName' => 'setHttpRandomizeMediaName'
);

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'streamType' => 'getStreamType',
        'storageDirExists' => 'getStorageDirExists',
        'keyDir' => 'getKeyDir',
        'createStorageDir' => 'getCreateStorageDir',
        'liveStreamPacketizer' => 'getLiveStreamPacketizer',
        'serverName' => 'getServerName',
        'storageDir' => 'getStorageDir',
        'saveFieldList' => 'getSaveFieldList',
        'version' => 'getVersion',
        'httpRandomizeMediaName' => 'getHttpRandomizeMediaName'
);

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['streamType'] = isset($data['streamType']) ? $data['streamType'] : null;
        $this->container['storageDirExists'] = isset($data['storageDirExists']) ? $data['storageDirExists'] : null;
        $this->container['keyDir'] = isset($data['keyDir']) ? $data['keyDir'] : null;
        $this->container['createStorageDir'] = isset($data['createStorageDir']) ? $data['createStorageDir'] : null;
        $this->container['liveStreamPacketizer'] = isset($data['liveStreamPacketizer']) ? $data['liveStreamPacketizer'] : null;
        $this->container['serverName'] = isset($data['serverName']) ? $data['serverName'] : null;
        $this->container['storageDir'] = isset($data['storageDir']) ? $data['storageDir'] : null;
        $this->container['saveFieldList'] = isset($data['saveFieldList']) ? $data['saveFieldList'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['httpRandomizeMediaName'] = isset($data['httpRandomizeMediaName']) ? $data['httpRandomizeMediaName'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['streamType'] === null) {
            $invalid_properties[] = "'streamType' can't be null";
        }
        if ($this->container['storageDirExists'] === null) {
            $invalid_properties[] = "'storageDirExists' can't be null";
        }
        if ($this->container['keyDir'] === null) {
            $invalid_properties[] = "'keyDir' can't be null";
        }
        if ($this->container['createStorageDir'] === null) {
            $invalid_properties[] = "'createStorageDir' can't be null";
        }
        if ($this->container['liveStreamPacketizer'] === null) {
            $invalid_properties[] = "'liveStreamPacketizer' can't be null";
        }
        if ($this->container['serverName'] === null) {
            $invalid_properties[] = "'serverName' can't be null";
        }
        if ($this->container['storageDir'] === null) {
            $invalid_properties[] = "'storageDir' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalid_properties[] = "'version' can't be null";
        }
        if ($this->container['httpRandomizeMediaName'] === null) {
            $invalid_properties[] = "'httpRandomizeMediaName' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['streamType'] === null) {
            return false;
        }
        if ($this->container['storageDirExists'] === null) {
            return false;
        }
        if ($this->container['keyDir'] === null) {
            return false;
        }
        if ($this->container['createStorageDir'] === null) {
            return false;
        }
        if ($this->container['liveStreamPacketizer'] === null) {
            return false;
        }
        if ($this->container['serverName'] === null) {
            return false;
        }
        if ($this->container['storageDir'] === null) {
            return false;
        }
        if ($this->container['version'] === null) {
            return false;
        }
        if ($this->container['httpRandomizeMediaName'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets streamType
     * @return string
     */
    public function getStreamType()
    {
        return $this->container['streamType'];
    }

    /**
     * Sets streamType
     * @param string $streamType
     * @return $this
     */
    public function setStreamType($streamType)
    {
        $this->container['streamType'] = $streamType;

        return $this;
    }

    /**
     * Gets storageDirExists
     * @return bool
     */
    public function getStorageDirExists()
    {
        return $this->container['storageDirExists'];
    }

    /**
     * Sets storageDirExists
     * @param bool $storageDirExists
     * @return $this
     */
    public function setStorageDirExists($storageDirExists)
    {
        $this->container['storageDirExists'] = $storageDirExists;

        return $this;
    }

    /**
     * Gets keyDir
     * @return string
     */
    public function getKeyDir()
    {
        return $this->container['keyDir'];
    }

    /**
     * Sets keyDir
     * @param string $keyDir
     * @return $this
     */
    public function setKeyDir($keyDir)
    {
        $this->container['keyDir'] = $keyDir;

        return $this;
    }

    /**
     * Gets createStorageDir
     * @return bool
     */
    public function getCreateStorageDir()
    {
        return $this->container['createStorageDir'];
    }

    /**
     * Sets createStorageDir
     * @param bool $createStorageDir
     * @return $this
     */
    public function setCreateStorageDir($createStorageDir)
    {
        $this->container['createStorageDir'] = $createStorageDir;

        return $this;
    }

    /**
     * Gets liveStreamPacketizer
     * @return string[]
     */
    public function getLiveStreamPacketizer()
    {
        return $this->container['liveStreamPacketizer'];
    }

    /**
     * Sets liveStreamPacketizer
     * @param string[] $liveStreamPacketizer
     * @return $this
     */
    public function setLiveStreamPacketizer($liveStreamPacketizer)
    {
        $this->container['liveStreamPacketizer'] = $liveStreamPacketizer;

        return $this;
    }

    /**
     * Gets serverName
     * @return string
     */
    public function getServerName()
    {
        return $this->container['serverName'];
    }

    /**
     * Sets serverName
     * @param string $serverName
     * @return $this
     */
    public function setServerName($serverName)
    {
        $this->container['serverName'] = $serverName;

        return $this;
    }

    /**
     * Gets storageDir
     * @return string
     */
    public function getStorageDir()
    {
        return $this->container['storageDir'];
    }

    /**
     * Sets storageDir
     * @param string $storageDir
     * @return $this
     */
    public function setStorageDir($storageDir)
    {
        $this->container['storageDir'] = $storageDir;

        return $this;
    }

    /**
     * Gets saveFieldList
     * @return string[]
     */
    public function getSaveFieldList()
    {
        return $this->container['saveFieldList'];
    }

    /**
     * Sets saveFieldList
     * @param string[] $saveFieldList
     * @return $this
     */
    public function setSaveFieldList($saveFieldList)
    {
        $this->container['saveFieldList'] = $saveFieldList;

        return $this;
    }

    /**
     * Gets version
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     * @param string $version
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets httpRandomizeMediaName
     * @return bool
     */
    public function getHttpRandomizeMediaName()
    {
        return $this->container['httpRandomizeMediaName'];
    }

    /**
     * Sets httpRandomizeMediaName
     * @param bool $httpRandomizeMediaName
     * @return $this
     */
    public function setHttpRandomizeMediaName($httpRandomizeMediaName)
    {
        $this->container['httpRandomizeMediaName'] = $httpRandomizeMediaName;

        return $this;
}

}
