<?php
/**
 * VHostConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  WowzaApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Topix\Hackademy\WowzaApi\Model;


/**
 * VHostConfig Class Doc Comment
 *
 * @category    Class
 * @package     WowzaApi
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class VHostConfig extends SwaggerModel
 {

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'VHostConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'testPlayerSSLEnable' => 'string',
        'securityPublishValidEncoders' => 'string',
        'serverName' => 'string',
        'description' => 'string',
        'maximumConcurrentTranscodes' => 'int',
        'version' => 'string',
        'configurationDir' => 'string',
        'testPlayerPort' => 'string',
        'running' => 'bool',
        'hostPorts' => HostPortConfig::class.'[]',
        'connectionLimit' => 'int',
        'testPlayerIPAddress' => 'string',
        'name' => 'string',
        'saveFieldList' => 'string[]'
);

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'testPlayerSSLEnable' => 'testPlayerSSLEnable',
        'securityPublishValidEncoders' => 'securityPublishValidEncoders',
        'serverName' => 'serverName',
        'description' => 'description',
        'maximumConcurrentTranscodes' => 'maximumConcurrentTranscodes',
        'version' => 'version',
        'configurationDir' => 'configurationDir',
        'testPlayerPort' => 'testPlayerPort',
        'running' => 'running',
        'hostPorts' => 'HostPorts',
        'connectionLimit' => 'connectionLimit',
        'testPlayerIPAddress' => 'testPlayerIPAddress',
        'name' => 'name',
        'saveFieldList' => 'saveFieldList'
);

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'testPlayerSSLEnable' => 'setTestPlayerSSLEnable',
        'securityPublishValidEncoders' => 'setSecurityPublishValidEncoders',
        'serverName' => 'setServerName',
        'description' => 'setDescription',
        'maximumConcurrentTranscodes' => 'setMaximumConcurrentTranscodes',
        'version' => 'setVersion',
        'configurationDir' => 'setConfigurationDir',
        'testPlayerPort' => 'setTestPlayerPort',
        'running' => 'setRunning',
        'hostPorts' => 'setHostPorts',
        'connectionLimit' => 'setConnectionLimit',
        'testPlayerIPAddress' => 'setTestPlayerIPAddress',
        'name' => 'setName',
        'saveFieldList' => 'setSaveFieldList'
);

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'testPlayerSSLEnable' => 'getTestPlayerSSLEnable',
        'securityPublishValidEncoders' => 'getSecurityPublishValidEncoders',
        'serverName' => 'getServerName',
        'description' => 'getDescription',
        'maximumConcurrentTranscodes' => 'getMaximumConcurrentTranscodes',
        'version' => 'getVersion',
        'configurationDir' => 'getConfigurationDir',
        'testPlayerPort' => 'getTestPlayerPort',
        'running' => 'getRunning',
        'hostPorts' => 'getHostPorts',
        'connectionLimit' => 'getConnectionLimit',
        'testPlayerIPAddress' => 'getTestPlayerIPAddress',
        'name' => 'getName',
        'saveFieldList' => 'getSaveFieldList'
);

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['testPlayerSSLEnable'] = isset($data['testPlayerSSLEnable']) ? $data['testPlayerSSLEnable'] : null;
        $this->container['securityPublishValidEncoders'] = isset($data['securityPublishValidEncoders']) ? $data['securityPublishValidEncoders'] : null;
        $this->container['serverName'] = isset($data['serverName']) ? $data['serverName'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['maximumConcurrentTranscodes'] = isset($data['maximumConcurrentTranscodes']) ? $data['maximumConcurrentTranscodes'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['configurationDir'] = isset($data['configurationDir']) ? $data['configurationDir'] : null;
        $this->container['testPlayerPort'] = isset($data['testPlayerPort']) ? $data['testPlayerPort'] : null;
        $this->container['running'] = isset($data['running']) ? $data['running'] : null;
        $this->container['hostPorts'] = isset($data['hostPorts']) ? $data['hostPorts'] : null;
        $this->container['connectionLimit'] = isset($data['connectionLimit']) ? $data['connectionLimit'] : null;
        $this->container['testPlayerIPAddress'] = isset($data['testPlayerIPAddress']) ? $data['testPlayerIPAddress'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['saveFieldList'] = isset($data['saveFieldList']) ? $data['saveFieldList'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['testPlayerSSLEnable'] === null) {
            $invalid_properties[] = "'testPlayerSSLEnable' can't be null";
        }
        if ($this->container['securityPublishValidEncoders'] === null) {
            $invalid_properties[] = "'securityPublishValidEncoders' can't be null";
        }
        if ($this->container['serverName'] === null) {
            $invalid_properties[] = "'serverName' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalid_properties[] = "'description' can't be null";
        }
        if ($this->container['maximumConcurrentTranscodes'] === null) {
            $invalid_properties[] = "'maximumConcurrentTranscodes' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalid_properties[] = "'version' can't be null";
        }
        if ($this->container['configurationDir'] === null) {
            $invalid_properties[] = "'configurationDir' can't be null";
        }
        if ($this->container['testPlayerPort'] === null) {
            $invalid_properties[] = "'testPlayerPort' can't be null";
        }
        if ($this->container['running'] === null) {
            $invalid_properties[] = "'running' can't be null";
        }
        if ($this->container['hostPorts'] === null) {
            $invalid_properties[] = "'hostPorts' can't be null";
        }
        if ($this->container['connectionLimit'] === null) {
            $invalid_properties[] = "'connectionLimit' can't be null";
        }
        if ($this->container['testPlayerIPAddress'] === null) {
            $invalid_properties[] = "'testPlayerIPAddress' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['testPlayerSSLEnable'] === null) {
            return false;
        }
        if ($this->container['securityPublishValidEncoders'] === null) {
            return false;
        }
        if ($this->container['serverName'] === null) {
            return false;
        }
        if ($this->container['description'] === null) {
            return false;
        }
        if ($this->container['maximumConcurrentTranscodes'] === null) {
            return false;
        }
        if ($this->container['version'] === null) {
            return false;
        }
        if ($this->container['configurationDir'] === null) {
            return false;
        }
        if ($this->container['testPlayerPort'] === null) {
            return false;
        }
        if ($this->container['running'] === null) {
            return false;
        }
        if ($this->container['hostPorts'] === null) {
            return false;
        }
        if ($this->container['connectionLimit'] === null) {
            return false;
        }
        if ($this->container['testPlayerIPAddress'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets testPlayerSSLEnable
     * @return string
     */
    public function getTestPlayerSSLEnable()
    {
        return $this->container['testPlayerSSLEnable'];
    }

    /**
     * Sets testPlayerSSLEnable
     * @param string $testPlayerSSLEnable
     * @return $this
     */
    public function setTestPlayerSSLEnable($testPlayerSSLEnable)
    {
        $this->container['testPlayerSSLEnable'] = $testPlayerSSLEnable;

        return $this;
    }

    /**
     * Gets securityPublishValidEncoders
     * @return string
     */
    public function getSecurityPublishValidEncoders()
    {
        return $this->container['securityPublishValidEncoders'];
    }

    /**
     * Sets securityPublishValidEncoders
     * @param string $securityPublishValidEncoders
     * @return $this
     */
    public function setSecurityPublishValidEncoders($securityPublishValidEncoders)
    {
        $this->container['securityPublishValidEncoders'] = $securityPublishValidEncoders;

        return $this;
    }

    /**
     * Gets serverName
     * @return string
     */
    public function getServerName()
    {
        return $this->container['serverName'];
    }

    /**
     * Sets serverName
     * @param string $serverName
     * @return $this
     */
    public function setServerName($serverName)
    {
        $this->container['serverName'] = $serverName;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets maximumConcurrentTranscodes
     * @return int
     */
    public function getMaximumConcurrentTranscodes()
    {
        return $this->container['maximumConcurrentTranscodes'];
    }

    /**
     * Sets maximumConcurrentTranscodes
     * @param int $maximumConcurrentTranscodes
     * @return $this
     */
    public function setMaximumConcurrentTranscodes($maximumConcurrentTranscodes)
    {
        $this->container['maximumConcurrentTranscodes'] = $maximumConcurrentTranscodes;

        return $this;
    }

    /**
     * Gets version
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     * @param string $version
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets configurationDir
     * @return string
     */
    public function getConfigurationDir()
    {
        return $this->container['configurationDir'];
    }

    /**
     * Sets configurationDir
     * @param string $configurationDir
     * @return $this
     */
    public function setConfigurationDir($configurationDir)
    {
        $this->container['configurationDir'] = $configurationDir;

        return $this;
    }

    /**
     * Gets testPlayerPort
     * @return string
     */
    public function getTestPlayerPort()
    {
        return $this->container['testPlayerPort'];
    }

    /**
     * Sets testPlayerPort
     * @param string $testPlayerPort
     * @return $this
     */
    public function setTestPlayerPort($testPlayerPort)
    {
        $this->container['testPlayerPort'] = $testPlayerPort;

        return $this;
    }

    /**
     * Gets running
     * @return bool
     */
    public function getRunning()
    {
        return $this->container['running'];
    }

    /**
     * Sets running
     * @param bool $running
     * @return $this
     */
    public function setRunning($running)
    {
        $this->container['running'] = $running;

        return $this;
    }

    /**
     * Gets hostPorts
     * @return  HostPortConfig[]
     */
    public function getHostPorts()
    {
        return $this->container['hostPorts'];
    }

    /**
     * Sets hostPorts
     * @param HostPortConfig[] $hostPorts
     * @return $this
     */
    public function setHostPorts($hostPorts)
    {
        $this->container['hostPorts'] = $hostPorts;

        return $this;
    }

    /**
     * Gets connectionLimit
     * @return int
     */
    public function getConnectionLimit()
    {
        return $this->container['connectionLimit'];
    }

    /**
     * Sets connectionLimit
     * @param int $connectionLimit
     * @return $this
     */
    public function setConnectionLimit($connectionLimit)
    {
        $this->container['connectionLimit'] = $connectionLimit;

        return $this;
    }

    /**
     * Gets testPlayerIPAddress
     * @return string
     */
    public function getTestPlayerIPAddress()
    {
        return $this->container['testPlayerIPAddress'];
    }

    /**
     * Sets testPlayerIPAddress
     * @param string $testPlayerIPAddress
     * @return $this
     */
    public function setTestPlayerIPAddress($testPlayerIPAddress)
    {
        $this->container['testPlayerIPAddress'] = $testPlayerIPAddress;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets saveFieldList
     * @return string[]
     */
    public function getSaveFieldList()
    {
        return $this->container['saveFieldList'];
    }

    /**
     * Sets saveFieldList
     * @param string[] $saveFieldList
     * @return $this
     */
    public function setSaveFieldList($saveFieldList)
    {
        $this->container['saveFieldList'] = $saveFieldList;

        return $this;
}

}
