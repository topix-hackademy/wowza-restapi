<?php
/**
 * ServerLogFileConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  WowzaApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Topix\Hackademy\WowzaApi\Model;


/**
 * ServerLogFileConfig Class Doc Comment
 *
 * @category    Class
 * @package     WowzaApi
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ServerLogFileConfig extends SwaggerModel
 {

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ServerLogFileConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'endOffset' => 'int',
        'logStartDate' => 'string',
        'logDate' => 'string',
        'endDate' => 'string',
        'serverName' => 'string',
        'version' => 'string',
        'logLines' => 'string[]',
        'filterStr' => 'string',
        'retLineCount' => 'int',
        'logFields' => 'string',
        'logSoftware' => 'string',
        'startOffset' => 'int',
        'searchStr' => 'string',
        'regexSearch' => 'bool',
        'logVersion' => 'string',
        'saveFieldList' => 'string[]',
        'fileLength' => 'int',
        'startDate' => 'string'
);

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'endOffset' => 'endOffset',
        'logStartDate' => 'logStartDate',
        'logDate' => 'logDate',
        'endDate' => 'endDate',
        'serverName' => 'serverName',
        'version' => 'version',
        'logLines' => 'logLines',
        'filterStr' => 'filterStr',
        'retLineCount' => 'retLineCount',
        'logFields' => 'logFields',
        'logSoftware' => 'logSoftware',
        'startOffset' => 'startOffset',
        'searchStr' => 'searchStr',
        'regexSearch' => 'regexSearch',
        'logVersion' => 'logVersion',
        'saveFieldList' => 'saveFieldList',
        'fileLength' => 'fileLength',
        'startDate' => 'startDate'
);

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'endOffset' => 'setEndOffset',
        'logStartDate' => 'setLogStartDate',
        'logDate' => 'setLogDate',
        'endDate' => 'setEndDate',
        'serverName' => 'setServerName',
        'version' => 'setVersion',
        'logLines' => 'setLogLines',
        'filterStr' => 'setFilterStr',
        'retLineCount' => 'setRetLineCount',
        'logFields' => 'setLogFields',
        'logSoftware' => 'setLogSoftware',
        'startOffset' => 'setStartOffset',
        'searchStr' => 'setSearchStr',
        'regexSearch' => 'setRegexSearch',
        'logVersion' => 'setLogVersion',
        'saveFieldList' => 'setSaveFieldList',
        'fileLength' => 'setFileLength',
        'startDate' => 'setStartDate'
);

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'endOffset' => 'getEndOffset',
        'logStartDate' => 'getLogStartDate',
        'logDate' => 'getLogDate',
        'endDate' => 'getEndDate',
        'serverName' => 'getServerName',
        'version' => 'getVersion',
        'logLines' => 'getLogLines',
        'filterStr' => 'getFilterStr',
        'retLineCount' => 'getRetLineCount',
        'logFields' => 'getLogFields',
        'logSoftware' => 'getLogSoftware',
        'startOffset' => 'getStartOffset',
        'searchStr' => 'getSearchStr',
        'regexSearch' => 'getRegexSearch',
        'logVersion' => 'getLogVersion',
        'saveFieldList' => 'getSaveFieldList',
        'fileLength' => 'getFileLength',
        'startDate' => 'getStartDate'
);

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['endOffset'] = isset($data['endOffset']) ? $data['endOffset'] : null;
        $this->container['logStartDate'] = isset($data['logStartDate']) ? $data['logStartDate'] : null;
        $this->container['logDate'] = isset($data['logDate']) ? $data['logDate'] : null;
        $this->container['endDate'] = isset($data['endDate']) ? $data['endDate'] : null;
        $this->container['serverName'] = isset($data['serverName']) ? $data['serverName'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['logLines'] = isset($data['logLines']) ? $data['logLines'] : null;
        $this->container['filterStr'] = isset($data['filterStr']) ? $data['filterStr'] : null;
        $this->container['retLineCount'] = isset($data['retLineCount']) ? $data['retLineCount'] : null;
        $this->container['logFields'] = isset($data['logFields']) ? $data['logFields'] : null;
        $this->container['logSoftware'] = isset($data['logSoftware']) ? $data['logSoftware'] : null;
        $this->container['startOffset'] = isset($data['startOffset']) ? $data['startOffset'] : null;
        $this->container['searchStr'] = isset($data['searchStr']) ? $data['searchStr'] : null;
        $this->container['regexSearch'] = isset($data['regexSearch']) ? $data['regexSearch'] : null;
        $this->container['logVersion'] = isset($data['logVersion']) ? $data['logVersion'] : null;
        $this->container['saveFieldList'] = isset($data['saveFieldList']) ? $data['saveFieldList'] : null;
        $this->container['fileLength'] = isset($data['fileLength']) ? $data['fileLength'] : null;
        $this->container['startDate'] = isset($data['startDate']) ? $data['startDate'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['endOffset'] === null) {
            $invalid_properties[] = "'endOffset' can't be null";
        }
        if ($this->container['logStartDate'] === null) {
            $invalid_properties[] = "'logStartDate' can't be null";
        }
        if ($this->container['logDate'] === null) {
            $invalid_properties[] = "'logDate' can't be null";
        }
        if ($this->container['endDate'] === null) {
            $invalid_properties[] = "'endDate' can't be null";
        }
        if ($this->container['serverName'] === null) {
            $invalid_properties[] = "'serverName' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalid_properties[] = "'version' can't be null";
        }
        if ($this->container['logLines'] === null) {
            $invalid_properties[] = "'logLines' can't be null";
        }
        if ($this->container['filterStr'] === null) {
            $invalid_properties[] = "'filterStr' can't be null";
        }
        if ($this->container['retLineCount'] === null) {
            $invalid_properties[] = "'retLineCount' can't be null";
        }
        if ($this->container['logFields'] === null) {
            $invalid_properties[] = "'logFields' can't be null";
        }
        if ($this->container['logSoftware'] === null) {
            $invalid_properties[] = "'logSoftware' can't be null";
        }
        if ($this->container['startOffset'] === null) {
            $invalid_properties[] = "'startOffset' can't be null";
        }
        if ($this->container['searchStr'] === null) {
            $invalid_properties[] = "'searchStr' can't be null";
        }
        if ($this->container['regexSearch'] === null) {
            $invalid_properties[] = "'regexSearch' can't be null";
        }
        if ($this->container['logVersion'] === null) {
            $invalid_properties[] = "'logVersion' can't be null";
        }
        if ($this->container['fileLength'] === null) {
            $invalid_properties[] = "'fileLength' can't be null";
        }
        if ($this->container['startDate'] === null) {
            $invalid_properties[] = "'startDate' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['endOffset'] === null) {
            return false;
        }
        if ($this->container['logStartDate'] === null) {
            return false;
        }
        if ($this->container['logDate'] === null) {
            return false;
        }
        if ($this->container['endDate'] === null) {
            return false;
        }
        if ($this->container['serverName'] === null) {
            return false;
        }
        if ($this->container['version'] === null) {
            return false;
        }
        if ($this->container['logLines'] === null) {
            return false;
        }
        if ($this->container['filterStr'] === null) {
            return false;
        }
        if ($this->container['retLineCount'] === null) {
            return false;
        }
        if ($this->container['logFields'] === null) {
            return false;
        }
        if ($this->container['logSoftware'] === null) {
            return false;
        }
        if ($this->container['startOffset'] === null) {
            return false;
        }
        if ($this->container['searchStr'] === null) {
            return false;
        }
        if ($this->container['regexSearch'] === null) {
            return false;
        }
        if ($this->container['logVersion'] === null) {
            return false;
        }
        if ($this->container['fileLength'] === null) {
            return false;
        }
        if ($this->container['startDate'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets endOffset
     * @return int
     */
    public function getEndOffset()
    {
        return $this->container['endOffset'];
    }

    /**
     * Sets endOffset
     * @param int $endOffset
     * @return $this
     */
    public function setEndOffset($endOffset)
    {
        $this->container['endOffset'] = $endOffset;

        return $this;
    }

    /**
     * Gets logStartDate
     * @return string
     */
    public function getLogStartDate()
    {
        return $this->container['logStartDate'];
    }

    /**
     * Sets logStartDate
     * @param string $logStartDate
     * @return $this
     */
    public function setLogStartDate($logStartDate)
    {
        $this->container['logStartDate'] = $logStartDate;

        return $this;
    }

    /**
     * Gets logDate
     * @return string
     */
    public function getLogDate()
    {
        return $this->container['logDate'];
    }

    /**
     * Sets logDate
     * @param string $logDate
     * @return $this
     */
    public function setLogDate($logDate)
    {
        $this->container['logDate'] = $logDate;

        return $this;
    }

    /**
     * Gets endDate
     * @return string
     */
    public function getEndDate()
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     * @param string $endDate
     * @return $this
     */
    public function setEndDate($endDate)
    {
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets serverName
     * @return string
     */
    public function getServerName()
    {
        return $this->container['serverName'];
    }

    /**
     * Sets serverName
     * @param string $serverName
     * @return $this
     */
    public function setServerName($serverName)
    {
        $this->container['serverName'] = $serverName;

        return $this;
    }

    /**
     * Gets version
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     * @param string $version
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets logLines
     * @return string[]
     */
    public function getLogLines()
    {
        return $this->container['logLines'];
    }

    /**
     * Sets logLines
     * @param string[] $logLines
     * @return $this
     */
    public function setLogLines($logLines)
    {
        $this->container['logLines'] = $logLines;

        return $this;
    }

    /**
     * Gets filterStr
     * @return string
     */
    public function getFilterStr()
    {
        return $this->container['filterStr'];
    }

    /**
     * Sets filterStr
     * @param string $filterStr
     * @return $this
     */
    public function setFilterStr($filterStr)
    {
        $this->container['filterStr'] = $filterStr;

        return $this;
    }

    /**
     * Gets retLineCount
     * @return int
     */
    public function getRetLineCount()
    {
        return $this->container['retLineCount'];
    }

    /**
     * Sets retLineCount
     * @param int $retLineCount
     * @return $this
     */
    public function setRetLineCount($retLineCount)
    {
        $this->container['retLineCount'] = $retLineCount;

        return $this;
    }

    /**
     * Gets logFields
     * @return string
     */
    public function getLogFields()
    {
        return $this->container['logFields'];
    }

    /**
     * Sets logFields
     * @param string $logFields
     * @return $this
     */
    public function setLogFields($logFields)
    {
        $this->container['logFields'] = $logFields;

        return $this;
    }

    /**
     * Gets logSoftware
     * @return string
     */
    public function getLogSoftware()
    {
        return $this->container['logSoftware'];
    }

    /**
     * Sets logSoftware
     * @param string $logSoftware
     * @return $this
     */
    public function setLogSoftware($logSoftware)
    {
        $this->container['logSoftware'] = $logSoftware;

        return $this;
    }

    /**
     * Gets startOffset
     * @return int
     */
    public function getStartOffset()
    {
        return $this->container['startOffset'];
    }

    /**
     * Sets startOffset
     * @param int $startOffset
     * @return $this
     */
    public function setStartOffset($startOffset)
    {
        $this->container['startOffset'] = $startOffset;

        return $this;
    }

    /**
     * Gets searchStr
     * @return string
     */
    public function getSearchStr()
    {
        return $this->container['searchStr'];
    }

    /**
     * Sets searchStr
     * @param string $searchStr
     * @return $this
     */
    public function setSearchStr($searchStr)
    {
        $this->container['searchStr'] = $searchStr;

        return $this;
    }

    /**
     * Gets regexSearch
     * @return bool
     */
    public function getRegexSearch()
    {
        return $this->container['regexSearch'];
    }

    /**
     * Sets regexSearch
     * @param bool $regexSearch
     * @return $this
     */
    public function setRegexSearch($regexSearch)
    {
        $this->container['regexSearch'] = $regexSearch;

        return $this;
    }

    /**
     * Gets logVersion
     * @return string
     */
    public function getLogVersion()
    {
        return $this->container['logVersion'];
    }

    /**
     * Sets logVersion
     * @param string $logVersion
     * @return $this
     */
    public function setLogVersion($logVersion)
    {
        $this->container['logVersion'] = $logVersion;

        return $this;
    }

    /**
     * Gets saveFieldList
     * @return string[]
     */
    public function getSaveFieldList()
    {
        return $this->container['saveFieldList'];
    }

    /**
     * Sets saveFieldList
     * @param string[] $saveFieldList
     * @return $this
     */
    public function setSaveFieldList($saveFieldList)
    {
        $this->container['saveFieldList'] = $saveFieldList;

        return $this;
    }

    /**
     * Gets fileLength
     * @return int
     */
    public function getFileLength()
    {
        return $this->container['fileLength'];
    }

    /**
     * Sets fileLength
     * @param int $fileLength
     * @return $this
     */
    public function setFileLength($fileLength)
    {
        $this->container['fileLength'] = $fileLength;

        return $this;
    }

    /**
     * Gets startDate
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     * @param string $startDate
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
}

}
