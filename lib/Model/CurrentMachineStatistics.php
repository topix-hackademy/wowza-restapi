<?php
/**
 * CurrentMachineStatistics
 *
 * PHP version 5
 *
 * @category Class
 * @package  WowzaApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Topix\Hackademy\WowzaApi\Model;


/**
 * CurrentMachineStatistics Class Doc Comment
 *
 * @category    Class
 * @package     WowzaApi
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CurrentMachineStatistics extends SwaggerModel
 {

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CurrentMachineStatistics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'heapUsed' => Long::class,
        'cpuSystem' => Integer::class,
        'connectionCount' => Long::class,
        'memoryFree' => Long::class,
        'cpuIdle' => Integer::class,
        'serverName' => 'string',
        'memoryUsed' => Long::class,
        'version' => 'string',
        'diskFree' => Long::class,
        'cpuUser' => Integer::class,
        'diskUsed' => Long::class,
        'heapFree' => Long::class,
        'serverUptime' => 'int',
        'saveFieldList' => 'string[]'
);

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'heapUsed' => 'heapUsed',
        'cpuSystem' => 'cpuSystem',
        'connectionCount' => 'connectionCount',
        'memoryFree' => 'memoryFree',
        'cpuIdle' => 'cpuIdle',
        'serverName' => 'serverName',
        'memoryUsed' => 'memoryUsed',
        'version' => 'version',
        'diskFree' => 'diskFree',
        'cpuUser' => 'cpuUser',
        'diskUsed' => 'diskUsed',
        'heapFree' => 'heapFree',
        'serverUptime' => 'serverUptime',
        'saveFieldList' => 'saveFieldList'
);

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'heapUsed' => 'setHeapUsed',
        'cpuSystem' => 'setCpuSystem',
        'connectionCount' => 'setConnectionCount',
        'memoryFree' => 'setMemoryFree',
        'cpuIdle' => 'setCpuIdle',
        'serverName' => 'setServerName',
        'memoryUsed' => 'setMemoryUsed',
        'version' => 'setVersion',
        'diskFree' => 'setDiskFree',
        'cpuUser' => 'setCpuUser',
        'diskUsed' => 'setDiskUsed',
        'heapFree' => 'setHeapFree',
        'serverUptime' => 'setServerUptime',
        'saveFieldList' => 'setSaveFieldList'
);

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'heapUsed' => 'getHeapUsed',
        'cpuSystem' => 'getCpuSystem',
        'connectionCount' => 'getConnectionCount',
        'memoryFree' => 'getMemoryFree',
        'cpuIdle' => 'getCpuIdle',
        'serverName' => 'getServerName',
        'memoryUsed' => 'getMemoryUsed',
        'version' => 'getVersion',
        'diskFree' => 'getDiskFree',
        'cpuUser' => 'getCpuUser',
        'diskUsed' => 'getDiskUsed',
        'heapFree' => 'getHeapFree',
        'serverUptime' => 'getServerUptime',
        'saveFieldList' => 'getSaveFieldList'
);

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['heapUsed'] = isset($data['heapUsed']) ? $data['heapUsed'] : null;
        $this->container['cpuSystem'] = isset($data['cpuSystem']) ? $data['cpuSystem'] : null;
        $this->container['connectionCount'] = isset($data['connectionCount']) ? $data['connectionCount'] : null;
        $this->container['memoryFree'] = isset($data['memoryFree']) ? $data['memoryFree'] : null;
        $this->container['cpuIdle'] = isset($data['cpuIdle']) ? $data['cpuIdle'] : null;
        $this->container['serverName'] = isset($data['serverName']) ? $data['serverName'] : null;
        $this->container['memoryUsed'] = isset($data['memoryUsed']) ? $data['memoryUsed'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['diskFree'] = isset($data['diskFree']) ? $data['diskFree'] : null;
        $this->container['cpuUser'] = isset($data['cpuUser']) ? $data['cpuUser'] : null;
        $this->container['diskUsed'] = isset($data['diskUsed']) ? $data['diskUsed'] : null;
        $this->container['heapFree'] = isset($data['heapFree']) ? $data['heapFree'] : null;
        $this->container['serverUptime'] = isset($data['serverUptime']) ? $data['serverUptime'] : null;
        $this->container['saveFieldList'] = isset($data['saveFieldList']) ? $data['saveFieldList'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['heapUsed'] === null) {
            $invalid_properties[] = "'heapUsed' can't be null";
        }
        if ($this->container['cpuSystem'] === null) {
            $invalid_properties[] = "'cpuSystem' can't be null";
        }
        if ($this->container['connectionCount'] === null) {
            $invalid_properties[] = "'connectionCount' can't be null";
        }
        if ($this->container['memoryFree'] === null) {
            $invalid_properties[] = "'memoryFree' can't be null";
        }
        if ($this->container['cpuIdle'] === null) {
            $invalid_properties[] = "'cpuIdle' can't be null";
        }
        if ($this->container['serverName'] === null) {
            $invalid_properties[] = "'serverName' can't be null";
        }
        if ($this->container['memoryUsed'] === null) {
            $invalid_properties[] = "'memoryUsed' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalid_properties[] = "'version' can't be null";
        }
        if ($this->container['diskFree'] === null) {
            $invalid_properties[] = "'diskFree' can't be null";
        }
        if ($this->container['cpuUser'] === null) {
            $invalid_properties[] = "'cpuUser' can't be null";
        }
        if ($this->container['diskUsed'] === null) {
            $invalid_properties[] = "'diskUsed' can't be null";
        }
        if ($this->container['heapFree'] === null) {
            $invalid_properties[] = "'heapFree' can't be null";
        }
        if ($this->container['serverUptime'] === null) {
            $invalid_properties[] = "'serverUptime' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['heapUsed'] === null) {
            return false;
        }
        if ($this->container['cpuSystem'] === null) {
            return false;
        }
        if ($this->container['connectionCount'] === null) {
            return false;
        }
        if ($this->container['memoryFree'] === null) {
            return false;
        }
        if ($this->container['cpuIdle'] === null) {
            return false;
        }
        if ($this->container['serverName'] === null) {
            return false;
        }
        if ($this->container['memoryUsed'] === null) {
            return false;
        }
        if ($this->container['version'] === null) {
            return false;
        }
        if ($this->container['diskFree'] === null) {
            return false;
        }
        if ($this->container['cpuUser'] === null) {
            return false;
        }
        if ($this->container['diskUsed'] === null) {
            return false;
        }
        if ($this->container['heapFree'] === null) {
            return false;
        }
        if ($this->container['serverUptime'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets heapUsed
     * @return  Long
     */
    public function getHeapUsed()
    {
        return $this->container['heapUsed'];
    }

    /**
     * Sets heapUsed
     * @param Long $heapUsed
     * @return $this
     */
    public function setHeapUsed($heapUsed)
    {
        $this->container['heapUsed'] = $heapUsed;

        return $this;
    }

    /**
     * Gets cpuSystem
     * @return  Integer
     */
    public function getCpuSystem()
    {
        return $this->container['cpuSystem'];
    }

    /**
     * Sets cpuSystem
     * @param Integer $cpuSystem
     * @return $this
     */
    public function setCpuSystem($cpuSystem)
    {
        $this->container['cpuSystem'] = $cpuSystem;

        return $this;
    }

    /**
     * Gets connectionCount
     * @return  Long
     */
    public function getConnectionCount()
    {
        return $this->container['connectionCount'];
    }

    /**
     * Sets connectionCount
     * @param Long $connectionCount
     * @return $this
     */
    public function setConnectionCount($connectionCount)
    {
        $this->container['connectionCount'] = $connectionCount;

        return $this;
    }

    /**
     * Gets memoryFree
     * @return  Long
     */
    public function getMemoryFree()
    {
        return $this->container['memoryFree'];
    }

    /**
     * Sets memoryFree
     * @param Long $memoryFree
     * @return $this
     */
    public function setMemoryFree($memoryFree)
    {
        $this->container['memoryFree'] = $memoryFree;

        return $this;
    }

    /**
     * Gets cpuIdle
     * @return  Integer
     */
    public function getCpuIdle()
    {
        return $this->container['cpuIdle'];
    }

    /**
     * Sets cpuIdle
     * @param Integer $cpuIdle
     * @return $this
     */
    public function setCpuIdle($cpuIdle)
    {
        $this->container['cpuIdle'] = $cpuIdle;

        return $this;
    }

    /**
     * Gets serverName
     * @return string
     */
    public function getServerName()
    {
        return $this->container['serverName'];
    }

    /**
     * Sets serverName
     * @param string $serverName
     * @return $this
     */
    public function setServerName($serverName)
    {
        $this->container['serverName'] = $serverName;

        return $this;
    }

    /**
     * Gets memoryUsed
     * @return  Long
     */
    public function getMemoryUsed()
    {
        return $this->container['memoryUsed'];
    }

    /**
     * Sets memoryUsed
     * @param Long $memoryUsed
     * @return $this
     */
    public function setMemoryUsed($memoryUsed)
    {
        $this->container['memoryUsed'] = $memoryUsed;

        return $this;
    }

    /**
     * Gets version
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     * @param string $version
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets diskFree
     * @return  Long
     */
    public function getDiskFree()
    {
        return $this->container['diskFree'];
    }

    /**
     * Sets diskFree
     * @param Long $diskFree
     * @return $this
     */
    public function setDiskFree($diskFree)
    {
        $this->container['diskFree'] = $diskFree;

        return $this;
    }

    /**
     * Gets cpuUser
     * @return  Integer
     */
    public function getCpuUser()
    {
        return $this->container['cpuUser'];
    }

    /**
     * Sets cpuUser
     * @param Integer $cpuUser
     * @return $this
     */
    public function setCpuUser($cpuUser)
    {
        $this->container['cpuUser'] = $cpuUser;

        return $this;
    }

    /**
     * Gets diskUsed
     * @return  Long
     */
    public function getDiskUsed()
    {
        return $this->container['diskUsed'];
    }

    /**
     * Sets diskUsed
     * @param Long $diskUsed
     * @return $this
     */
    public function setDiskUsed($diskUsed)
    {
        $this->container['diskUsed'] = $diskUsed;

        return $this;
    }

    /**
     * Gets heapFree
     * @return  Long
     */
    public function getHeapFree()
    {
        return $this->container['heapFree'];
    }

    /**
     * Sets heapFree
     * @param Long $heapFree
     * @return $this
     */
    public function setHeapFree($heapFree)
    {
        $this->container['heapFree'] = $heapFree;

        return $this;
    }

    /**
     * Gets serverUptime
     * @return int
     */
    public function getServerUptime()
    {
        return $this->container['serverUptime'];
    }

    /**
     * Sets serverUptime
     * @param int $serverUptime
     * @return $this
     */
    public function setServerUptime($serverUptime)
    {
        $this->container['serverUptime'] = $serverUptime;

        return $this;
    }

    /**
     * Gets saveFieldList
     * @return string[]
     */
    public function getSaveFieldList()
    {
        return $this->container['saveFieldList'];
    }

    /**
     * Sets saveFieldList
     * @param string[] $saveFieldList
     * @return $this
     */
    public function setSaveFieldList($saveFieldList)
    {
        $this->container['saveFieldList'] = $saveFieldList;

        return $this;
}

}
