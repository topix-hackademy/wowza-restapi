<?php
/**
 * TranscoderOverlayDecodeConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  WowzaApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Topix\Hackademy\WowzaApi\Model;


/**
 * TranscoderOverlayDecodeConfig Class Doc Comment
 *
 * @category    Class
 * @package     WowzaApi
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TranscoderOverlayDecodeConfig extends SwaggerModel
 {

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'TranscoderOverlayDecodeConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'overlayName' => 'string',
        'imagePath' => 'string',
        'serverName' => 'string',
        'description' => 'string',
        'index' => 'int',
        'align' => 'string',
        'version' => 'string',
        'enable' => 'bool',
        'x' => 'int',
        'width' => 'string',
        'y' => 'int',
        'saveFieldList' => 'string[]',
        'checkForUpdates' => 'bool',
        'opacity' => 'int',
        'height' => 'string'
);

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'overlayName' => 'overlayName',
        'imagePath' => 'imagePath',
        'serverName' => 'serverName',
        'description' => 'description',
        'index' => 'index',
        'align' => 'align',
        'version' => 'version',
        'enable' => 'enable',
        'x' => 'x',
        'width' => 'width',
        'y' => 'y',
        'saveFieldList' => 'saveFieldList',
        'checkForUpdates' => 'checkForUpdates',
        'opacity' => 'opacity',
        'height' => 'height'
);

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'overlayName' => 'setOverlayName',
        'imagePath' => 'setImagePath',
        'serverName' => 'setServerName',
        'description' => 'setDescription',
        'index' => 'setIndex',
        'align' => 'setAlign',
        'version' => 'setVersion',
        'enable' => 'setEnable',
        'x' => 'setX',
        'width' => 'setWidth',
        'y' => 'setY',
        'saveFieldList' => 'setSaveFieldList',
        'checkForUpdates' => 'setCheckForUpdates',
        'opacity' => 'setOpacity',
        'height' => 'setHeight'
);

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'overlayName' => 'getOverlayName',
        'imagePath' => 'getImagePath',
        'serverName' => 'getServerName',
        'description' => 'getDescription',
        'index' => 'getIndex',
        'align' => 'getAlign',
        'version' => 'getVersion',
        'enable' => 'getEnable',
        'x' => 'getX',
        'width' => 'getWidth',
        'y' => 'getY',
        'saveFieldList' => 'getSaveFieldList',
        'checkForUpdates' => 'getCheckForUpdates',
        'opacity' => 'getOpacity',
        'height' => 'getHeight'
);

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['overlayName'] = isset($data['overlayName']) ? $data['overlayName'] : null;
        $this->container['imagePath'] = isset($data['imagePath']) ? $data['imagePath'] : null;
        $this->container['serverName'] = isset($data['serverName']) ? $data['serverName'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['index'] = isset($data['index']) ? $data['index'] : null;
        $this->container['align'] = isset($data['align']) ? $data['align'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['enable'] = isset($data['enable']) ? $data['enable'] : null;
        $this->container['x'] = isset($data['x']) ? $data['x'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['y'] = isset($data['y']) ? $data['y'] : null;
        $this->container['saveFieldList'] = isset($data['saveFieldList']) ? $data['saveFieldList'] : null;
        $this->container['checkForUpdates'] = isset($data['checkForUpdates']) ? $data['checkForUpdates'] : null;
        $this->container['opacity'] = isset($data['opacity']) ? $data['opacity'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['overlayName'] === null) {
            $invalid_properties[] = "'overlayName' can't be null";
        }
        if ($this->container['imagePath'] === null) {
            $invalid_properties[] = "'imagePath' can't be null";
        }
        if ($this->container['serverName'] === null) {
            $invalid_properties[] = "'serverName' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalid_properties[] = "'description' can't be null";
        }
        if ($this->container['index'] === null) {
            $invalid_properties[] = "'index' can't be null";
        }
        if ($this->container['align'] === null) {
            $invalid_properties[] = "'align' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalid_properties[] = "'version' can't be null";
        }
        if ($this->container['enable'] === null) {
            $invalid_properties[] = "'enable' can't be null";
        }
        if ($this->container['x'] === null) {
            $invalid_properties[] = "'x' can't be null";
        }
        if ($this->container['width'] === null) {
            $invalid_properties[] = "'width' can't be null";
        }
        if ($this->container['y'] === null) {
            $invalid_properties[] = "'y' can't be null";
        }
        if ($this->container['checkForUpdates'] === null) {
            $invalid_properties[] = "'checkForUpdates' can't be null";
        }
        if ($this->container['opacity'] === null) {
            $invalid_properties[] = "'opacity' can't be null";
        }
        if ($this->container['height'] === null) {
            $invalid_properties[] = "'height' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['overlayName'] === null) {
            return false;
        }
        if ($this->container['imagePath'] === null) {
            return false;
        }
        if ($this->container['serverName'] === null) {
            return false;
        }
        if ($this->container['description'] === null) {
            return false;
        }
        if ($this->container['index'] === null) {
            return false;
        }
        if ($this->container['align'] === null) {
            return false;
        }
        if ($this->container['version'] === null) {
            return false;
        }
        if ($this->container['enable'] === null) {
            return false;
        }
        if ($this->container['x'] === null) {
            return false;
        }
        if ($this->container['width'] === null) {
            return false;
        }
        if ($this->container['y'] === null) {
            return false;
        }
        if ($this->container['checkForUpdates'] === null) {
            return false;
        }
        if ($this->container['opacity'] === null) {
            return false;
        }
        if ($this->container['height'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets overlayName
     * @return string
     */
    public function getOverlayName()
    {
        return $this->container['overlayName'];
    }

    /**
     * Sets overlayName
     * @param string $overlayName
     * @return $this
     */
    public function setOverlayName($overlayName)
    {
        $this->container['overlayName'] = $overlayName;

        return $this;
    }

    /**
     * Gets imagePath
     * @return string
     */
    public function getImagePath()
    {
        return $this->container['imagePath'];
    }

    /**
     * Sets imagePath
     * @param string $imagePath
     * @return $this
     */
    public function setImagePath($imagePath)
    {
        $this->container['imagePath'] = $imagePath;

        return $this;
    }

    /**
     * Gets serverName
     * @return string
     */
    public function getServerName()
    {
        return $this->container['serverName'];
    }

    /**
     * Sets serverName
     * @param string $serverName
     * @return $this
     */
    public function setServerName($serverName)
    {
        $this->container['serverName'] = $serverName;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets index
     * @return int
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     * @param int $index
     * @return $this
     */
    public function setIndex($index)
    {
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets align
     * @return string
     */
    public function getAlign()
    {
        return $this->container['align'];
    }

    /**
     * Sets align
     * @param string $align
     * @return $this
     */
    public function setAlign($align)
    {
        $this->container['align'] = $align;

        return $this;
    }

    /**
     * Gets version
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     * @param string $version
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets enable
     * @return bool
     */
    public function getEnable()
    {
        return $this->container['enable'];
    }

    /**
     * Sets enable
     * @param bool $enable
     * @return $this
     */
    public function setEnable($enable)
    {
        $this->container['enable'] = $enable;

        return $this;
    }

    /**
     * Gets x
     * @return int
     */
    public function getX()
    {
        return $this->container['x'];
    }

    /**
     * Sets x
     * @param int $x
     * @return $this
     */
    public function setX($x)
    {
        $this->container['x'] = $x;

        return $this;
    }

    /**
     * Gets width
     * @return string
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     * @param string $width
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets y
     * @return int
     */
    public function getY()
    {
        return $this->container['y'];
    }

    /**
     * Sets y
     * @param int $y
     * @return $this
     */
    public function setY($y)
    {
        $this->container['y'] = $y;

        return $this;
    }

    /**
     * Gets saveFieldList
     * @return string[]
     */
    public function getSaveFieldList()
    {
        return $this->container['saveFieldList'];
    }

    /**
     * Sets saveFieldList
     * @param string[] $saveFieldList
     * @return $this
     */
    public function setSaveFieldList($saveFieldList)
    {
        $this->container['saveFieldList'] = $saveFieldList;

        return $this;
    }

    /**
     * Gets checkForUpdates
     * @return bool
     */
    public function getCheckForUpdates()
    {
        return $this->container['checkForUpdates'];
    }

    /**
     * Sets checkForUpdates
     * @param bool $checkForUpdates
     * @return $this
     */
    public function setCheckForUpdates($checkForUpdates)
    {
        $this->container['checkForUpdates'] = $checkForUpdates;

        return $this;
    }

    /**
     * Gets opacity
     * @return int
     */
    public function getOpacity()
    {
        return $this->container['opacity'];
    }

    /**
     * Sets opacity
     * @param int $opacity
     * @return $this
     */
    public function setOpacity($opacity)
    {
        $this->container['opacity'] = $opacity;

        return $this;
    }

    /**
     * Gets height
     * @return string
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     * @param string $height
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
}

}
