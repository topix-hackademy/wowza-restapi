<?php
/**
 * HostPortConfigAdv
 *
 * PHP version 5
 *
 * @category Class
 * @package  WowzaApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Topix\Hackademy\WowzaApi\Model;


/**
 * HostPortConfigAdv Class Doc Comment
 *
 * @category    Class
 * @package     WowzaApi
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class HostPortConfigAdv extends SwaggerModel
 {

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'HostPortConfigAdv';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'processorCountAutoValue' => 'int',
        'port' => 'string',
        'processorCount' => 'string',
        'advancedSettings' => AdvancedSetting::class.'[]',
        'name' => 'string',
        'ipAddress' => 'string',
        'serverName' => 'string',
        'saveFieldList' => 'string[]',
        'type' => 'string',
        'version' => 'string'
);

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'processorCountAutoValue' => 'processorCountAutoValue',
        'port' => 'port',
        'processorCount' => 'processorCount',
        'advancedSettings' => 'advancedSettings',
        'name' => 'name',
        'ipAddress' => 'ipAddress',
        'serverName' => 'serverName',
        'saveFieldList' => 'saveFieldList',
        'type' => 'type',
        'version' => 'version'
);

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'processorCountAutoValue' => 'setProcessorCountAutoValue',
        'port' => 'setPort',
        'processorCount' => 'setProcessorCount',
        'advancedSettings' => 'setAdvancedSettings',
        'name' => 'setName',
        'ipAddress' => 'setIpAddress',
        'serverName' => 'setServerName',
        'saveFieldList' => 'setSaveFieldList',
        'type' => 'setType',
        'version' => 'setVersion'
);

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'processorCountAutoValue' => 'getProcessorCountAutoValue',
        'port' => 'getPort',
        'processorCount' => 'getProcessorCount',
        'advancedSettings' => 'getAdvancedSettings',
        'name' => 'getName',
        'ipAddress' => 'getIpAddress',
        'serverName' => 'getServerName',
        'saveFieldList' => 'getSaveFieldList',
        'type' => 'getType',
        'version' => 'getVersion'
);

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['processorCountAutoValue'] = isset($data['processorCountAutoValue']) ? $data['processorCountAutoValue'] : null;
        $this->container['port'] = isset($data['port']) ? $data['port'] : null;
        $this->container['processorCount'] = isset($data['processorCount']) ? $data['processorCount'] : null;
        $this->container['advancedSettings'] = isset($data['advancedSettings']) ? $data['advancedSettings'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['ipAddress'] = isset($data['ipAddress']) ? $data['ipAddress'] : null;
        $this->container['serverName'] = isset($data['serverName']) ? $data['serverName'] : null;
        $this->container['saveFieldList'] = isset($data['saveFieldList']) ? $data['saveFieldList'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['processorCountAutoValue'] === null) {
            $invalid_properties[] = "'processorCountAutoValue' can't be null";
        }
        if ($this->container['port'] === null) {
            $invalid_properties[] = "'port' can't be null";
        }
        if ($this->container['processorCount'] === null) {
            $invalid_properties[] = "'processorCount' can't be null";
        }
        if ($this->container['advancedSettings'] === null) {
            $invalid_properties[] = "'advancedSettings' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['ipAddress'] === null) {
            $invalid_properties[] = "'ipAddress' can't be null";
        }
        if ($this->container['serverName'] === null) {
            $invalid_properties[] = "'serverName' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalid_properties[] = "'version' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['processorCountAutoValue'] === null) {
            return false;
        }
        if ($this->container['port'] === null) {
            return false;
        }
        if ($this->container['processorCount'] === null) {
            return false;
        }
        if ($this->container['advancedSettings'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['ipAddress'] === null) {
            return false;
        }
        if ($this->container['serverName'] === null) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        if ($this->container['version'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets processorCountAutoValue
     * @return int
     */
    public function getProcessorCountAutoValue()
    {
        return $this->container['processorCountAutoValue'];
    }

    /**
     * Sets processorCountAutoValue
     * @param int $processorCountAutoValue
     * @return $this
     */
    public function setProcessorCountAutoValue($processorCountAutoValue)
    {
        $this->container['processorCountAutoValue'] = $processorCountAutoValue;

        return $this;
    }

    /**
     * Gets port
     * @return string
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     * @param string $port
     * @return $this
     */
    public function setPort($port)
    {
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets processorCount
     * @return string
     */
    public function getProcessorCount()
    {
        return $this->container['processorCount'];
    }

    /**
     * Sets processorCount
     * @param string $processorCount
     * @return $this
     */
    public function setProcessorCount($processorCount)
    {
        $this->container['processorCount'] = $processorCount;

        return $this;
    }

    /**
     * Gets advancedSettings
     * @return  AdvancedSetting[]
     */
    public function getAdvancedSettings()
    {
        return $this->container['advancedSettings'];
    }

    /**
     * Sets advancedSettings
     * @param AdvancedSetting[] $advancedSettings
     * @return $this
     */
    public function setAdvancedSettings($advancedSettings)
    {
        $this->container['advancedSettings'] = $advancedSettings;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets ipAddress
     * @return string
     */
    public function getIpAddress()
    {
        return $this->container['ipAddress'];
    }

    /**
     * Sets ipAddress
     * @param string $ipAddress
     * @return $this
     */
    public function setIpAddress($ipAddress)
    {
        $this->container['ipAddress'] = $ipAddress;

        return $this;
    }

    /**
     * Gets serverName
     * @return string
     */
    public function getServerName()
    {
        return $this->container['serverName'];
    }

    /**
     * Sets serverName
     * @param string $serverName
     * @return $this
     */
    public function setServerName($serverName)
    {
        $this->container['serverName'] = $serverName;

        return $this;
    }

    /**
     * Gets saveFieldList
     * @return string[]
     */
    public function getSaveFieldList()
    {
        return $this->container['saveFieldList'];
    }

    /**
     * Sets saveFieldList
     * @param string[] $saveFieldList
     * @return $this
     */
    public function setSaveFieldList($saveFieldList)
    {
        $this->container['saveFieldList'] = $saveFieldList;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets version
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     * @param string $version
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
}

}
