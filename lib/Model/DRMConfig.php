<?php
/**
 * DRMConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  WowzaApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Topix\Hackademy\WowzaApi\Model;


/**
 * DRMConfig Class Doc Comment
 *
 * @category    Class
 * @package     WowzaApi
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DRMConfig extends SwaggerModel
 {

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'DRMConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'buyDRMProtectMpegDashStreaming' => 'bool',
        'serverName' => 'string',
        'buyDRMProtectCupertinoStreaming' => 'bool',
        'version' => 'string',
        'verimatrixCupertinoKeyServerPort' => 'int',
        'verimatrixSmoothKeyServerPort' => 'int',
        'verimatrixStreamMaps' => VerimatrixStreamMapsConfig::class,
        'verimatrixSmoothKeyServerIpAddress' => 'string',
        'licenseType' => 'string',
        'verimatrixCupertinoKeyServerIpAddress' => 'string',
        'buyDRMProtectSmoothStreaming' => 'bool',
        'buyDRMUserKey' => 'string',
        'inUse' => 'bool',
        'ezDRMUsername' => 'string',
        'verimatrixProtectSmoothStreaming' => 'bool',
        'buyDRMStreamMaps' => BuyDRMStreamMapsConfig::class,
        'verimatrixCupertinoVODPerSessionKeys' => 'bool',
        'saveFieldList' => 'string[]',
        'ezDRMPassword' => 'string',
        'verimatrixProtectCupertinoStreaming' => 'bool',
        'cupertinoEncryptionAPIBased' => 'bool'
);

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'buyDRMProtectMpegDashStreaming' => 'buyDRMProtectMpegDashStreaming',
        'serverName' => 'serverName',
        'buyDRMProtectCupertinoStreaming' => 'buyDRMProtectCupertinoStreaming',
        'version' => 'version',
        'verimatrixCupertinoKeyServerPort' => 'verimatrixCupertinoKeyServerPort',
        'verimatrixSmoothKeyServerPort' => 'verimatrixSmoothKeyServerPort',
        'verimatrixStreamMaps' => 'verimatrixStreamMaps',
        'verimatrixSmoothKeyServerIpAddress' => 'verimatrixSmoothKeyServerIpAddress',
        'licenseType' => 'licenseType',
        'verimatrixCupertinoKeyServerIpAddress' => 'verimatrixCupertinoKeyServerIpAddress',
        'buyDRMProtectSmoothStreaming' => 'buyDRMProtectSmoothStreaming',
        'buyDRMUserKey' => 'buyDRMUserKey',
        'inUse' => 'inUse',
        'ezDRMUsername' => 'ezDRMUsername',
        'verimatrixProtectSmoothStreaming' => 'verimatrixProtectSmoothStreaming',
        'buyDRMStreamMaps' => 'buyDRMStreamMaps',
        'verimatrixCupertinoVODPerSessionKeys' => 'verimatrixCupertinoVODPerSessionKeys',
        'saveFieldList' => 'saveFieldList',
        'ezDRMPassword' => 'ezDRMPassword',
        'verimatrixProtectCupertinoStreaming' => 'verimatrixProtectCupertinoStreaming',
        'cupertinoEncryptionAPIBased' => 'cupertinoEncryptionAPIBased'
);

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'buyDRMProtectMpegDashStreaming' => 'setBuyDRMProtectMpegDashStreaming',
        'serverName' => 'setServerName',
        'buyDRMProtectCupertinoStreaming' => 'setBuyDRMProtectCupertinoStreaming',
        'version' => 'setVersion',
        'verimatrixCupertinoKeyServerPort' => 'setVerimatrixCupertinoKeyServerPort',
        'verimatrixSmoothKeyServerPort' => 'setVerimatrixSmoothKeyServerPort',
        'verimatrixStreamMaps' => 'setVerimatrixStreamMaps',
        'verimatrixSmoothKeyServerIpAddress' => 'setVerimatrixSmoothKeyServerIpAddress',
        'licenseType' => 'setLicenseType',
        'verimatrixCupertinoKeyServerIpAddress' => 'setVerimatrixCupertinoKeyServerIpAddress',
        'buyDRMProtectSmoothStreaming' => 'setBuyDRMProtectSmoothStreaming',
        'buyDRMUserKey' => 'setBuyDRMUserKey',
        'inUse' => 'setInUse',
        'ezDRMUsername' => 'setEzDRMUsername',
        'verimatrixProtectSmoothStreaming' => 'setVerimatrixProtectSmoothStreaming',
        'buyDRMStreamMaps' => 'setBuyDRMStreamMaps',
        'verimatrixCupertinoVODPerSessionKeys' => 'setVerimatrixCupertinoVODPerSessionKeys',
        'saveFieldList' => 'setSaveFieldList',
        'ezDRMPassword' => 'setEzDRMPassword',
        'verimatrixProtectCupertinoStreaming' => 'setVerimatrixProtectCupertinoStreaming',
        'cupertinoEncryptionAPIBased' => 'setCupertinoEncryptionAPIBased'
);

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'buyDRMProtectMpegDashStreaming' => 'getBuyDRMProtectMpegDashStreaming',
        'serverName' => 'getServerName',
        'buyDRMProtectCupertinoStreaming' => 'getBuyDRMProtectCupertinoStreaming',
        'version' => 'getVersion',
        'verimatrixCupertinoKeyServerPort' => 'getVerimatrixCupertinoKeyServerPort',
        'verimatrixSmoothKeyServerPort' => 'getVerimatrixSmoothKeyServerPort',
        'verimatrixStreamMaps' => 'getVerimatrixStreamMaps',
        'verimatrixSmoothKeyServerIpAddress' => 'getVerimatrixSmoothKeyServerIpAddress',
        'licenseType' => 'getLicenseType',
        'verimatrixCupertinoKeyServerIpAddress' => 'getVerimatrixCupertinoKeyServerIpAddress',
        'buyDRMProtectSmoothStreaming' => 'getBuyDRMProtectSmoothStreaming',
        'buyDRMUserKey' => 'getBuyDRMUserKey',
        'inUse' => 'getInUse',
        'ezDRMUsername' => 'getEzDRMUsername',
        'verimatrixProtectSmoothStreaming' => 'getVerimatrixProtectSmoothStreaming',
        'buyDRMStreamMaps' => 'getBuyDRMStreamMaps',
        'verimatrixCupertinoVODPerSessionKeys' => 'getVerimatrixCupertinoVODPerSessionKeys',
        'saveFieldList' => 'getSaveFieldList',
        'ezDRMPassword' => 'getEzDRMPassword',
        'verimatrixProtectCupertinoStreaming' => 'getVerimatrixProtectCupertinoStreaming',
        'cupertinoEncryptionAPIBased' => 'getCupertinoEncryptionAPIBased'
);

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['buyDRMProtectMpegDashStreaming'] = isset($data['buyDRMProtectMpegDashStreaming']) ? $data['buyDRMProtectMpegDashStreaming'] : null;
        $this->container['serverName'] = isset($data['serverName']) ? $data['serverName'] : null;
        $this->container['buyDRMProtectCupertinoStreaming'] = isset($data['buyDRMProtectCupertinoStreaming']) ? $data['buyDRMProtectCupertinoStreaming'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['verimatrixCupertinoKeyServerPort'] = isset($data['verimatrixCupertinoKeyServerPort']) ? $data['verimatrixCupertinoKeyServerPort'] : null;
        $this->container['verimatrixSmoothKeyServerPort'] = isset($data['verimatrixSmoothKeyServerPort']) ? $data['verimatrixSmoothKeyServerPort'] : null;
        $this->container['verimatrixStreamMaps'] = isset($data['verimatrixStreamMaps']) ? $data['verimatrixStreamMaps'] : null;
        $this->container['verimatrixSmoothKeyServerIpAddress'] = isset($data['verimatrixSmoothKeyServerIpAddress']) ? $data['verimatrixSmoothKeyServerIpAddress'] : null;
        $this->container['licenseType'] = isset($data['licenseType']) ? $data['licenseType'] : null;
        $this->container['verimatrixCupertinoKeyServerIpAddress'] = isset($data['verimatrixCupertinoKeyServerIpAddress']) ? $data['verimatrixCupertinoKeyServerIpAddress'] : null;
        $this->container['buyDRMProtectSmoothStreaming'] = isset($data['buyDRMProtectSmoothStreaming']) ? $data['buyDRMProtectSmoothStreaming'] : null;
        $this->container['buyDRMUserKey'] = isset($data['buyDRMUserKey']) ? $data['buyDRMUserKey'] : null;
        $this->container['inUse'] = isset($data['inUse']) ? $data['inUse'] : null;
        $this->container['ezDRMUsername'] = isset($data['ezDRMUsername']) ? $data['ezDRMUsername'] : null;
        $this->container['verimatrixProtectSmoothStreaming'] = isset($data['verimatrixProtectSmoothStreaming']) ? $data['verimatrixProtectSmoothStreaming'] : null;
        $this->container['buyDRMStreamMaps'] = isset($data['buyDRMStreamMaps']) ? $data['buyDRMStreamMaps'] : null;
        $this->container['verimatrixCupertinoVODPerSessionKeys'] = isset($data['verimatrixCupertinoVODPerSessionKeys']) ? $data['verimatrixCupertinoVODPerSessionKeys'] : null;
        $this->container['saveFieldList'] = isset($data['saveFieldList']) ? $data['saveFieldList'] : null;
        $this->container['ezDRMPassword'] = isset($data['ezDRMPassword']) ? $data['ezDRMPassword'] : null;
        $this->container['verimatrixProtectCupertinoStreaming'] = isset($data['verimatrixProtectCupertinoStreaming']) ? $data['verimatrixProtectCupertinoStreaming'] : null;
        $this->container['cupertinoEncryptionAPIBased'] = isset($data['cupertinoEncryptionAPIBased']) ? $data['cupertinoEncryptionAPIBased'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['buyDRMProtectMpegDashStreaming'] === null) {
            $invalid_properties[] = "'buyDRMProtectMpegDashStreaming' can't be null";
        }
        if ($this->container['serverName'] === null) {
            $invalid_properties[] = "'serverName' can't be null";
        }
        if ($this->container['buyDRMProtectCupertinoStreaming'] === null) {
            $invalid_properties[] = "'buyDRMProtectCupertinoStreaming' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalid_properties[] = "'version' can't be null";
        }
        if ($this->container['verimatrixCupertinoKeyServerPort'] === null) {
            $invalid_properties[] = "'verimatrixCupertinoKeyServerPort' can't be null";
        }
        if ($this->container['verimatrixSmoothKeyServerPort'] === null) {
            $invalid_properties[] = "'verimatrixSmoothKeyServerPort' can't be null";
        }
        if ($this->container['verimatrixStreamMaps'] === null) {
            $invalid_properties[] = "'verimatrixStreamMaps' can't be null";
        }
        if ($this->container['verimatrixSmoothKeyServerIpAddress'] === null) {
            $invalid_properties[] = "'verimatrixSmoothKeyServerIpAddress' can't be null";
        }
        if ($this->container['licenseType'] === null) {
            $invalid_properties[] = "'licenseType' can't be null";
        }
        if ($this->container['verimatrixCupertinoKeyServerIpAddress'] === null) {
            $invalid_properties[] = "'verimatrixCupertinoKeyServerIpAddress' can't be null";
        }
        if ($this->container['buyDRMProtectSmoothStreaming'] === null) {
            $invalid_properties[] = "'buyDRMProtectSmoothStreaming' can't be null";
        }
        if ($this->container['buyDRMUserKey'] === null) {
            $invalid_properties[] = "'buyDRMUserKey' can't be null";
        }
        if ($this->container['inUse'] === null) {
            $invalid_properties[] = "'inUse' can't be null";
        }
        if ($this->container['ezDRMUsername'] === null) {
            $invalid_properties[] = "'ezDRMUsername' can't be null";
        }
        if ($this->container['verimatrixProtectSmoothStreaming'] === null) {
            $invalid_properties[] = "'verimatrixProtectSmoothStreaming' can't be null";
        }
        if ($this->container['buyDRMStreamMaps'] === null) {
            $invalid_properties[] = "'buyDRMStreamMaps' can't be null";
        }
        if ($this->container['verimatrixCupertinoVODPerSessionKeys'] === null) {
            $invalid_properties[] = "'verimatrixCupertinoVODPerSessionKeys' can't be null";
        }
        if ($this->container['ezDRMPassword'] === null) {
            $invalid_properties[] = "'ezDRMPassword' can't be null";
        }
        if ($this->container['verimatrixProtectCupertinoStreaming'] === null) {
            $invalid_properties[] = "'verimatrixProtectCupertinoStreaming' can't be null";
        }
        if ($this->container['cupertinoEncryptionAPIBased'] === null) {
            $invalid_properties[] = "'cupertinoEncryptionAPIBased' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['buyDRMProtectMpegDashStreaming'] === null) {
            return false;
        }
        if ($this->container['serverName'] === null) {
            return false;
        }
        if ($this->container['buyDRMProtectCupertinoStreaming'] === null) {
            return false;
        }
        if ($this->container['version'] === null) {
            return false;
        }
        if ($this->container['verimatrixCupertinoKeyServerPort'] === null) {
            return false;
        }
        if ($this->container['verimatrixSmoothKeyServerPort'] === null) {
            return false;
        }
        if ($this->container['verimatrixStreamMaps'] === null) {
            return false;
        }
        if ($this->container['verimatrixSmoothKeyServerIpAddress'] === null) {
            return false;
        }
        if ($this->container['licenseType'] === null) {
            return false;
        }
        if ($this->container['verimatrixCupertinoKeyServerIpAddress'] === null) {
            return false;
        }
        if ($this->container['buyDRMProtectSmoothStreaming'] === null) {
            return false;
        }
        if ($this->container['buyDRMUserKey'] === null) {
            return false;
        }
        if ($this->container['inUse'] === null) {
            return false;
        }
        if ($this->container['ezDRMUsername'] === null) {
            return false;
        }
        if ($this->container['verimatrixProtectSmoothStreaming'] === null) {
            return false;
        }
        if ($this->container['buyDRMStreamMaps'] === null) {
            return false;
        }
        if ($this->container['verimatrixCupertinoVODPerSessionKeys'] === null) {
            return false;
        }
        if ($this->container['ezDRMPassword'] === null) {
            return false;
        }
        if ($this->container['verimatrixProtectCupertinoStreaming'] === null) {
            return false;
        }
        if ($this->container['cupertinoEncryptionAPIBased'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets buyDRMProtectMpegDashStreaming
     * @return bool
     */
    public function getBuyDRMProtectMpegDashStreaming()
    {
        return $this->container['buyDRMProtectMpegDashStreaming'];
    }

    /**
     * Sets buyDRMProtectMpegDashStreaming
     * @param bool $buyDRMProtectMpegDashStreaming
     * @return $this
     */
    public function setBuyDRMProtectMpegDashStreaming($buyDRMProtectMpegDashStreaming)
    {
        $this->container['buyDRMProtectMpegDashStreaming'] = $buyDRMProtectMpegDashStreaming;

        return $this;
    }

    /**
     * Gets serverName
     * @return string
     */
    public function getServerName()
    {
        return $this->container['serverName'];
    }

    /**
     * Sets serverName
     * @param string $serverName
     * @return $this
     */
    public function setServerName($serverName)
    {
        $this->container['serverName'] = $serverName;

        return $this;
    }

    /**
     * Gets buyDRMProtectCupertinoStreaming
     * @return bool
     */
    public function getBuyDRMProtectCupertinoStreaming()
    {
        return $this->container['buyDRMProtectCupertinoStreaming'];
    }

    /**
     * Sets buyDRMProtectCupertinoStreaming
     * @param bool $buyDRMProtectCupertinoStreaming
     * @return $this
     */
    public function setBuyDRMProtectCupertinoStreaming($buyDRMProtectCupertinoStreaming)
    {
        $this->container['buyDRMProtectCupertinoStreaming'] = $buyDRMProtectCupertinoStreaming;

        return $this;
    }

    /**
     * Gets version
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     * @param string $version
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets verimatrixCupertinoKeyServerPort
     * @return int
     */
    public function getVerimatrixCupertinoKeyServerPort()
    {
        return $this->container['verimatrixCupertinoKeyServerPort'];
    }

    /**
     * Sets verimatrixCupertinoKeyServerPort
     * @param int $verimatrixCupertinoKeyServerPort
     * @return $this
     */
    public function setVerimatrixCupertinoKeyServerPort($verimatrixCupertinoKeyServerPort)
    {
        $this->container['verimatrixCupertinoKeyServerPort'] = $verimatrixCupertinoKeyServerPort;

        return $this;
    }

    /**
     * Gets verimatrixSmoothKeyServerPort
     * @return int
     */
    public function getVerimatrixSmoothKeyServerPort()
    {
        return $this->container['verimatrixSmoothKeyServerPort'];
    }

    /**
     * Sets verimatrixSmoothKeyServerPort
     * @param int $verimatrixSmoothKeyServerPort
     * @return $this
     */
    public function setVerimatrixSmoothKeyServerPort($verimatrixSmoothKeyServerPort)
    {
        $this->container['verimatrixSmoothKeyServerPort'] = $verimatrixSmoothKeyServerPort;

        return $this;
    }

    /**
     * Gets verimatrixStreamMaps
     * @return  VerimatrixStreamMapsConfig
     */
    public function getVerimatrixStreamMaps()
    {
        return $this->container['verimatrixStreamMaps'];
    }

    /**
     * Sets verimatrixStreamMaps
     * @param VerimatrixStreamMapsConfig $verimatrixStreamMaps
     * @return $this
     */
    public function setVerimatrixStreamMaps($verimatrixStreamMaps)
    {
        $this->container['verimatrixStreamMaps'] = $verimatrixStreamMaps;

        return $this;
    }

    /**
     * Gets verimatrixSmoothKeyServerIpAddress
     * @return string
     */
    public function getVerimatrixSmoothKeyServerIpAddress()
    {
        return $this->container['verimatrixSmoothKeyServerIpAddress'];
    }

    /**
     * Sets verimatrixSmoothKeyServerIpAddress
     * @param string $verimatrixSmoothKeyServerIpAddress
     * @return $this
     */
    public function setVerimatrixSmoothKeyServerIpAddress($verimatrixSmoothKeyServerIpAddress)
    {
        $this->container['verimatrixSmoothKeyServerIpAddress'] = $verimatrixSmoothKeyServerIpAddress;

        return $this;
    }

    /**
     * Gets licenseType
     * @return string
     */
    public function getLicenseType()
    {
        return $this->container['licenseType'];
    }

    /**
     * Sets licenseType
     * @param string $licenseType
     * @return $this
     */
    public function setLicenseType($licenseType)
    {
        $this->container['licenseType'] = $licenseType;

        return $this;
    }

    /**
     * Gets verimatrixCupertinoKeyServerIpAddress
     * @return string
     */
    public function getVerimatrixCupertinoKeyServerIpAddress()
    {
        return $this->container['verimatrixCupertinoKeyServerIpAddress'];
    }

    /**
     * Sets verimatrixCupertinoKeyServerIpAddress
     * @param string $verimatrixCupertinoKeyServerIpAddress
     * @return $this
     */
    public function setVerimatrixCupertinoKeyServerIpAddress($verimatrixCupertinoKeyServerIpAddress)
    {
        $this->container['verimatrixCupertinoKeyServerIpAddress'] = $verimatrixCupertinoKeyServerIpAddress;

        return $this;
    }

    /**
     * Gets buyDRMProtectSmoothStreaming
     * @return bool
     */
    public function getBuyDRMProtectSmoothStreaming()
    {
        return $this->container['buyDRMProtectSmoothStreaming'];
    }

    /**
     * Sets buyDRMProtectSmoothStreaming
     * @param bool $buyDRMProtectSmoothStreaming
     * @return $this
     */
    public function setBuyDRMProtectSmoothStreaming($buyDRMProtectSmoothStreaming)
    {
        $this->container['buyDRMProtectSmoothStreaming'] = $buyDRMProtectSmoothStreaming;

        return $this;
    }

    /**
     * Gets buyDRMUserKey
     * @return string
     */
    public function getBuyDRMUserKey()
    {
        return $this->container['buyDRMUserKey'];
    }

    /**
     * Sets buyDRMUserKey
     * @param string $buyDRMUserKey
     * @return $this
     */
    public function setBuyDRMUserKey($buyDRMUserKey)
    {
        $this->container['buyDRMUserKey'] = $buyDRMUserKey;

        return $this;
    }

    /**
     * Gets inUse
     * @return bool
     */
    public function getInUse()
    {
        return $this->container['inUse'];
    }

    /**
     * Sets inUse
     * @param bool $inUse
     * @return $this
     */
    public function setInUse($inUse)
    {
        $this->container['inUse'] = $inUse;

        return $this;
    }

    /**
     * Gets ezDRMUsername
     * @return string
     */
    public function getEzDRMUsername()
    {
        return $this->container['ezDRMUsername'];
    }

    /**
     * Sets ezDRMUsername
     * @param string $ezDRMUsername
     * @return $this
     */
    public function setEzDRMUsername($ezDRMUsername)
    {
        $this->container['ezDRMUsername'] = $ezDRMUsername;

        return $this;
    }

    /**
     * Gets verimatrixProtectSmoothStreaming
     * @return bool
     */
    public function getVerimatrixProtectSmoothStreaming()
    {
        return $this->container['verimatrixProtectSmoothStreaming'];
    }

    /**
     * Sets verimatrixProtectSmoothStreaming
     * @param bool $verimatrixProtectSmoothStreaming
     * @return $this
     */
    public function setVerimatrixProtectSmoothStreaming($verimatrixProtectSmoothStreaming)
    {
        $this->container['verimatrixProtectSmoothStreaming'] = $verimatrixProtectSmoothStreaming;

        return $this;
    }

    /**
     * Gets buyDRMStreamMaps
     * @return  BuyDRMStreamMapsConfig
     */
    public function getBuyDRMStreamMaps()
    {
        return $this->container['buyDRMStreamMaps'];
    }

    /**
     * Sets buyDRMStreamMaps
     * @param BuyDRMStreamMapsConfig $buyDRMStreamMaps
     * @return $this
     */
    public function setBuyDRMStreamMaps($buyDRMStreamMaps)
    {
        $this->container['buyDRMStreamMaps'] = $buyDRMStreamMaps;

        return $this;
    }

    /**
     * Gets verimatrixCupertinoVODPerSessionKeys
     * @return bool
     */
    public function getVerimatrixCupertinoVODPerSessionKeys()
    {
        return $this->container['verimatrixCupertinoVODPerSessionKeys'];
    }

    /**
     * Sets verimatrixCupertinoVODPerSessionKeys
     * @param bool $verimatrixCupertinoVODPerSessionKeys
     * @return $this
     */
    public function setVerimatrixCupertinoVODPerSessionKeys($verimatrixCupertinoVODPerSessionKeys)
    {
        $this->container['verimatrixCupertinoVODPerSessionKeys'] = $verimatrixCupertinoVODPerSessionKeys;

        return $this;
    }

    /**
     * Gets saveFieldList
     * @return string[]
     */
    public function getSaveFieldList()
    {
        return $this->container['saveFieldList'];
    }

    /**
     * Sets saveFieldList
     * @param string[] $saveFieldList
     * @return $this
     */
    public function setSaveFieldList($saveFieldList)
    {
        $this->container['saveFieldList'] = $saveFieldList;

        return $this;
    }

    /**
     * Gets ezDRMPassword
     * @return string
     */
    public function getEzDRMPassword()
    {
        return $this->container['ezDRMPassword'];
    }

    /**
     * Sets ezDRMPassword
     * @param string $ezDRMPassword
     * @return $this
     */
    public function setEzDRMPassword($ezDRMPassword)
    {
        $this->container['ezDRMPassword'] = $ezDRMPassword;

        return $this;
    }

    /**
     * Gets verimatrixProtectCupertinoStreaming
     * @return bool
     */
    public function getVerimatrixProtectCupertinoStreaming()
    {
        return $this->container['verimatrixProtectCupertinoStreaming'];
    }

    /**
     * Sets verimatrixProtectCupertinoStreaming
     * @param bool $verimatrixProtectCupertinoStreaming
     * @return $this
     */
    public function setVerimatrixProtectCupertinoStreaming($verimatrixProtectCupertinoStreaming)
    {
        $this->container['verimatrixProtectCupertinoStreaming'] = $verimatrixProtectCupertinoStreaming;

        return $this;
    }

    /**
     * Gets cupertinoEncryptionAPIBased
     * @return bool
     */
    public function getCupertinoEncryptionAPIBased()
    {
        return $this->container['cupertinoEncryptionAPIBased'];
    }

    /**
     * Sets cupertinoEncryptionAPIBased
     * @param bool $cupertinoEncryptionAPIBased
     * @return $this
     */
    public function setCupertinoEncryptionAPIBased($cupertinoEncryptionAPIBased)
    {
        $this->container['cupertinoEncryptionAPIBased'] = $cupertinoEncryptionAPIBased;

        return $this;
}

}
