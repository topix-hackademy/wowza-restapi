<?php
/**
 * MediaCacheConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  WowzaApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Topix\Hackademy\WowzaApi\Model;


/**
 * MediaCacheConfig Class Doc Comment
 *
 * @category    Class
 * @package     WowzaApi
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class MediaCacheConfig extends SwaggerModel
 {

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'MediaCacheConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'maxPendingWriteRequestSizeAutoValue' => 'string',
        'sources' => MediaCacheSourceConfig::class.'[]',
        'stores' => MediaCacheStoreConfig::class.'[]',
        'serverName' => 'string',
        'version' => 'string',
        'maxPendingReadAheadRequestSizeAutoValue' => 'string',
        'readAheadThreadPoolSizeAutoValue' => 'string',
        'readAheadThreadPoolSize' => 'string',
        'maxPendingReadAheadRequestSize' => 'string',
        'saveFieldList' => 'string[]',
        'maxPendingWriteRequestSize' => 'string',
        'writerThreadPoolSizeAutoValue' => 'string',
        'writerThreadPoolSize' => 'string'
);

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'maxPendingWriteRequestSizeAutoValue' => 'maxPendingWriteRequestSizeAutoValue',
        'sources' => 'sources',
        'stores' => 'stores',
        'serverName' => 'serverName',
        'version' => 'version',
        'maxPendingReadAheadRequestSizeAutoValue' => 'maxPendingReadAheadRequestSizeAutoValue',
        'readAheadThreadPoolSizeAutoValue' => 'readAheadThreadPoolSizeAutoValue',
        'readAheadThreadPoolSize' => 'readAheadThreadPoolSize',
        'maxPendingReadAheadRequestSize' => 'maxPendingReadAheadRequestSize',
        'saveFieldList' => 'saveFieldList',
        'maxPendingWriteRequestSize' => 'maxPendingWriteRequestSize',
        'writerThreadPoolSizeAutoValue' => 'writerThreadPoolSizeAutoValue',
        'writerThreadPoolSize' => 'writerThreadPoolSize'
);

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'maxPendingWriteRequestSizeAutoValue' => 'setMaxPendingWriteRequestSizeAutoValue',
        'sources' => 'setSources',
        'stores' => 'setStores',
        'serverName' => 'setServerName',
        'version' => 'setVersion',
        'maxPendingReadAheadRequestSizeAutoValue' => 'setMaxPendingReadAheadRequestSizeAutoValue',
        'readAheadThreadPoolSizeAutoValue' => 'setReadAheadThreadPoolSizeAutoValue',
        'readAheadThreadPoolSize' => 'setReadAheadThreadPoolSize',
        'maxPendingReadAheadRequestSize' => 'setMaxPendingReadAheadRequestSize',
        'saveFieldList' => 'setSaveFieldList',
        'maxPendingWriteRequestSize' => 'setMaxPendingWriteRequestSize',
        'writerThreadPoolSizeAutoValue' => 'setWriterThreadPoolSizeAutoValue',
        'writerThreadPoolSize' => 'setWriterThreadPoolSize'
);

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'maxPendingWriteRequestSizeAutoValue' => 'getMaxPendingWriteRequestSizeAutoValue',
        'sources' => 'getSources',
        'stores' => 'getStores',
        'serverName' => 'getServerName',
        'version' => 'getVersion',
        'maxPendingReadAheadRequestSizeAutoValue' => 'getMaxPendingReadAheadRequestSizeAutoValue',
        'readAheadThreadPoolSizeAutoValue' => 'getReadAheadThreadPoolSizeAutoValue',
        'readAheadThreadPoolSize' => 'getReadAheadThreadPoolSize',
        'maxPendingReadAheadRequestSize' => 'getMaxPendingReadAheadRequestSize',
        'saveFieldList' => 'getSaveFieldList',
        'maxPendingWriteRequestSize' => 'getMaxPendingWriteRequestSize',
        'writerThreadPoolSizeAutoValue' => 'getWriterThreadPoolSizeAutoValue',
        'writerThreadPoolSize' => 'getWriterThreadPoolSize'
);

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['maxPendingWriteRequestSizeAutoValue'] = isset($data['maxPendingWriteRequestSizeAutoValue']) ? $data['maxPendingWriteRequestSizeAutoValue'] : null;
        $this->container['sources'] = isset($data['sources']) ? $data['sources'] : null;
        $this->container['stores'] = isset($data['stores']) ? $data['stores'] : null;
        $this->container['serverName'] = isset($data['serverName']) ? $data['serverName'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['maxPendingReadAheadRequestSizeAutoValue'] = isset($data['maxPendingReadAheadRequestSizeAutoValue']) ? $data['maxPendingReadAheadRequestSizeAutoValue'] : null;
        $this->container['readAheadThreadPoolSizeAutoValue'] = isset($data['readAheadThreadPoolSizeAutoValue']) ? $data['readAheadThreadPoolSizeAutoValue'] : null;
        $this->container['readAheadThreadPoolSize'] = isset($data['readAheadThreadPoolSize']) ? $data['readAheadThreadPoolSize'] : null;
        $this->container['maxPendingReadAheadRequestSize'] = isset($data['maxPendingReadAheadRequestSize']) ? $data['maxPendingReadAheadRequestSize'] : null;
        $this->container['saveFieldList'] = isset($data['saveFieldList']) ? $data['saveFieldList'] : null;
        $this->container['maxPendingWriteRequestSize'] = isset($data['maxPendingWriteRequestSize']) ? $data['maxPendingWriteRequestSize'] : null;
        $this->container['writerThreadPoolSizeAutoValue'] = isset($data['writerThreadPoolSizeAutoValue']) ? $data['writerThreadPoolSizeAutoValue'] : null;
        $this->container['writerThreadPoolSize'] = isset($data['writerThreadPoolSize']) ? $data['writerThreadPoolSize'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['maxPendingWriteRequestSizeAutoValue'] === null) {
            $invalid_properties[] = "'maxPendingWriteRequestSizeAutoValue' can't be null";
        }
        if ($this->container['sources'] === null) {
            $invalid_properties[] = "'sources' can't be null";
        }
        if ($this->container['stores'] === null) {
            $invalid_properties[] = "'stores' can't be null";
        }
        if ($this->container['serverName'] === null) {
            $invalid_properties[] = "'serverName' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalid_properties[] = "'version' can't be null";
        }
        if ($this->container['maxPendingReadAheadRequestSizeAutoValue'] === null) {
            $invalid_properties[] = "'maxPendingReadAheadRequestSizeAutoValue' can't be null";
        }
        if ($this->container['readAheadThreadPoolSizeAutoValue'] === null) {
            $invalid_properties[] = "'readAheadThreadPoolSizeAutoValue' can't be null";
        }
        if ($this->container['readAheadThreadPoolSize'] === null) {
            $invalid_properties[] = "'readAheadThreadPoolSize' can't be null";
        }
        if ($this->container['maxPendingReadAheadRequestSize'] === null) {
            $invalid_properties[] = "'maxPendingReadAheadRequestSize' can't be null";
        }
        if ($this->container['maxPendingWriteRequestSize'] === null) {
            $invalid_properties[] = "'maxPendingWriteRequestSize' can't be null";
        }
        if ($this->container['writerThreadPoolSizeAutoValue'] === null) {
            $invalid_properties[] = "'writerThreadPoolSizeAutoValue' can't be null";
        }
        if ($this->container['writerThreadPoolSize'] === null) {
            $invalid_properties[] = "'writerThreadPoolSize' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['maxPendingWriteRequestSizeAutoValue'] === null) {
            return false;
        }
        if ($this->container['sources'] === null) {
            return false;
        }
        if ($this->container['stores'] === null) {
            return false;
        }
        if ($this->container['serverName'] === null) {
            return false;
        }
        if ($this->container['version'] === null) {
            return false;
        }
        if ($this->container['maxPendingReadAheadRequestSizeAutoValue'] === null) {
            return false;
        }
        if ($this->container['readAheadThreadPoolSizeAutoValue'] === null) {
            return false;
        }
        if ($this->container['readAheadThreadPoolSize'] === null) {
            return false;
        }
        if ($this->container['maxPendingReadAheadRequestSize'] === null) {
            return false;
        }
        if ($this->container['maxPendingWriteRequestSize'] === null) {
            return false;
        }
        if ($this->container['writerThreadPoolSizeAutoValue'] === null) {
            return false;
        }
        if ($this->container['writerThreadPoolSize'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets maxPendingWriteRequestSizeAutoValue
     * @return string
     */
    public function getMaxPendingWriteRequestSizeAutoValue()
    {
        return $this->container['maxPendingWriteRequestSizeAutoValue'];
    }

    /**
     * Sets maxPendingWriteRequestSizeAutoValue
     * @param string $maxPendingWriteRequestSizeAutoValue
     * @return $this
     */
    public function setMaxPendingWriteRequestSizeAutoValue($maxPendingWriteRequestSizeAutoValue)
    {
        $this->container['maxPendingWriteRequestSizeAutoValue'] = $maxPendingWriteRequestSizeAutoValue;

        return $this;
    }

    /**
     * Gets sources
     * @return  MediaCacheSourceConfig[]
     */
    public function getSources()
    {
        return $this->container['sources'];
    }

    /**
     * Sets sources
     * @param MediaCacheSourceConfig[] $sources
     * @return $this
     */
    public function setSources($sources)
    {
        $this->container['sources'] = $sources;

        return $this;
    }

    /**
     * Gets stores
     * @return  MediaCacheStoreConfig[]
     */
    public function getStores()
    {
        return $this->container['stores'];
    }

    /**
     * Sets stores
     * @param MediaCacheStoreConfig[] $stores
     * @return $this
     */
    public function setStores($stores)
    {
        $this->container['stores'] = $stores;

        return $this;
    }

    /**
     * Gets serverName
     * @return string
     */
    public function getServerName()
    {
        return $this->container['serverName'];
    }

    /**
     * Sets serverName
     * @param string $serverName
     * @return $this
     */
    public function setServerName($serverName)
    {
        $this->container['serverName'] = $serverName;

        return $this;
    }

    /**
     * Gets version
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     * @param string $version
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets maxPendingReadAheadRequestSizeAutoValue
     * @return string
     */
    public function getMaxPendingReadAheadRequestSizeAutoValue()
    {
        return $this->container['maxPendingReadAheadRequestSizeAutoValue'];
    }

    /**
     * Sets maxPendingReadAheadRequestSizeAutoValue
     * @param string $maxPendingReadAheadRequestSizeAutoValue
     * @return $this
     */
    public function setMaxPendingReadAheadRequestSizeAutoValue($maxPendingReadAheadRequestSizeAutoValue)
    {
        $this->container['maxPendingReadAheadRequestSizeAutoValue'] = $maxPendingReadAheadRequestSizeAutoValue;

        return $this;
    }

    /**
     * Gets readAheadThreadPoolSizeAutoValue
     * @return string
     */
    public function getReadAheadThreadPoolSizeAutoValue()
    {
        return $this->container['readAheadThreadPoolSizeAutoValue'];
    }

    /**
     * Sets readAheadThreadPoolSizeAutoValue
     * @param string $readAheadThreadPoolSizeAutoValue
     * @return $this
     */
    public function setReadAheadThreadPoolSizeAutoValue($readAheadThreadPoolSizeAutoValue)
    {
        $this->container['readAheadThreadPoolSizeAutoValue'] = $readAheadThreadPoolSizeAutoValue;

        return $this;
    }

    /**
     * Gets readAheadThreadPoolSize
     * @return string
     */
    public function getReadAheadThreadPoolSize()
    {
        return $this->container['readAheadThreadPoolSize'];
    }

    /**
     * Sets readAheadThreadPoolSize
     * @param string $readAheadThreadPoolSize
     * @return $this
     */
    public function setReadAheadThreadPoolSize($readAheadThreadPoolSize)
    {
        $this->container['readAheadThreadPoolSize'] = $readAheadThreadPoolSize;

        return $this;
    }

    /**
     * Gets maxPendingReadAheadRequestSize
     * @return string
     */
    public function getMaxPendingReadAheadRequestSize()
    {
        return $this->container['maxPendingReadAheadRequestSize'];
    }

    /**
     * Sets maxPendingReadAheadRequestSize
     * @param string $maxPendingReadAheadRequestSize
     * @return $this
     */
    public function setMaxPendingReadAheadRequestSize($maxPendingReadAheadRequestSize)
    {
        $this->container['maxPendingReadAheadRequestSize'] = $maxPendingReadAheadRequestSize;

        return $this;
    }

    /**
     * Gets saveFieldList
     * @return string[]
     */
    public function getSaveFieldList()
    {
        return $this->container['saveFieldList'];
    }

    /**
     * Sets saveFieldList
     * @param string[] $saveFieldList
     * @return $this
     */
    public function setSaveFieldList($saveFieldList)
    {
        $this->container['saveFieldList'] = $saveFieldList;

        return $this;
    }

    /**
     * Gets maxPendingWriteRequestSize
     * @return string
     */
    public function getMaxPendingWriteRequestSize()
    {
        return $this->container['maxPendingWriteRequestSize'];
    }

    /**
     * Sets maxPendingWriteRequestSize
     * @param string $maxPendingWriteRequestSize
     * @return $this
     */
    public function setMaxPendingWriteRequestSize($maxPendingWriteRequestSize)
    {
        $this->container['maxPendingWriteRequestSize'] = $maxPendingWriteRequestSize;

        return $this;
    }

    /**
     * Gets writerThreadPoolSizeAutoValue
     * @return string
     */
    public function getWriterThreadPoolSizeAutoValue()
    {
        return $this->container['writerThreadPoolSizeAutoValue'];
    }

    /**
     * Sets writerThreadPoolSizeAutoValue
     * @param string $writerThreadPoolSizeAutoValue
     * @return $this
     */
    public function setWriterThreadPoolSizeAutoValue($writerThreadPoolSizeAutoValue)
    {
        $this->container['writerThreadPoolSizeAutoValue'] = $writerThreadPoolSizeAutoValue;

        return $this;
    }

    /**
     * Gets writerThreadPoolSize
     * @return string
     */
    public function getWriterThreadPoolSize()
    {
        return $this->container['writerThreadPoolSize'];
    }

    /**
     * Sets writerThreadPoolSize
     * @param string $writerThreadPoolSize
     * @return $this
     */
    public function setWriterThreadPoolSize($writerThreadPoolSize)
    {
        $this->container['writerThreadPoolSize'] = $writerThreadPoolSize;

        return $this;
}

}
