<?php
/**
 * DVRConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  WowzaApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Topix\Hackademy\WowzaApi\Model;


/**
 * DVRConfig Class Doc Comment
 *
 * @category    Class
 * @package     WowzaApi
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DVRConfig extends SwaggerModel
 {

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'DVRConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'windowDuration' => 'int',
        'dvrMediaCacheEnabled' => 'bool',
        'dvrEnable' => 'bool',
        'startRecordingOnStartup' => 'bool',
        'serverName' => 'string',
        'store' => 'string',
        'version' => 'string',
        'recorders' => 'string',
        'dvrOnlyStreaming' => 'bool',
        'httpRandomizeMediaName' => 'bool',
        'licenseType' => 'string',
        'dvrEncryptionSharedSecret' => 'string',
        'inUse' => 'bool',
        'archiveStrategy' => 'string',
        'storageDir' => 'string',
        'saveFieldList' => 'string[]'
);

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'windowDuration' => 'windowDuration',
        'dvrMediaCacheEnabled' => 'dvrMediaCacheEnabled',
        'dvrEnable' => 'dvrEnable',
        'startRecordingOnStartup' => 'startRecordingOnStartup',
        'serverName' => 'serverName',
        'store' => 'store',
        'version' => 'version',
        'recorders' => 'recorders',
        'dvrOnlyStreaming' => 'dvrOnlyStreaming',
        'httpRandomizeMediaName' => 'httpRandomizeMediaName',
        'licenseType' => 'licenseType',
        'dvrEncryptionSharedSecret' => 'dvrEncryptionSharedSecret',
        'inUse' => 'inUse',
        'archiveStrategy' => 'archiveStrategy',
        'storageDir' => 'storageDir',
        'saveFieldList' => 'saveFieldList'
);

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'windowDuration' => 'setWindowDuration',
        'dvrMediaCacheEnabled' => 'setDvrMediaCacheEnabled',
        'dvrEnable' => 'setDvrEnable',
        'startRecordingOnStartup' => 'setStartRecordingOnStartup',
        'serverName' => 'setServerName',
        'store' => 'setStore',
        'version' => 'setVersion',
        'recorders' => 'setRecorders',
        'dvrOnlyStreaming' => 'setDvrOnlyStreaming',
        'httpRandomizeMediaName' => 'setHttpRandomizeMediaName',
        'licenseType' => 'setLicenseType',
        'dvrEncryptionSharedSecret' => 'setDvrEncryptionSharedSecret',
        'inUse' => 'setInUse',
        'archiveStrategy' => 'setArchiveStrategy',
        'storageDir' => 'setStorageDir',
        'saveFieldList' => 'setSaveFieldList'
);

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'windowDuration' => 'getWindowDuration',
        'dvrMediaCacheEnabled' => 'getDvrMediaCacheEnabled',
        'dvrEnable' => 'getDvrEnable',
        'startRecordingOnStartup' => 'getStartRecordingOnStartup',
        'serverName' => 'getServerName',
        'store' => 'getStore',
        'version' => 'getVersion',
        'recorders' => 'getRecorders',
        'dvrOnlyStreaming' => 'getDvrOnlyStreaming',
        'httpRandomizeMediaName' => 'getHttpRandomizeMediaName',
        'licenseType' => 'getLicenseType',
        'dvrEncryptionSharedSecret' => 'getDvrEncryptionSharedSecret',
        'inUse' => 'getInUse',
        'archiveStrategy' => 'getArchiveStrategy',
        'storageDir' => 'getStorageDir',
        'saveFieldList' => 'getSaveFieldList'
);

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['windowDuration'] = isset($data['windowDuration']) ? $data['windowDuration'] : null;
        $this->container['dvrMediaCacheEnabled'] = isset($data['dvrMediaCacheEnabled']) ? $data['dvrMediaCacheEnabled'] : null;
        $this->container['dvrEnable'] = isset($data['dvrEnable']) ? $data['dvrEnable'] : null;
        $this->container['startRecordingOnStartup'] = isset($data['startRecordingOnStartup']) ? $data['startRecordingOnStartup'] : null;
        $this->container['serverName'] = isset($data['serverName']) ? $data['serverName'] : null;
        $this->container['store'] = isset($data['store']) ? $data['store'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['recorders'] = isset($data['recorders']) ? $data['recorders'] : null;
        $this->container['dvrOnlyStreaming'] = isset($data['dvrOnlyStreaming']) ? $data['dvrOnlyStreaming'] : null;
        $this->container['httpRandomizeMediaName'] = isset($data['httpRandomizeMediaName']) ? $data['httpRandomizeMediaName'] : null;
        $this->container['licenseType'] = isset($data['licenseType']) ? $data['licenseType'] : null;
        $this->container['dvrEncryptionSharedSecret'] = isset($data['dvrEncryptionSharedSecret']) ? $data['dvrEncryptionSharedSecret'] : null;
        $this->container['inUse'] = isset($data['inUse']) ? $data['inUse'] : null;
        $this->container['archiveStrategy'] = isset($data['archiveStrategy']) ? $data['archiveStrategy'] : null;
        $this->container['storageDir'] = isset($data['storageDir']) ? $data['storageDir'] : null;
        $this->container['saveFieldList'] = isset($data['saveFieldList']) ? $data['saveFieldList'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['windowDuration'] === null) {
            $invalid_properties[] = "'windowDuration' can't be null";
        }
        if ($this->container['dvrMediaCacheEnabled'] === null) {
            $invalid_properties[] = "'dvrMediaCacheEnabled' can't be null";
        }
        if ($this->container['dvrEnable'] === null) {
            $invalid_properties[] = "'dvrEnable' can't be null";
        }
        if ($this->container['startRecordingOnStartup'] === null) {
            $invalid_properties[] = "'startRecordingOnStartup' can't be null";
        }
        if ($this->container['serverName'] === null) {
            $invalid_properties[] = "'serverName' can't be null";
        }
        if ($this->container['store'] === null) {
            $invalid_properties[] = "'store' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalid_properties[] = "'version' can't be null";
        }
        if ($this->container['recorders'] === null) {
            $invalid_properties[] = "'recorders' can't be null";
        }
        if ($this->container['dvrOnlyStreaming'] === null) {
            $invalid_properties[] = "'dvrOnlyStreaming' can't be null";
        }
        if ($this->container['httpRandomizeMediaName'] === null) {
            $invalid_properties[] = "'httpRandomizeMediaName' can't be null";
        }
        if ($this->container['licenseType'] === null) {
            $invalid_properties[] = "'licenseType' can't be null";
        }
        if ($this->container['dvrEncryptionSharedSecret'] === null) {
            $invalid_properties[] = "'dvrEncryptionSharedSecret' can't be null";
        }
        if ($this->container['inUse'] === null) {
            $invalid_properties[] = "'inUse' can't be null";
        }
        if ($this->container['archiveStrategy'] === null) {
            $invalid_properties[] = "'archiveStrategy' can't be null";
        }
        if ($this->container['storageDir'] === null) {
            $invalid_properties[] = "'storageDir' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['windowDuration'] === null) {
            return false;
        }
        if ($this->container['dvrMediaCacheEnabled'] === null) {
            return false;
        }
        if ($this->container['dvrEnable'] === null) {
            return false;
        }
        if ($this->container['startRecordingOnStartup'] === null) {
            return false;
        }
        if ($this->container['serverName'] === null) {
            return false;
        }
        if ($this->container['store'] === null) {
            return false;
        }
        if ($this->container['version'] === null) {
            return false;
        }
        if ($this->container['recorders'] === null) {
            return false;
        }
        if ($this->container['dvrOnlyStreaming'] === null) {
            return false;
        }
        if ($this->container['httpRandomizeMediaName'] === null) {
            return false;
        }
        if ($this->container['licenseType'] === null) {
            return false;
        }
        if ($this->container['dvrEncryptionSharedSecret'] === null) {
            return false;
        }
        if ($this->container['inUse'] === null) {
            return false;
        }
        if ($this->container['archiveStrategy'] === null) {
            return false;
        }
        if ($this->container['storageDir'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets windowDuration
     * @return int
     */
    public function getWindowDuration()
    {
        return $this->container['windowDuration'];
    }

    /**
     * Sets windowDuration
     * @param int $windowDuration
     * @return $this
     */
    public function setWindowDuration($windowDuration)
    {
        $this->container['windowDuration'] = $windowDuration;

        return $this;
    }

    /**
     * Gets dvrMediaCacheEnabled
     * @return bool
     */
    public function getDvrMediaCacheEnabled()
    {
        return $this->container['dvrMediaCacheEnabled'];
    }

    /**
     * Sets dvrMediaCacheEnabled
     * @param bool $dvrMediaCacheEnabled
     * @return $this
     */
    public function setDvrMediaCacheEnabled($dvrMediaCacheEnabled)
    {
        $this->container['dvrMediaCacheEnabled'] = $dvrMediaCacheEnabled;

        return $this;
    }

    /**
     * Gets dvrEnable
     * @return bool
     */
    public function getDvrEnable()
    {
        return $this->container['dvrEnable'];
    }

    /**
     * Sets dvrEnable
     * @param bool $dvrEnable
     * @return $this
     */
    public function setDvrEnable($dvrEnable)
    {
        $this->container['dvrEnable'] = $dvrEnable;

        return $this;
    }

    /**
     * Gets startRecordingOnStartup
     * @return bool
     */
    public function getStartRecordingOnStartup()
    {
        return $this->container['startRecordingOnStartup'];
    }

    /**
     * Sets startRecordingOnStartup
     * @param bool $startRecordingOnStartup
     * @return $this
     */
    public function setStartRecordingOnStartup($startRecordingOnStartup)
    {
        $this->container['startRecordingOnStartup'] = $startRecordingOnStartup;

        return $this;
    }

    /**
     * Gets serverName
     * @return string
     */
    public function getServerName()
    {
        return $this->container['serverName'];
    }

    /**
     * Sets serverName
     * @param string $serverName
     * @return $this
     */
    public function setServerName($serverName)
    {
        $this->container['serverName'] = $serverName;

        return $this;
    }

    /**
     * Gets store
     * @return string
     */
    public function getStore()
    {
        return $this->container['store'];
    }

    /**
     * Sets store
     * @param string $store
     * @return $this
     */
    public function setStore($store)
    {
        $this->container['store'] = $store;

        return $this;
    }

    /**
     * Gets version
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     * @param string $version
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets recorders
     * @return string
     */
    public function getRecorders()
    {
        return $this->container['recorders'];
    }

    /**
     * Sets recorders
     * @param string $recorders
     * @return $this
     */
    public function setRecorders($recorders)
    {
        $this->container['recorders'] = $recorders;

        return $this;
    }

    /**
     * Gets dvrOnlyStreaming
     * @return bool
     */
    public function getDvrOnlyStreaming()
    {
        return $this->container['dvrOnlyStreaming'];
    }

    /**
     * Sets dvrOnlyStreaming
     * @param bool $dvrOnlyStreaming
     * @return $this
     */
    public function setDvrOnlyStreaming($dvrOnlyStreaming)
    {
        $this->container['dvrOnlyStreaming'] = $dvrOnlyStreaming;

        return $this;
    }

    /**
     * Gets httpRandomizeMediaName
     * @return bool
     */
    public function getHttpRandomizeMediaName()
    {
        return $this->container['httpRandomizeMediaName'];
    }

    /**
     * Sets httpRandomizeMediaName
     * @param bool $httpRandomizeMediaName
     * @return $this
     */
    public function setHttpRandomizeMediaName($httpRandomizeMediaName)
    {
        $this->container['httpRandomizeMediaName'] = $httpRandomizeMediaName;

        return $this;
    }

    /**
     * Gets licenseType
     * @return string
     */
    public function getLicenseType()
    {
        return $this->container['licenseType'];
    }

    /**
     * Sets licenseType
     * @param string $licenseType
     * @return $this
     */
    public function setLicenseType($licenseType)
    {
        $this->container['licenseType'] = $licenseType;

        return $this;
    }

    /**
     * Gets dvrEncryptionSharedSecret
     * @return string
     */
    public function getDvrEncryptionSharedSecret()
    {
        return $this->container['dvrEncryptionSharedSecret'];
    }

    /**
     * Sets dvrEncryptionSharedSecret
     * @param string $dvrEncryptionSharedSecret
     * @return $this
     */
    public function setDvrEncryptionSharedSecret($dvrEncryptionSharedSecret)
    {
        $this->container['dvrEncryptionSharedSecret'] = $dvrEncryptionSharedSecret;

        return $this;
    }

    /**
     * Gets inUse
     * @return bool
     */
    public function getInUse()
    {
        return $this->container['inUse'];
    }

    /**
     * Sets inUse
     * @param bool $inUse
     * @return $this
     */
    public function setInUse($inUse)
    {
        $this->container['inUse'] = $inUse;

        return $this;
    }

    /**
     * Gets archiveStrategy
     * @return string
     */
    public function getArchiveStrategy()
    {
        return $this->container['archiveStrategy'];
    }

    /**
     * Sets archiveStrategy
     * @param string $archiveStrategy
     * @return $this
     */
    public function setArchiveStrategy($archiveStrategy)
    {
        $this->container['archiveStrategy'] = $archiveStrategy;

        return $this;
    }

    /**
     * Gets storageDir
     * @return string
     */
    public function getStorageDir()
    {
        return $this->container['storageDir'];
    }

    /**
     * Sets storageDir
     * @param string $storageDir
     * @return $this
     */
    public function setStorageDir($storageDir)
    {
        $this->container['storageDir'] = $storageDir;

        return $this;
    }

    /**
     * Gets saveFieldList
     * @return string[]
     */
    public function getSaveFieldList()
    {
        return $this->container['saveFieldList'];
    }

    /**
     * Sets saveFieldList
     * @param string[] $saveFieldList
     * @return $this
     */
    public function setSaveFieldList($saveFieldList)
    {
        $this->container['saveFieldList'] = $saveFieldList;

        return $this;
}

}
