<?php
/**
 * SSLConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  WowzaApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Topix\Hackademy\WowzaApi\Model;


/**
 * SSLConfig Class Doc Comment
 *
 * @category    Class
 * @package     WowzaApi
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SSLConfig extends SwaggerModel
 {

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SSLConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'sslKeyStorePassword' => 'string',
        'sslProtocols' => 'string[]',
        'sslDomainToKeyStoreMapPath' => 'string',
        'sslCipherSuites' => 'string[]',
        'serverName' => 'string',
        'sslKeyStoreType' => 'string',
        'sslProtocol' => 'string',
        'sslAlgorithm' => 'string',
        'saveFieldList' => 'string[]',
        'sslKeyStorePath' => 'string',
        'version' => 'string',
        'sslEnable' => 'bool'
);

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'sslKeyStorePassword' => 'sslKeyStorePassword',
        'sslProtocols' => 'sslProtocols',
        'sslDomainToKeyStoreMapPath' => 'sslDomainToKeyStoreMapPath',
        'sslCipherSuites' => 'sslCipherSuites',
        'serverName' => 'serverName',
        'sslKeyStoreType' => 'sslKeyStoreType',
        'sslProtocol' => 'sslProtocol',
        'sslAlgorithm' => 'sslAlgorithm',
        'saveFieldList' => 'saveFieldList',
        'sslKeyStorePath' => 'sslKeyStorePath',
        'version' => 'version',
        'sslEnable' => 'sslEnable'
);

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'sslKeyStorePassword' => 'setSslKeyStorePassword',
        'sslProtocols' => 'setSslProtocols',
        'sslDomainToKeyStoreMapPath' => 'setSslDomainToKeyStoreMapPath',
        'sslCipherSuites' => 'setSslCipherSuites',
        'serverName' => 'setServerName',
        'sslKeyStoreType' => 'setSslKeyStoreType',
        'sslProtocol' => 'setSslProtocol',
        'sslAlgorithm' => 'setSslAlgorithm',
        'saveFieldList' => 'setSaveFieldList',
        'sslKeyStorePath' => 'setSslKeyStorePath',
        'version' => 'setVersion',
        'sslEnable' => 'setSslEnable'
);

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'sslKeyStorePassword' => 'getSslKeyStorePassword',
        'sslProtocols' => 'getSslProtocols',
        'sslDomainToKeyStoreMapPath' => 'getSslDomainToKeyStoreMapPath',
        'sslCipherSuites' => 'getSslCipherSuites',
        'serverName' => 'getServerName',
        'sslKeyStoreType' => 'getSslKeyStoreType',
        'sslProtocol' => 'getSslProtocol',
        'sslAlgorithm' => 'getSslAlgorithm',
        'saveFieldList' => 'getSaveFieldList',
        'sslKeyStorePath' => 'getSslKeyStorePath',
        'version' => 'getVersion',
        'sslEnable' => 'getSslEnable'
);

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sslKeyStorePassword'] = isset($data['sslKeyStorePassword']) ? $data['sslKeyStorePassword'] : null;
        $this->container['sslProtocols'] = isset($data['sslProtocols']) ? $data['sslProtocols'] : null;
        $this->container['sslDomainToKeyStoreMapPath'] = isset($data['sslDomainToKeyStoreMapPath']) ? $data['sslDomainToKeyStoreMapPath'] : null;
        $this->container['sslCipherSuites'] = isset($data['sslCipherSuites']) ? $data['sslCipherSuites'] : null;
        $this->container['serverName'] = isset($data['serverName']) ? $data['serverName'] : null;
        $this->container['sslKeyStoreType'] = isset($data['sslKeyStoreType']) ? $data['sslKeyStoreType'] : null;
        $this->container['sslProtocol'] = isset($data['sslProtocol']) ? $data['sslProtocol'] : null;
        $this->container['sslAlgorithm'] = isset($data['sslAlgorithm']) ? $data['sslAlgorithm'] : null;
        $this->container['saveFieldList'] = isset($data['saveFieldList']) ? $data['saveFieldList'] : null;
        $this->container['sslKeyStorePath'] = isset($data['sslKeyStorePath']) ? $data['sslKeyStorePath'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['sslEnable'] = isset($data['sslEnable']) ? $data['sslEnable'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['sslKeyStorePassword'] === null) {
            $invalid_properties[] = "'sslKeyStorePassword' can't be null";
        }
        if ($this->container['sslProtocols'] === null) {
            $invalid_properties[] = "'sslProtocols' can't be null";
        }
        if ($this->container['sslDomainToKeyStoreMapPath'] === null) {
            $invalid_properties[] = "'sslDomainToKeyStoreMapPath' can't be null";
        }
        if ($this->container['sslCipherSuites'] === null) {
            $invalid_properties[] = "'sslCipherSuites' can't be null";
        }
        if ($this->container['serverName'] === null) {
            $invalid_properties[] = "'serverName' can't be null";
        }
        if ($this->container['sslKeyStoreType'] === null) {
            $invalid_properties[] = "'sslKeyStoreType' can't be null";
        }
        if ($this->container['sslProtocol'] === null) {
            $invalid_properties[] = "'sslProtocol' can't be null";
        }
        if ($this->container['sslAlgorithm'] === null) {
            $invalid_properties[] = "'sslAlgorithm' can't be null";
        }
        if ($this->container['sslKeyStorePath'] === null) {
            $invalid_properties[] = "'sslKeyStorePath' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalid_properties[] = "'version' can't be null";
        }
        if ($this->container['sslEnable'] === null) {
            $invalid_properties[] = "'sslEnable' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['sslKeyStorePassword'] === null) {
            return false;
        }
        if ($this->container['sslProtocols'] === null) {
            return false;
        }
        if ($this->container['sslDomainToKeyStoreMapPath'] === null) {
            return false;
        }
        if ($this->container['sslCipherSuites'] === null) {
            return false;
        }
        if ($this->container['serverName'] === null) {
            return false;
        }
        if ($this->container['sslKeyStoreType'] === null) {
            return false;
        }
        if ($this->container['sslProtocol'] === null) {
            return false;
        }
        if ($this->container['sslAlgorithm'] === null) {
            return false;
        }
        if ($this->container['sslKeyStorePath'] === null) {
            return false;
        }
        if ($this->container['version'] === null) {
            return false;
        }
        if ($this->container['sslEnable'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets sslKeyStorePassword
     * @return string
     */
    public function getSslKeyStorePassword()
    {
        return $this->container['sslKeyStorePassword'];
    }

    /**
     * Sets sslKeyStorePassword
     * @param string $sslKeyStorePassword
     * @return $this
     */
    public function setSslKeyStorePassword($sslKeyStorePassword)
    {
        $this->container['sslKeyStorePassword'] = $sslKeyStorePassword;

        return $this;
    }

    /**
     * Gets sslProtocols
     * @return string[]
     */
    public function getSslProtocols()
    {
        return $this->container['sslProtocols'];
    }

    /**
     * Sets sslProtocols
     * @param string[] $sslProtocols
     * @return $this
     */
    public function setSslProtocols($sslProtocols)
    {
        $this->container['sslProtocols'] = $sslProtocols;

        return $this;
    }

    /**
     * Gets sslDomainToKeyStoreMapPath
     * @return string
     */
    public function getSslDomainToKeyStoreMapPath()
    {
        return $this->container['sslDomainToKeyStoreMapPath'];
    }

    /**
     * Sets sslDomainToKeyStoreMapPath
     * @param string $sslDomainToKeyStoreMapPath
     * @return $this
     */
    public function setSslDomainToKeyStoreMapPath($sslDomainToKeyStoreMapPath)
    {
        $this->container['sslDomainToKeyStoreMapPath'] = $sslDomainToKeyStoreMapPath;

        return $this;
    }

    /**
     * Gets sslCipherSuites
     * @return string[]
     */
    public function getSslCipherSuites()
    {
        return $this->container['sslCipherSuites'];
    }

    /**
     * Sets sslCipherSuites
     * @param string[] $sslCipherSuites
     * @return $this
     */
    public function setSslCipherSuites($sslCipherSuites)
    {
        $this->container['sslCipherSuites'] = $sslCipherSuites;

        return $this;
    }

    /**
     * Gets serverName
     * @return string
     */
    public function getServerName()
    {
        return $this->container['serverName'];
    }

    /**
     * Sets serverName
     * @param string $serverName
     * @return $this
     */
    public function setServerName($serverName)
    {
        $this->container['serverName'] = $serverName;

        return $this;
    }

    /**
     * Gets sslKeyStoreType
     * @return string
     */
    public function getSslKeyStoreType()
    {
        return $this->container['sslKeyStoreType'];
    }

    /**
     * Sets sslKeyStoreType
     * @param string $sslKeyStoreType
     * @return $this
     */
    public function setSslKeyStoreType($sslKeyStoreType)
    {
        $this->container['sslKeyStoreType'] = $sslKeyStoreType;

        return $this;
    }

    /**
     * Gets sslProtocol
     * @return string
     */
    public function getSslProtocol()
    {
        return $this->container['sslProtocol'];
    }

    /**
     * Sets sslProtocol
     * @param string $sslProtocol
     * @return $this
     */
    public function setSslProtocol($sslProtocol)
    {
        $this->container['sslProtocol'] = $sslProtocol;

        return $this;
    }

    /**
     * Gets sslAlgorithm
     * @return string
     */
    public function getSslAlgorithm()
    {
        return $this->container['sslAlgorithm'];
    }

    /**
     * Sets sslAlgorithm
     * @param string $sslAlgorithm
     * @return $this
     */
    public function setSslAlgorithm($sslAlgorithm)
    {
        $this->container['sslAlgorithm'] = $sslAlgorithm;

        return $this;
    }

    /**
     * Gets saveFieldList
     * @return string[]
     */
    public function getSaveFieldList()
    {
        return $this->container['saveFieldList'];
    }

    /**
     * Sets saveFieldList
     * @param string[] $saveFieldList
     * @return $this
     */
    public function setSaveFieldList($saveFieldList)
    {
        $this->container['saveFieldList'] = $saveFieldList;

        return $this;
    }

    /**
     * Gets sslKeyStorePath
     * @return string
     */
    public function getSslKeyStorePath()
    {
        return $this->container['sslKeyStorePath'];
    }

    /**
     * Sets sslKeyStorePath
     * @param string $sslKeyStorePath
     * @return $this
     */
    public function setSslKeyStorePath($sslKeyStorePath)
    {
        $this->container['sslKeyStorePath'] = $sslKeyStorePath;

        return $this;
    }

    /**
     * Gets version
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     * @param string $version
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets sslEnable
     * @return bool
     */
    public function getSslEnable()
    {
        return $this->container['sslEnable'];
    }

    /**
     * Sets sslEnable
     * @param bool $sslEnable
     * @return $this
     */
    public function setSslEnable($sslEnable)
    {
        $this->container['sslEnable'] = $sslEnable;

        return $this;
}

}
