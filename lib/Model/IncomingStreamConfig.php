<?php
/**
 * IncomingStreamConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  WowzaApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Topix\Hackademy\WowzaApi\Model;


/**
 * IncomingStreamConfig Class Doc Comment
 *
 * @category    Class
 * @package     WowzaApi
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class IncomingStreamConfig extends SwaggerModel
 {

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'IncomingStreamConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'ptzPollingInterval' => 'int',
        'isRecordingSet' => 'bool',
        'sourceIp' => 'string',
        'applicationInstance' => 'string',
        'isPTZEnabled' => 'bool',
        'name' => 'string',
        'isConnected' => 'bool',
        'serverName' => 'string',
        'isPublishedToVOD' => 'bool',
        'saveFieldList' => 'string[]',
        'version' => 'string',
        'isStreamManagerStream' => 'bool'
);

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'ptzPollingInterval' => 'ptzPollingInterval',
        'isRecordingSet' => 'isRecordingSet',
        'sourceIp' => 'sourceIp',
        'applicationInstance' => 'applicationInstance',
        'isPTZEnabled' => 'isPTZEnabled',
        'name' => 'name',
        'isConnected' => 'isConnected',
        'serverName' => 'serverName',
        'isPublishedToVOD' => 'isPublishedToVOD',
        'saveFieldList' => 'saveFieldList',
        'version' => 'version',
        'isStreamManagerStream' => 'isStreamManagerStream'
);

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'ptzPollingInterval' => 'setPtzPollingInterval',
        'isRecordingSet' => 'setIsRecordingSet',
        'sourceIp' => 'setSourceIp',
        'applicationInstance' => 'setApplicationInstance',
        'isPTZEnabled' => 'setIsPTZEnabled',
        'name' => 'setName',
        'isConnected' => 'setIsConnected',
        'serverName' => 'setServerName',
        'isPublishedToVOD' => 'setIsPublishedToVOD',
        'saveFieldList' => 'setSaveFieldList',
        'version' => 'setVersion',
        'isStreamManagerStream' => 'setIsStreamManagerStream'
);

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'ptzPollingInterval' => 'getPtzPollingInterval',
        'isRecordingSet' => 'getIsRecordingSet',
        'sourceIp' => 'getSourceIp',
        'applicationInstance' => 'getApplicationInstance',
        'isPTZEnabled' => 'getIsPTZEnabled',
        'name' => 'getName',
        'isConnected' => 'getIsConnected',
        'serverName' => 'getServerName',
        'isPublishedToVOD' => 'getIsPublishedToVOD',
        'saveFieldList' => 'getSaveFieldList',
        'version' => 'getVersion',
        'isStreamManagerStream' => 'getIsStreamManagerStream'
);

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ptzPollingInterval'] = isset($data['ptzPollingInterval']) ? $data['ptzPollingInterval'] : null;
        $this->container['isRecordingSet'] = isset($data['isRecordingSet']) ? $data['isRecordingSet'] : null;
        $this->container['sourceIp'] = isset($data['sourceIp']) ? $data['sourceIp'] : null;
        $this->container['applicationInstance'] = isset($data['applicationInstance']) ? $data['applicationInstance'] : null;
        $this->container['isPTZEnabled'] = isset($data['isPTZEnabled']) ? $data['isPTZEnabled'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['isConnected'] = isset($data['isConnected']) ? $data['isConnected'] : null;
        $this->container['serverName'] = isset($data['serverName']) ? $data['serverName'] : null;
        $this->container['isPublishedToVOD'] = isset($data['isPublishedToVOD']) ? $data['isPublishedToVOD'] : null;
        $this->container['saveFieldList'] = isset($data['saveFieldList']) ? $data['saveFieldList'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['isStreamManagerStream'] = isset($data['isStreamManagerStream']) ? $data['isStreamManagerStream'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['ptzPollingInterval'] === null) {
            $invalid_properties[] = "'ptzPollingInterval' can't be null";
        }
        if ($this->container['isRecordingSet'] === null) {
            $invalid_properties[] = "'isRecordingSet' can't be null";
        }
        if ($this->container['sourceIp'] === null) {
            $invalid_properties[] = "'sourceIp' can't be null";
        }
        if ($this->container['applicationInstance'] === null) {
            $invalid_properties[] = "'applicationInstance' can't be null";
        }
        if ($this->container['isPTZEnabled'] === null) {
            $invalid_properties[] = "'isPTZEnabled' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['isConnected'] === null) {
            $invalid_properties[] = "'isConnected' can't be null";
        }
        if ($this->container['serverName'] === null) {
            $invalid_properties[] = "'serverName' can't be null";
        }
        if ($this->container['isPublishedToVOD'] === null) {
            $invalid_properties[] = "'isPublishedToVOD' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalid_properties[] = "'version' can't be null";
        }
        if ($this->container['isStreamManagerStream'] === null) {
            $invalid_properties[] = "'isStreamManagerStream' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['ptzPollingInterval'] === null) {
            return false;
        }
        if ($this->container['isRecordingSet'] === null) {
            return false;
        }
        if ($this->container['sourceIp'] === null) {
            return false;
        }
        if ($this->container['applicationInstance'] === null) {
            return false;
        }
        if ($this->container['isPTZEnabled'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['isConnected'] === null) {
            return false;
        }
        if ($this->container['serverName'] === null) {
            return false;
        }
        if ($this->container['isPublishedToVOD'] === null) {
            return false;
        }
        if ($this->container['version'] === null) {
            return false;
        }
        if ($this->container['isStreamManagerStream'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets ptzPollingInterval
     * @return int
     */
    public function getPtzPollingInterval()
    {
        return $this->container['ptzPollingInterval'];
    }

    /**
     * Sets ptzPollingInterval
     * @param int $ptzPollingInterval
     * @return $this
     */
    public function setPtzPollingInterval($ptzPollingInterval)
    {
        $this->container['ptzPollingInterval'] = $ptzPollingInterval;

        return $this;
    }

    /**
     * Gets isRecordingSet
     * @return bool
     */
    public function getIsRecordingSet()
    {
        return $this->container['isRecordingSet'];
    }

    /**
     * Sets isRecordingSet
     * @param bool $isRecordingSet
     * @return $this
     */
    public function setIsRecordingSet($isRecordingSet)
    {
        $this->container['isRecordingSet'] = $isRecordingSet;

        return $this;
    }

    /**
     * Gets sourceIp
     * @return string
     */
    public function getSourceIp()
    {
        return $this->container['sourceIp'];
    }

    /**
     * Sets sourceIp
     * @param string $sourceIp
     * @return $this
     */
    public function setSourceIp($sourceIp)
    {
        $this->container['sourceIp'] = $sourceIp;

        return $this;
    }

    /**
     * Gets applicationInstance
     * @return string
     */
    public function getApplicationInstance()
    {
        return $this->container['applicationInstance'];
    }

    /**
     * Sets applicationInstance
     * @param string $applicationInstance
     * @return $this
     */
    public function setApplicationInstance($applicationInstance)
    {
        $this->container['applicationInstance'] = $applicationInstance;

        return $this;
    }

    /**
     * Gets isPTZEnabled
     * @return bool
     */
    public function getIsPTZEnabled()
    {
        return $this->container['isPTZEnabled'];
    }

    /**
     * Sets isPTZEnabled
     * @param bool $isPTZEnabled
     * @return $this
     */
    public function setIsPTZEnabled($isPTZEnabled)
    {
        $this->container['isPTZEnabled'] = $isPTZEnabled;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets isConnected
     * @return bool
     */
    public function getIsConnected()
    {
        return $this->container['isConnected'];
    }

    /**
     * Sets isConnected
     * @param bool $isConnected
     * @return $this
     */
    public function setIsConnected($isConnected)
    {
        $this->container['isConnected'] = $isConnected;

        return $this;
    }

    /**
     * Gets serverName
     * @return string
     */
    public function getServerName()
    {
        return $this->container['serverName'];
    }

    /**
     * Sets serverName
     * @param string $serverName
     * @return $this
     */
    public function setServerName($serverName)
    {
        $this->container['serverName'] = $serverName;

        return $this;
    }

    /**
     * Gets isPublishedToVOD
     * @return bool
     */
    public function getIsPublishedToVOD()
    {
        return $this->container['isPublishedToVOD'];
    }

    /**
     * Sets isPublishedToVOD
     * @param bool $isPublishedToVOD
     * @return $this
     */
    public function setIsPublishedToVOD($isPublishedToVOD)
    {
        $this->container['isPublishedToVOD'] = $isPublishedToVOD;

        return $this;
    }

    /**
     * Gets saveFieldList
     * @return string[]
     */
    public function getSaveFieldList()
    {
        return $this->container['saveFieldList'];
    }

    /**
     * Sets saveFieldList
     * @param string[] $saveFieldList
     * @return $this
     */
    public function setSaveFieldList($saveFieldList)
    {
        $this->container['saveFieldList'] = $saveFieldList;

        return $this;
    }

    /**
     * Gets version
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     * @param string $version
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets isStreamManagerStream
     * @return bool
     */
    public function getIsStreamManagerStream()
    {
        return $this->container['isStreamManagerStream'];
    }

    /**
     * Sets isStreamManagerStream
     * @param bool $isStreamManagerStream
     * @return $this
     */
    public function setIsStreamManagerStream($isStreamManagerStream)
    {
        $this->container['isStreamManagerStream'] = $isStreamManagerStream;

        return $this;
}

}
