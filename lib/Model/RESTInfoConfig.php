<?php
/**
 * RESTInfoConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  WowzaApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Topix\Hackademy\WowzaApi\Model;


/**
 * RESTInfoConfig Class Doc Comment
 *
 * @category    Class
 * @package     WowzaApi
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RESTInfoConfig extends SwaggerModel
 {

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RESTInfoConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'apiVersion' => 'int',
        'serverName' => 'string',
        'centralConfig' => 'bool',
        'saveFieldList' => 'string[]',
        'version' => 'string',
        'restBuild' => 'string',
        'licenseValid' => 'bool'
);

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'apiVersion' => 'apiVersion',
        'serverName' => 'serverName',
        'centralConfig' => 'centralConfig',
        'saveFieldList' => 'saveFieldList',
        'version' => 'version',
        'restBuild' => 'restBuild',
        'licenseValid' => 'licenseValid'
);

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'apiVersion' => 'setApiVersion',
        'serverName' => 'setServerName',
        'centralConfig' => 'setCentralConfig',
        'saveFieldList' => 'setSaveFieldList',
        'version' => 'setVersion',
        'restBuild' => 'setRestBuild',
        'licenseValid' => 'setLicenseValid'
);

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'apiVersion' => 'getApiVersion',
        'serverName' => 'getServerName',
        'centralConfig' => 'getCentralConfig',
        'saveFieldList' => 'getSaveFieldList',
        'version' => 'getVersion',
        'restBuild' => 'getRestBuild',
        'licenseValid' => 'getLicenseValid'
);

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['apiVersion'] = isset($data['apiVersion']) ? $data['apiVersion'] : null;
        $this->container['serverName'] = isset($data['serverName']) ? $data['serverName'] : null;
        $this->container['centralConfig'] = isset($data['centralConfig']) ? $data['centralConfig'] : null;
        $this->container['saveFieldList'] = isset($data['saveFieldList']) ? $data['saveFieldList'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['restBuild'] = isset($data['restBuild']) ? $data['restBuild'] : null;
        $this->container['licenseValid'] = isset($data['licenseValid']) ? $data['licenseValid'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['apiVersion'] === null) {
            $invalid_properties[] = "'apiVersion' can't be null";
        }
        if ($this->container['serverName'] === null) {
            $invalid_properties[] = "'serverName' can't be null";
        }
        if ($this->container['centralConfig'] === null) {
            $invalid_properties[] = "'centralConfig' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalid_properties[] = "'version' can't be null";
        }
        if ($this->container['restBuild'] === null) {
            $invalid_properties[] = "'restBuild' can't be null";
        }
        if ($this->container['licenseValid'] === null) {
            $invalid_properties[] = "'licenseValid' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['apiVersion'] === null) {
            return false;
        }
        if ($this->container['serverName'] === null) {
            return false;
        }
        if ($this->container['centralConfig'] === null) {
            return false;
        }
        if ($this->container['version'] === null) {
            return false;
        }
        if ($this->container['restBuild'] === null) {
            return false;
        }
        if ($this->container['licenseValid'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets apiVersion
     * @return int
     */
    public function getApiVersion()
    {
        return $this->container['apiVersion'];
    }

    /**
     * Sets apiVersion
     * @param int $apiVersion
     * @return $this
     */
    public function setApiVersion($apiVersion)
    {
        $this->container['apiVersion'] = $apiVersion;

        return $this;
    }

    /**
     * Gets serverName
     * @return string
     */
    public function getServerName()
    {
        return $this->container['serverName'];
    }

    /**
     * Sets serverName
     * @param string $serverName
     * @return $this
     */
    public function setServerName($serverName)
    {
        $this->container['serverName'] = $serverName;

        return $this;
    }

    /**
     * Gets centralConfig
     * @return bool
     */
    public function getCentralConfig()
    {
        return $this->container['centralConfig'];
    }

    /**
     * Sets centralConfig
     * @param bool $centralConfig
     * @return $this
     */
    public function setCentralConfig($centralConfig)
    {
        $this->container['centralConfig'] = $centralConfig;

        return $this;
    }

    /**
     * Gets saveFieldList
     * @return string[]
     */
    public function getSaveFieldList()
    {
        return $this->container['saveFieldList'];
    }

    /**
     * Sets saveFieldList
     * @param string[] $saveFieldList
     * @return $this
     */
    public function setSaveFieldList($saveFieldList)
    {
        $this->container['saveFieldList'] = $saveFieldList;

        return $this;
    }

    /**
     * Gets version
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     * @param string $version
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets restBuild
     * @return string
     */
    public function getRestBuild()
    {
        return $this->container['restBuild'];
    }

    /**
     * Sets restBuild
     * @param string $restBuild
     * @return $this
     */
    public function setRestBuild($restBuild)
    {
        $this->container['restBuild'] = $restBuild;

        return $this;
    }

    /**
     * Gets licenseValid
     * @return bool
     */
    public function getLicenseValid()
    {
        return $this->container['licenseValid'];
    }

    /**
     * Sets licenseValid
     * @param bool $licenseValid
     * @return $this
     */
    public function setLicenseValid($licenseValid)
    {
        $this->container['licenseValid'] = $licenseValid;

        return $this;
}

}
