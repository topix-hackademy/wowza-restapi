<?php
/**
 * ServerConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  WowzaApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Topix\Hackademy\WowzaApi\Model;
use Topix\Hackademy\WowzaApi\Configuration;


/**
 * ServerConfig Class Doc Comment
 *
 * @category    Class
 * @package     WowzaApi
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ServerConfig extends SwaggerModel
{

    /**
     * The original name of the model.
     * @var string
     */
    protected static $swaggerModelName = 'ServerConfig';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @var string[]
     */
    protected static $swaggerTypes = array(
        'transportThreadPoolAutoValue' => 'string',
        'handlerThreadPool' => 'string',
        'transportThreadPool' => 'string',
        'ipAddress' => 'string',
        'serverName' => 'string',
        'description' => 'string',
        'rtpDataPortSharingPort' => 'int',
        'version' => 'string',
        'port' => 'int',
        'serverListeners' => ServerListenersConfig::class,
        'name' => 'string',
        'rtpDataPortSharing' => 'bool',
        'handlerThreadPoolAutoValue' => 'string',
        'defaultStreamPrefix' => 'string',
        'saveFieldList' => 'string[]'
    );

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'transportThreadPoolAutoValue' => 'transportThreadPoolAutoValue',
        'handlerThreadPool' => 'handlerThreadPool',
        'transportThreadPool' => 'transportThreadPool',
        'ipAddress' => 'ipAddress',
        'serverName' => 'serverName',
        'description' => 'description',
        'rtpDataPortSharingPort' => 'rtpDataPortSharingPort',
        'version' => 'version',
        'port' => 'port',
        'serverListeners' => 'serverListeners',
        'name' => 'name',
        'rtpDataPortSharing' => 'rtpDataPortSharing',
        'handlerThreadPoolAutoValue' => 'handlerThreadPoolAutoValue',
        'defaultStreamPrefix' => 'defaultStreamPrefix',
        'saveFieldList' => 'saveFieldList'
    );

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'transportThreadPoolAutoValue' => 'setTransportThreadPoolAutoValue',
        'handlerThreadPool' => 'setHandlerThreadPool',
        'transportThreadPool' => 'setTransportThreadPool',
        'ipAddress' => 'setIpAddress',
        'serverName' => 'setServerName',
        'description' => 'setDescription',
        'rtpDataPortSharingPort' => 'setRtpDataPortSharingPort',
        'version' => 'setVersion',
        'port' => 'setPort',
        'serverListeners' => 'setServerListeners',
        'name' => 'setName',
        'rtpDataPortSharing' => 'setRtpDataPortSharing',
        'handlerThreadPoolAutoValue' => 'setHandlerThreadPoolAutoValue',
        'defaultStreamPrefix' => 'setDefaultStreamPrefix',
        'saveFieldList' => 'setSaveFieldList'
    );

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'transportThreadPoolAutoValue' => 'getTransportThreadPoolAutoValue',
        'handlerThreadPool' => 'getHandlerThreadPool',
        'transportThreadPool' => 'getTransportThreadPool',
        'ipAddress' => 'getIpAddress',
        'serverName' => 'getServerName',
        'description' => 'getDescription',
        'rtpDataPortSharingPort' => 'getRtpDataPortSharingPort',
        'version' => 'getVersion',
        'port' => 'getPort',
        'serverListeners' => 'getServerListeners',
        'name' => 'getName',
        'rtpDataPortSharing' => 'getRtpDataPortSharing',
        'handlerThreadPoolAutoValue' => 'getHandlerThreadPoolAutoValue',
        'defaultStreamPrefix' => 'getDefaultStreamPrefix',
        'saveFieldList' => 'getSaveFieldList'
    );





    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transportThreadPoolAutoValue'] = isset($data['transportThreadPoolAutoValue']) ? $data['transportThreadPoolAutoValue'] : null;
        $this->container['handlerThreadPool'] = isset($data['handlerThreadPool']) ? $data['handlerThreadPool'] : null;
        $this->container['transportThreadPool'] = isset($data['transportThreadPool']) ? $data['transportThreadPool'] : null;
        $this->container['ipAddress'] = isset($data['ipAddress']) ? $data['ipAddress'] : null;
        $this->container['serverName'] = isset($data['serverName']) ? $data['serverName'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['rtpDataPortSharingPort'] = isset($data['rtpDataPortSharingPort']) ? $data['rtpDataPortSharingPort'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['port'] = isset($data['port']) ? $data['port'] : null;
        $this->container['serverListeners'] = isset($data['serverListeners']) ? $data['serverListeners'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['rtpDataPortSharing'] = isset($data['rtpDataPortSharing']) ? $data['rtpDataPortSharing'] : null;
        $this->container['handlerThreadPoolAutoValue'] = isset($data['handlerThreadPoolAutoValue']) ? $data['handlerThreadPoolAutoValue'] : null;
        $this->container['defaultStreamPrefix'] = isset($data['defaultStreamPrefix']) ? $data['defaultStreamPrefix'] : null;
        $this->container['saveFieldList'] = isset($data['saveFieldList']) ? $data['saveFieldList'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['transportThreadPoolAutoValue'] === null) {
            $invalid_properties[] = "'transportThreadPoolAutoValue' can't be null";
        }
        if ($this->container['handlerThreadPool'] === null) {
            $invalid_properties[] = "'handlerThreadPool' can't be null";
        }
        if ($this->container['transportThreadPool'] === null) {
            $invalid_properties[] = "'transportThreadPool' can't be null";
        }
        if ($this->container['ipAddress'] === null) {
            $invalid_properties[] = "'ipAddress' can't be null";
        }
        if ($this->container['serverName'] === null) {
            $invalid_properties[] = "'serverName' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalid_properties[] = "'description' can't be null";
        }
        if ($this->container['rtpDataPortSharingPort'] === null) {
            $invalid_properties[] = "'rtpDataPortSharingPort' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalid_properties[] = "'version' can't be null";
        }
        if ($this->container['port'] === null) {
            $invalid_properties[] = "'port' can't be null";
        }
        if ($this->container['serverListeners'] === null) {
            $invalid_properties[] = "'serverListeners' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['rtpDataPortSharing'] === null) {
            $invalid_properties[] = "'rtpDataPortSharing' can't be null";
        }
        if ($this->container['handlerThreadPoolAutoValue'] === null) {
            $invalid_properties[] = "'handlerThreadPoolAutoValue' can't be null";
        }
        if ($this->container['defaultStreamPrefix'] === null) {
            $invalid_properties[] = "'defaultStreamPrefix' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['transportThreadPoolAutoValue'] === null) {
            return false;
        }
        if ($this->container['handlerThreadPool'] === null) {
            return false;
        }
        if ($this->container['transportThreadPool'] === null) {
            return false;
        }
        if ($this->container['ipAddress'] === null) {
            return false;
        }
        if ($this->container['serverName'] === null) {
            return false;
        }
        if ($this->container['description'] === null) {
            return false;
        }
        if ($this->container['rtpDataPortSharingPort'] === null) {
            return false;
        }
        if ($this->container['version'] === null) {
            return false;
        }
        if ($this->container['port'] === null) {
            return false;
        }
        if ($this->container['serverListeners'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['rtpDataPortSharing'] === null) {
            return false;
        }
        if ($this->container['handlerThreadPoolAutoValue'] === null) {
            return false;
        }
        if ($this->container['defaultStreamPrefix'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets transportThreadPoolAutoValue
     * @return string
     */
    public function getTransportThreadPoolAutoValue()
    {
        return $this->container['transportThreadPoolAutoValue'];
    }

    /**
     * Sets transportThreadPoolAutoValue
     * @param string $transportThreadPoolAutoValue
     * @return $this
     */
    public function setTransportThreadPoolAutoValue($transportThreadPoolAutoValue)
    {
        $this->container['transportThreadPoolAutoValue'] = $transportThreadPoolAutoValue;

        return $this;
    }

    /**
     * Gets handlerThreadPool
     * @return string
     */
    public function getHandlerThreadPool()
    {
        return $this->container['handlerThreadPool'];
    }

    /**
     * Sets handlerThreadPool
     * @param string $handlerThreadPool
     * @return $this
     */
    public function setHandlerThreadPool($handlerThreadPool)
    {
        $this->container['handlerThreadPool'] = $handlerThreadPool;

        return $this;
    }

    /**
     * Gets transportThreadPool
     * @return string
     */
    public function getTransportThreadPool()
    {
        return $this->container['transportThreadPool'];
    }

    /**
     * Sets transportThreadPool
     * @param string $transportThreadPool
     * @return $this
     */
    public function setTransportThreadPool($transportThreadPool)
    {
        $this->container['transportThreadPool'] = $transportThreadPool;

        return $this;
    }

    /**
     * Gets ipAddress
     * @return string
     */
    public function getIpAddress()
    {
        return $this->container['ipAddress'];
    }

    /**
     * Sets ipAddress
     * @param string $ipAddress
     * @return $this
     */
    public function setIpAddress($ipAddress)
    {
        $this->container['ipAddress'] = $ipAddress;

        return $this;
    }

    /**
     * Gets serverName
     * @return string
     */
    public function getServerName()
    {
        return $this->container['serverName'] == NULL ? Configuration::$DEFAULT_SERVER : $this->container['serverName'];
    }

    /**
     * Sets serverName
     * @param string $serverName
     * @return $this
     */
    public function setServerName($serverName)
    {
        $this->container['serverName'] = $serverName;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets rtpDataPortSharingPort
     * @return int
     */
    public function getRtpDataPortSharingPort()
    {
        return $this->container['rtpDataPortSharingPort'];
    }

    /**
     * Sets rtpDataPortSharingPort
     * @param int $rtpDataPortSharingPort
     * @return $this
     */
    public function setRtpDataPortSharingPort($rtpDataPortSharingPort)
    {
        $this->container['rtpDataPortSharingPort'] = $rtpDataPortSharingPort;

        return $this;
    }

    /**
     * Gets version
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     * @param string $version
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets port
     * @return int
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     * @param int $port
     * @return $this
     */
    public function setPort($port)
    {
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets serverListeners
     * @return  ServerListenersConfig
     */
    public function getServerListeners()
    {
        return $this->container['serverListeners'];
    }

    /**
     * Sets serverListeners
     * @param ServerListenersConfig $serverListeners
     * @return $this
     */
    public function setServerListeners($serverListeners)
    {
        $this->container['serverListeners'] = $serverListeners;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets rtpDataPortSharing
     * @return bool
     */
    public function getRtpDataPortSharing()
    {
        return $this->container['rtpDataPortSharing'];
    }

    /**
     * Sets rtpDataPortSharing
     * @param bool $rtpDataPortSharing
     * @return $this
     */
    public function setRtpDataPortSharing($rtpDataPortSharing)
    {
        $this->container['rtpDataPortSharing'] = $rtpDataPortSharing;

        return $this;
    }

    /**
     * Gets handlerThreadPoolAutoValue
     * @return string
     */
    public function getHandlerThreadPoolAutoValue()
    {
        return $this->container['handlerThreadPoolAutoValue'];
    }

    /**
     * Sets handlerThreadPoolAutoValue
     * @param string $handlerThreadPoolAutoValue
     * @return $this
     */
    public function setHandlerThreadPoolAutoValue($handlerThreadPoolAutoValue)
    {
        $this->container['handlerThreadPoolAutoValue'] = $handlerThreadPoolAutoValue;

        return $this;
    }

    /**
     * Gets defaultStreamPrefix
     * @return string
     */
    public function getDefaultStreamPrefix()
    {
        return $this->container['defaultStreamPrefix'];
    }

    /**
     * Sets defaultStreamPrefix
     * @param string $defaultStreamPrefix
     * @return $this
     */
    public function setDefaultStreamPrefix($defaultStreamPrefix)
    {
        $this->container['defaultStreamPrefix'] = $defaultStreamPrefix;

        return $this;
    }

    /**
     * Gets saveFieldList
     * @return string[]
     */
    public function getSaveFieldList()
    {
        return $this->container['saveFieldList'];
    }

    /**
     * Sets saveFieldList
     * @param string[] $saveFieldList
     * @return $this
     */
    public function setSaveFieldList($saveFieldList)
    {
        $this->container['saveFieldList'] = $saveFieldList;

        return $this;
    }

}
