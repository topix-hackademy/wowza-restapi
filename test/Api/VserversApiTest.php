<?php
/**
 * VserversApiTest
 * PHP version 5
 *
 * @category Class
 * @package  WowzaApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Topix\Hackademy\WowzaApi\Test\Api;

use Topix\Hackademy\WowzaApi\ApiException;
use Topix\Hackademy\WowzaApi\Client\VserversApi;
use Topix\Hackademy\WowzaApi\Configuration;
use Topix\Hackademy\WowzaApi\Model\ServerConfig;
use Topix\Hackademy\WowzaApi\Model\ServerConfigAdv;
use Topix\Hackademy\WowzaApi\Model\ServerLogFilesConfig;

/**
 * VserversApiTest Class Doc Comment
 *
 * @category Class
 * @package  WowzaApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VserversApiTest extends TestCase
{

    /**
     * @var VserversApi
     */
    protected $api;

    /**
     * @var string
     */
    protected $serverName;

    /**
     *
     * Retrieves the REST configuration information.
     * @test
     */
    public function it_should_throw_an_exception()
    {

        $this->setExpectedException(ApiException::class);

        $api_instance = new VserversApi();

        $result = $api_instance->getServersConfigWithHttpInfo();

    }

    /**
     *
     * Retrieves the REST configuration information.
     * @test
     */
    public function it_should_not_throw_an_exception()
    {
        try {
            $api_instance = new VserversApi($this->apiClient);
            $result = $api_instance->getServersConfigWithHttpInfo();
        } catch (ApiException $notExpected) {
            $this->fail();
            echo $notExpected->getMessage();
        }

        $this->assertTrue(TRUE);

    }
    /**
     * Setup before running each test case
     */
    public function setUp()
    {
        parent::setUp();

        $this->api = new VserversApi($this->apiClient);

        $this->serverName = $this->api->getServersConfig()->getServers()[0]->getServerName();

        $this->assertEquals($this->api->getServersConfig()->getServers()[0]->getServerName(),Configuration::$DEFAULT_SERVER);
    }

    /**
     * Test case for getServerConfig
     *
     * Retrieves the Server configuration.
     *
     */
    public function testGetServerConfig()
    {
        try {
            $result = $this->api->getServerConfig(Configuration::$DEFAULT_SERVER);
            $this->assertInstanceOf(ServerConfig::class,$result);

        } catch (ApiException $notExpected) {
            $this->fail();
            echo $notExpected->getMessage();
        }

        $this->assertTrue(TRUE);
    }
    /**
     * Test case for getServerConfigAdv
     *
     * Retrieves the advanced Server configuration.
     *
     */
    public function testGetServerConfigAdv()
    {
        try {
            $result = $this->api->getServerConfigAdv(Configuration::$DEFAULT_SERVER);
            $this->assertInstanceOf(ServerConfigAdv::class,$result);

        } catch (ApiException $notExpected) {
            $this->fail();
            echo $notExpected->getMessage();
        }

        $this->assertTrue(TRUE);
    }
    /**
     * Test case for getServerLogFileConfig
     *
     * Retrieves the contents of a Server Log with the specified log name.
     *
     */
    public function testGetServerLogFileConfig()
    {

    }
    /**
     * Test case for getServerLogFileDownloadConfig
     *
     * Retrieves the Server Log file for the specified log name, zipped.
     *
     */
    public function testGetServerLogFileDownloadConfig()
    {

    }
    /**
     * Test case for getServerLogFilesConfig
     *
     * Retrieves the list of server log files.
     *
     */
    public function testGetServerLogFilesConfig()
    {

    }
    /**
     * Test case for getServerLogTypesConfig
     *
     * Retrieves the list of available server Log Types.
     *
     */
    public function testGetServerLogTypesConfig()
    {

    }
    /**
     * Test case for getServerLogsConfig
     *
     * Retrieves the contents of multiple Server Logs with the specified type in the log name.
     *
     */
    public function testGetServerLogsConfig()
    {

    }
    /**
     * Test case for getServersConfig
     *
     * Retrieves the list of Servers.
     *
     */
    public function testGetServersConfig()
    {

    }
    /**
     * Test case for getSourceDriverNamesList
     *
     * Get the list of source control drivers.
     *
     */
    public function testGetSourceDriverNamesList()
    {

    }
    /**
     * Test case for putServerAction
     *
     * Tells the Server to perform an action.
     *
     */
    public function testPutServerAction()
    {

    }
    /**
     * Test case for putServerConfig
     *
     * Updates the Server configuration.
     *
     */
    public function testPutServerConfig()
    {

    }
    /**
     * Test case for putServerConfigAdv
     *
     * Updates the advanced Server configuration.
     *
     */
    public function testPutServerConfigAdv()
    {

    }
}
