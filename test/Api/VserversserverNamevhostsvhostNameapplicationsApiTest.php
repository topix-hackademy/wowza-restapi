<?php
/**
 * VserversserverNamevhostsvhostNameapplicationsApiTest
 * PHP version 5
 *
 * @category Class
 * @package  WowzaApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Topix\Hackademy\WowzaApi\Test\Api;

use Topix\Hackademy\WowzaApi\ApiException;
use Topix\Hackademy\WowzaApi\Client\VserversserverNamevhostsvhostNameapplicationsApi;
use Topix\Hackademy\WowzaApi\Configuration;
use Topix\Hackademy\WowzaApi\Model\ApplicationConfig;
use Topix\Hackademy\WowzaApi\Model\ApplicationConfigAdv;
use Topix\Hackademy\WowzaApi\Model\ApplicationsConfig;
use Topix\Hackademy\WowzaApi\Model\CurrentApplicationStatistics;

/**
 * VserversserverNamevhostsvhostNameapplicationsApiTest Class Doc Comment
 *
 * @category Class
 * @package  WowzaApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VserversserverNamevhostsvhostNameapplicationsApiTest extends TestCase
{

    /**
     * @var string
     */
    protected $application;


    /**
     * @var VserversserverNamevhostsvhostNameapplicationsApi
     */
    protected $api;

    /**
     *
     * Retrieves the REST configuration information.
     * @test
     */
    public function it_should_throw_an_exception()
    {

        $this->setExpectedException(ApiException::class);

        $api_instance = new VserversserverNamevhostsvhostNameapplicationsApi();

        $result = $api_instance->getApplicationsConfig(Configuration::$DEFAULT_SERVER, Configuration::$DEFAULT_VHOST);

    }

    /**
     *
     * Retrieves the REST configuration information.
     * @test
     */
    public function it_should_not_throw_an_exception()
    {
        try {
            $api_instance = new VserversserverNamevhostsvhostNameapplicationsApi($this->apiClient);
            $result = $api_instance->getApplicationsConfig(Configuration::$DEFAULT_SERVER, Configuration::$DEFAULT_VHOST);
        } catch (ApiException $notExpected) {
            $this->fail();
            echo $notExpected->getMessage();
        }

        $this->assertTrue(TRUE);

    }
    /**
     * Setup before running each test case
     */
    public function setUp()
    {
        parent::setUp();

        $this->api = new VserversserverNamevhostsvhostNameapplicationsApi($this->apiClient);

        $result = $this->api->getApplicationsConfig(Configuration::$DEFAULT_SERVER, Configuration::$DEFAULT_VHOST);
        $this->application = $result->getApplications()[0]->getId();

    }

    /**
     * Setup before running each test case
     */
    public static function setUpBeforeClass()
    {

    }

    /**
     * Clean up after running each test case
     */
    public static function tearDownAfterClass()
    {

    }

    /**
     * Test case for deleteApplicationConfig
     *
     * Deletes the specified Application configuration.
     *
     */
    public function testDeleteApplicationConfig()
    {

    }
    /**
     * Test case for deletePublisherAppConfig
     *
     * Deletes the specified Publisher configuration.
     *
     */
    public function testDeletePublisherAppConfig()
    {

    }
    /**
     * Test case for deletePushPublishStreamAppConfig
     *
     * Deletes the specified PushPublish map entry configuration.
     *
     */
    public function testDeletePushPublishStreamAppConfig()
    {

    }
    /**
     * Test case for deleteSDPFileAppConfig
     *
     * Deletes the specified SDP file.
     *
     */
    public function testDeleteSDPFileAppConfig()
    {

    }
    /**
     * Test case for deleteSMILFileAppConfig
     *
     * Deletes the specified SMIL File configuration.
     *
     */
    public function testDeleteSMILFileAppConfig()
    {

    }
    /**
     * Test case for deleteStreamFileAppConfig
     *
     * Deletes the specified Stream File configuration.
     *
     */
    public function testDeleteStreamFileAppConfig()
    {

    }
    /**
     * Test case for deleteTranscoderEncodeAppConfig
     *
     * Deletes the specified Trancoder Encode configuration.
     *
     */
    public function testDeleteTranscoderEncodeAppConfig()
    {

    }
    /**
     * Test case for deleteTranscoderOverlayDecodeAppConfig
     *
     * Deletes the specified Trancoder Overlay Decode configuration.
     *
     */
    public function testDeleteTranscoderOverlayDecodeAppConfig()
    {

    }
    /**
     * Test case for deleteTranscoderOverlayEncodeAppConfig
     *
     * Deletes the specified Trancoder Overlay Encode configuration.
     *
     */
    public function testDeleteTranscoderOverlayEncodeAppConfig()
    {

    }
    /**
     * Test case for deleteTranscoderStreamNameGroupAppConfig
     *
     * Deletes the specified Trancoder StreamNameGroup configuration.
     *
     */
    public function testDeleteTranscoderStreamNameGroupAppConfig()
    {

    }
    /**
     * Test case for deleteTranscoderTemplateAppConfig
     *
     * Deletes the specified Trancoder Template configuration.
     *
     */
    public function testDeleteTranscoderTemplateAppConfig()
    {

    }
    /**
     * Test case for getApplicationConfig
     *
     * Retrieves the specified Application configuration.
     *
     */
    public function testGetApplicationConfig()
    {

        try {
            $result = $this->api->getApplicationConfig(Configuration::$DEFAULT_SERVER, Configuration::$DEFAULT_VHOST, $this->application);
            $this->assertInstanceOf(ApplicationConfig::class,$result);

        } catch (ApiException $notExpected) {
            $this->fail();
            echo $notExpected->getMessage();
        }

        $this->assertTrue(TRUE);

    }
    /**
     * Test case for getApplicationConfigAdv
     *
     * Retrieves the specified advanced Application configuration.
     *
     */
    public function testGetApplicationConfigAdv()
    {
        try {
            $result = $this->api->getApplicationConfigAdv(Configuration::$DEFAULT_SERVER, Configuration::$DEFAULT_VHOST, $this->application);
            $this->assertInstanceOf(ApplicationConfigAdv::class,$result);

        } catch (ApiException $notExpected) {
            $this->fail();
            echo $notExpected->getMessage();
        }

        $this->assertTrue(TRUE);
    }
    /**
     * Test case for getApplicationsConfig
     *
     * Retrieves the list of Applications for the specifed vhost.
     *
     */
    public function testGetApplicationsConfig()
    {
        try {
            $result = $this->api->getApplicationsConfig(Configuration::$DEFAULT_SERVER, Configuration::$DEFAULT_VHOST);
            $this->assertInstanceOf(ApplicationsConfig::class,$result);

        } catch (ApiException $notExpected) {
            $this->fail();
            echo $notExpected->getMessage();
        }

        $this->assertTrue(TRUE);
    }
    /**
     * Test case for getBuyDRMStreamMapsConfig
     *
     * Retrieves the BuyDRM stream mapfile for the specified Application.
     *
     */
    public function testGetBuyDRMStreamMapsConfig()
    {

    }
    /**
     * Test case for getCurrentApplicationStatistics
     *
     * Retrieves the current Application statistics.
     *
     */
    public function testGetCurrentApplicationStatistics()
    {
        try {
            $result = $this->api->getCurrentApplicationStatistics(Configuration::$DEFAULT_SERVER, Configuration::$DEFAULT_VHOST, $this->application);
            $this->assertInstanceOf(CurrentApplicationStatistics::class,$result);

        } catch (ApiException $notExpected) {
            $this->fail();
            echo $notExpected->getMessage();
        }

        $this->assertTrue(TRUE);
    }
    /**
     * Test case for getCurrentIncomingStreamStatistics
     *
     * Retrieves the Current Incoming Stream statistics for the specifed Incoming Stream.
     *
     */
    public function testGetCurrentIncomingStreamStatistics()
    {

    }
    /**
     * Test case for getDRMConfig
     *
     * Retrieves the DRM configuration for the specified Application.
     *
     */
    public function testGetDRMConfig()
    {

    }
    /**
     * Test case for getDRMConfigAdv
     *
     * Retrieves the advanced DRM configuration for the specified Application.
     *
     */
    public function testGetDRMConfigAdv()
    {

    }
    /**
     * Test case for getDVRConfig
     *
     * Retrieves the DVR configuration for the specified Application.
     *
     */
    public function testGetDVRConfig()
    {

    }
    /**
     * Test case for getDVRConfigAdv
     *
     * Retrieves the advanced DVR configuration for the specified Application.
     *
     */
    public function testGetDVRConfigAdv()
    {

    }
    /**
     * Test case for getDefaultStreamRecorderConfig
     *
     * Retrieves a Stream Recorder of the requested name, popluated with the default values.
     *
     */
    public function testGetDefaultStreamRecorderConfig()
    {

    }
    /**
     * Test case for getDvrRESTConverterStore
     *
     * Retrieves the information about a store/converter associated with the application instance.
     *
     */
    public function testGetDvrRESTConverterStore()
    {

    }
    /**
     * Test case for getDvrRESTConverterStores
     *
     * Retrieves the list of DVR stores associated with this application instance.
     *
     */
    public function testGetDvrRESTConverterStores()
    {

    }
    /**
     * Test case for getHistoricApplicationStatistics
     *
     * Retrieves the historic Application statistics.
     *
     */
    public function testGetHistoricApplicationStatistics()
    {

    }
    /**
     * Test case for getIncomingStreamConfig
     *
     * Retrieves the Incoming Stream information for the specifed Incoming Stream.
     *
     */
    public function testGetIncomingStreamConfig()
    {

    }
    /**
     * Test case for getInstanceConfig
     *
     * Retrieves the specified Application Instance information.
     *
     */
    public function testGetInstanceConfig()
    {

    }
    /**
     * Test case for getInstancesConfig
     *
     * Retrieves the list of Instances for the specified Application.
     *
     */
    public function testGetInstancesConfig()
    {

    }
    /**
     * Test case for getLiveEncoderConfig
     *
     * Retrieves the LiveEncoder configuration for the specified IncomingStream.
     *
     */
    public function testGetLiveEncoderConfig()
    {

    }
    /**
     * Test case for getModulesConfig
     *
     * Retrieves the list of Modules for the specified Application.
     *
     */
    public function testGetModulesConfig()
    {

    }
    /**
     * Test case for getPublisherAppConfig
     *
     * Retrieves the specified Publisher configuration.
     *
     */
    public function testGetPublisherAppConfig()
    {

    }
    /**
     * Test case for getPublishersAppConfig
     *
     * Retrieves the list of Publishers for the specified Application.
     *
     */
    public function testGetPublishersAppConfig()
    {

    }
    /**
     * Test case for getPushPublishStreamAppConfig
     *
     * Retrieves the PushPublish map entry configuration for the specified Application.
     *
     */
    public function testGetPushPublishStreamAppConfig()
    {

    }
    /**
     * Test case for getPushPublishStreamsAppConfig
     *
     * Retrieves the list of PushPublish Streams for the specified Application.
     *
     */
    public function testGetPushPublishStreamsAppConfig()
    {

    }
    /**
     * Test case for getSDPFilesAppConfig
     *
     * Retrieves the list of SDP Files for the specified Application.
     *
     */
    public function testGetSDPFilesAppConfig()
    {

    }
    /**
     * Test case for getSMILFileAppConfig
     *
     * Retrieves the specified SMIL File configuration.
     *
     */
    public function testGetSMILFileAppConfig()
    {

    }
    /**
     * Test case for getSMILFilesAppConfig
     *
     * Retrieves the list of SMIL Files for the specified Application.
     *
     */
    public function testGetSMILFilesAppConfig()
    {

    }
    /**
     * Test case for getSecurityConfig
     *
     * Retrieves the Security configuration for the specified Application.
     *
     */
    public function testGetSecurityConfig()
    {

    }
    /**
     * Test case for getShortUrlEncoderConfig
     *
     * Retrieves the Short URL for the LiveEncoder configuration for the specified IncomingStream.
     *
     */
    public function testGetShortUrlEncoderConfig()
    {

    }
    /**
     * Test case for getSourceControlConfig
     *
     * Gets information about the Source Control and it's supported features.
     *
     */
    public function testGetSourceControlConfig()
    {

    }
    /**
     * Test case for getStreamConfigurationConfig
     *
     * Retrieves the Stream configuration for the specified Application.
     *
     */
    public function testGetStreamConfigurationConfig()
    {

    }
    /**
     * Test case for getStreamFileAppConfig
     *
     * Retrieves the specified Stream File configuration.
     *
     */
    public function testGetStreamFileAppConfig()
    {

    }
    /**
     * Test case for getStreamFileAppConfigAdv
     *
     * Retrieves the Advanced Stream File configuration.
     *
     */
    public function testGetStreamFileAppConfigAdv()
    {

    }
    /**
     * Test case for getStreamFilesAppConfig
     *
     * Retrieves the list of Stream Files for the specified Application.
     *
     */
    public function testGetStreamFilesAppConfig()
    {

    }
    /**
     * Test case for getStreamGroupConfig
     *
     * Retrieves the specified StreamGroup configuration.
     *
     */
    public function testGetStreamGroupConfig()
    {

    }
    /**
     * Test case for getStreamGroupsConfig
     *
     * Retrieves the list of Stream Groups for the specified Application Instance.
     *
     */
    public function testGetStreamGroupsConfig()
    {

    }
    /**
     * Test case for getStreamRecorderConfig
     *
     * Retrieves the specifed Stream Recorder.
     *
     */
    public function testGetStreamRecorderConfig()
    {

    }
    /**
     * Test case for getStreamRecordersConfig
     *
     * Retrieves the list of Stream Recorders for the specified Application Instance.
     *
     */
    public function testGetStreamRecordersConfig()
    {

    }
    /**
     * Test case for getTranscoderAppConfig
     *
     * Retrieves the Transcoder configuration for the specified Application.
     *
     */
    public function testGetTranscoderAppConfig()
    {

    }
    /**
     * Test case for getTranscoderAppConfigAdv
     *
     * Retrieves the Advanced Transcoder configuration for the specified Application.
     *
     */
    public function testGetTranscoderAppConfigAdv()
    {

    }
    /**
     * Test case for getTranscoderEncodeAppConfig
     *
     * Retrieves the specified Trancoder Encode configuration.
     *
     */
    public function testGetTranscoderEncodeAppConfig()
    {

    }
    /**
     * Test case for getTranscoderEncodeAppConfigAdv
     *
     * Retrieves the Advanced Transcoder Encode configuration.
     *
     */
    public function testGetTranscoderEncodeAppConfigAdv()
    {

    }
    /**
     * Test case for getTranscoderEncodesAppConfig
     *
     * Retrieves the list of Transcoder Encode Configurations for the specified Application.
     *
     */
    public function testGetTranscoderEncodesAppConfig()
    {

    }
    /**
     * Test case for getTranscoderOverlayDecodeAppConfig
     *
     * Retrieves the specified Trancoder Overlay Decode configuration.
     *
     */
    public function testGetTranscoderOverlayDecodeAppConfig()
    {

    }
    /**
     * Test case for getTranscoderOverlayEncodeAppConfig
     *
     * Retrieves the specified Trancoder Overlay Encode configuration.
     *
     */
    public function testGetTranscoderOverlayEncodeAppConfig()
    {

    }
    /**
     * Test case for getTranscoderStreamNameGroupAppConfig
     *
     * Retrieves the specified Trancoder StreamNameGroup configuration.
     *
     */
    public function testGetTranscoderStreamNameGroupAppConfig()
    {

    }
    /**
     * Test case for getTranscoderStreamNameGroupsAppConfig
     *
     * Retrieves the list of Transcoder Stream Name Groups for the specified Template.
     *
     */
    public function testGetTranscoderStreamNameGroupsAppConfig()
    {

    }
    /**
     * Test case for getTranscoderTemplateAppConfig
     *
     * Retrieves the specified Trancoder Template configuration.
     *
     */
    public function testGetTranscoderTemplateAppConfig()
    {

    }
    /**
     * Test case for getTranscoderTemplateAppConfigAdv
     *
     * Retrieves the Advanced Transcoder Template configuration.
     *
     */
    public function testGetTranscoderTemplateAppConfigAdv()
    {

    }
    /**
     * Test case for getTranscoderTemplatesAppConfig
     *
     * Retrieves the list of Transcoder Template Configurations for the specified Application.
     *
     */
    public function testGetTranscoderTemplatesAppConfig()
    {

    }
    /**
     * Test case for getVerimatrixStreamMapsConfig
     *
     * Retrieves the Verimatrix stream mapfile for the specified Application.
     *
     */
    public function testGetVerimatrixStreamMapsConfig()
    {

    }
    /**
     * Test case for postApplicationConfig
     *
     * Adds the specified Application configuration.
     *
     */
    public function testPostApplicationConfig()
    {

    }
    /**
     * Test case for postApplicationConfigAdv
     *
     * Adds the specified advanced Application configuration.
     *
     */
    public function testPostApplicationConfigAdv()
    {

    }
    /**
     * Test case for postApplicationsConfig
     *
     * Adds an Application to the list of Applications  for the specifed vhost.
     *
     */
    public function testPostApplicationsConfig()
    {

    }
    /**
     * Test case for postPublisherAppConfig
     *
     * Adds the specified Publisher configuration.
     *
     */
    public function testPostPublisherAppConfig()
    {

    }
    /**
     * Test case for postPublishersAppConfig
     *
     * Add a Publisher to list of Publishers for the specified Application.
     *
     */
    public function testPostPublishersAppConfig()
    {

    }
    /**
     * Test case for postPushPublishStreamAppConfig
     *
     * Adds the specified PushPublish map entry configuration.
     *
     */
    public function testPostPushPublishStreamAppConfig()
    {

    }
    /**
     * Test case for postPushPublishStreamsAppConfig
     *
     * Adds a PushPublish Stream to list of PushPublish Streams for the specified Application.
     *
     */
    public function testPostPushPublishStreamsAppConfig()
    {

    }
    /**
     * Test case for postSMILFileAppConfig
     *
     * Adds the specified SMIL File configuration.
     *
     */
    public function testPostSMILFileAppConfig()
    {

    }
    /**
     * Test case for postSMILFilesAppConfig
     *
     * Adds a SMIL File to the list of SMIL Files for the specified Application.
     *
     */
    public function testPostSMILFilesAppConfig()
    {

    }
    /**
     * Test case for postStreamFileAppConfig
     *
     * Adds the specified Stream File configuration.
     *
     */
    public function testPostStreamFileAppConfig()
    {

    }
    /**
     * Test case for postStreamFilesAppConfig
     *
     * Adds a Stream File to the list of Stream Files for the specified Application.
     *
     */
    public function testPostStreamFilesAppConfig()
    {

    }
    /**
     * Test case for postStreamRecorderConfig
     *
     * Creates a new Stream Recorder and starts recording.
     *
     */
    public function testPostStreamRecorderConfig()
    {

    }
    /**
     * Test case for postStreamRecordersConfig
     *
     * Creates a new Stream Recorder in the specified Application Instance and starts recording.
     *
     */
    public function testPostStreamRecordersConfig()
    {

    }
    /**
     * Test case for postTranscoderEncodeAppConfig
     *
     * Adds the specified Trancoder Encode configuration.
     *
     */
    public function testPostTranscoderEncodeAppConfig()
    {

    }
    /**
     * Test case for postTranscoderEncodesAppConfig
     *
     * Adds a Transcoder Encode Configuration to the specified Application.
     *
     */
    public function testPostTranscoderEncodesAppConfig()
    {

    }
    /**
     * Test case for postTranscoderStreamNameGroupAppConfig
     *
     * Adds the specified Trancoder StreamNameGroup configuration.
     *
     */
    public function testPostTranscoderStreamNameGroupAppConfig()
    {

    }
    /**
     * Test case for postTranscoderStreamNameGroupsAppConfig
     *
     * Adds a Transcoder Stream Name Groups Configuration to the specified Template.
     *
     */
    public function testPostTranscoderStreamNameGroupsAppConfig()
    {

    }
    /**
     * Test case for postTranscoderTemplateAppConfig
     *
     * Adds the specified Trancoder Template configuration.
     *
     */
    public function testPostTranscoderTemplateAppConfig()
    {

    }
    /**
     * Test case for postTranscoderTemplatesAppConfig
     *
     * Adds a Transcoder Templates Configuration to the specified Application.
     *
     */
    public function testPostTranscoderTemplatesAppConfig()
    {

    }
    /**
     * Test case for putApplicationAction
     *
     * .
     *
     */
    public function testPutApplicationAction()
    {

    }
    /**
     * Test case for putApplicationConfig
     *
     * Updates the specified Application configuration.
     *
     */
    public function testPutApplicationConfig()
    {

    }
    /**
     * Test case for putApplicationConfigAdv
     *
     * Updates the specified advanced Application configuration.
     *
     */
    public function testPutApplicationConfigAdv()
    {

    }
    /**
     * Test case for putBuyDRMStreamMapsConfig
     *
     * Updates the BuyDRM stream mapfile for the specified Application.
     *
     */
    public function testPutBuyDRMStreamMapsConfig()
    {

    }
    /**
     * Test case for putDRMConfig
     *
     * Updates the DRM configuration for the specified Application.
     *
     */
    public function testPutDRMConfig()
    {

    }
    /**
     * Test case for putDRMConfigAdv
     *
     * Updates the advanced DRM configuration for the specified Application.
     *
     */
    public function testPutDRMConfigAdv()
    {

    }
    /**
     * Test case for putDVRConfig
     *
     * Updates the DVR configuration for the specified Application.
     *
     */
    public function testPutDVRConfig()
    {

    }
    /**
     * Test case for putDVRConfigAdv
     *
     * Updates the advanced DVR configuration for the specified Application.
     *
     */
    public function testPutDVRConfigAdv()
    {

    }
    /**
     * Test case for putDvrRESTConverterStoreAction
     *
     * .
     *
     */
    public function testPutDvrRESTConverterStoreAction()
    {

    }
    /**
     * Test case for putDvrRESTConverterStoresAction
     *
     * .
     *
     */
    public function testPutDvrRESTConverterStoresAction()
    {

    }
    /**
     * Test case for putIncomingStreamAction
     *
     * .
     *
     */
    public function testPutIncomingStreamAction()
    {

    }
    /**
     * Test case for putInstanceAction
     *
     * .
     *
     */
    public function testPutInstanceAction()
    {

    }
    /**
     * Test case for putMediaCacheApplicationStoreAction
     *
     * .
     *
     */
    public function testPutMediaCacheApplicationStoreAction()
    {

    }
    /**
     * Test case for putModulesConfig
     *
     * Updates the list of Modules for the specified Application.
     *
     */
    public function testPutModulesConfig()
    {

    }
    /**
     * Test case for putPublisherAppConfig
     *
     * Updates the specified Publisher configuration.
     *
     */
    public function testPutPublisherAppConfig()
    {

    }
    /**
     * Test case for putPushPublishStreamAppAction
     *
     * .
     *
     */
    public function testPutPushPublishStreamAppAction()
    {

    }
    /**
     * Test case for putPushPublishStreamAppConfig
     *
     * Updates the specified PushPublish map entry configuration.
     *
     */
    public function testPutPushPublishStreamAppConfig()
    {

    }
    /**
     * Test case for putPushPublishStreamsAppConfig
     *
     * .
     *
     */
    public function testPutPushPublishStreamsAppConfig()
    {

    }
    /**
     * Test case for putSDPFileAppAction
     *
     * .
     *
     */
    public function testPutSDPFileAppAction()
    {

    }
    /**
     * Test case for putSMILFileAppAction
     *
     * .
     *
     */
    public function testPutSMILFileAppAction()
    {

    }
    /**
     * Test case for putSMILFileAppConfig
     *
     * Updates the specified SMIL File configuration.
     *
     */
    public function testPutSMILFileAppConfig()
    {

    }
    /**
     * Test case for putSecurityConfig
     *
     * Updates the Security configuration for the specified Application.
     *
     */
    public function testPutSecurityConfig()
    {

    }
    /**
     * Test case for putSourceControlAction
     *
     * .
     *
     */
    public function testPutSourceControlAction()
    {

    }
    /**
     * Test case for putStreamConfigurationConfig
     *
     * Updates the Stream configuration for the specified Application.
     *
     */
    public function testPutStreamConfigurationConfig()
    {

    }
    /**
     * Test case for putStreamFileAppAction
     *
     * .
     *
     */
    public function testPutStreamFileAppAction()
    {

    }
    /**
     * Test case for putStreamFileAppConfig
     *
     * Updates the specified Stream File configuration.
     *
     */
    public function testPutStreamFileAppConfig()
    {

    }
    /**
     * Test case for putStreamFileAppConfigAdv
     *
     * Updates the Advanced Stream File configuration.
     *
     */
    public function testPutStreamFileAppConfigAdv()
    {

    }
    /**
     * Test case for putStreamGroupAction
     *
     * .
     *
     */
    public function testPutStreamGroupAction()
    {

    }
    /**
     * Test case for putStreamRecorderAction
     *
     * .
     *
     */
    public function testPutStreamRecorderAction()
    {

    }
    /**
     * Test case for putTranscoderAppConfig
     *
     * Updates the Transcoder configuration for the specified Application.
     *
     */
    public function testPutTranscoderAppConfig()
    {

    }
    /**
     * Test case for putTranscoderAppConfigAdv
     *
     * Updates the Advanced Transcoder configuration for the specified Application.
     *
     */
    public function testPutTranscoderAppConfigAdv()
    {

    }
    /**
     * Test case for putTranscoderEncodeAppConfig
     *
     * Updates the specified Trancoder Encode configuration.
     *
     */
    public function testPutTranscoderEncodeAppConfig()
    {

    }
    /**
     * Test case for putTranscoderEncodeAppConfigAdv
     *
     * Updates the Advanced Transcoder Encode configuration.
     *
     */
    public function testPutTranscoderEncodeAppConfigAdv()
    {

    }
    /**
     * Test case for putTranscoderOverlayDecodeAppConfig
     *
     * Updates the specified Trancoder Overlay Decode configuration.
     *
     */
    public function testPutTranscoderOverlayDecodeAppConfig()
    {

    }
    /**
     * Test case for putTranscoderOverlayEncodeAppConfig
     *
     * Updates the specified Trancoder Overlay Encode configuration.
     *
     */
    public function testPutTranscoderOverlayEncodeAppConfig()
    {

    }
    /**
     * Test case for putTranscoderStreamNameGroupAppConfig
     *
     * Updates the specified Trancoder StreamNameGroup configuration.
     *
     */
    public function testPutTranscoderStreamNameGroupAppConfig()
    {

    }
    /**
     * Test case for putTranscoderTemplateAppAction
     *
     * .
     *
     */
    public function testPutTranscoderTemplateAppAction()
    {

    }
    /**
     * Test case for putTranscoderTemplateAppConfig
     *
     * Updates the specified Trancoder Template configuration.
     *
     */
    public function testPutTranscoderTemplateAppConfig()
    {

    }
    /**
     * Test case for putTranscoderTemplateAppConfigAdv
     *
     * Updates the Advanced Transcoder Template configuration.
     *
     */
    public function testPutTranscoderTemplateAppConfigAdv()
    {

    }
    /**
     * Test case for putVerimatrixStreamMapsConfig
     *
     * Updates the Verimatrix stream mapfile for the specified Application.
     *
     */
    public function testPutVerimatrixStreamMapsConfig()
    {

    }
}
